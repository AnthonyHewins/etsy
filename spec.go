// Package etsy provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package etsy

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	Api_keyScopes = "api_key.Scopes"
	Oauth2Scopes  = "oauth2.Scopes"
)

// Defines values for ListingVideoVideoState.
const (
	ListingVideoVideoStateActive   ListingVideoVideoState = "active"
	ListingVideoVideoStateDeleted  ListingVideoVideoState = "deleted"
	ListingVideoVideoStateFlagged  ListingVideoVideoState = "flagged"
	ListingVideoVideoStateInactive ListingVideoVideoState = "inactive"
)

// Defines values for ShopListingItemDimensionsUnit.
const (
	ShopListingItemDimensionsUnitCm     ShopListingItemDimensionsUnit = "cm"
	ShopListingItemDimensionsUnitFt     ShopListingItemDimensionsUnit = "ft"
	ShopListingItemDimensionsUnitIn     ShopListingItemDimensionsUnit = "in"
	ShopListingItemDimensionsUnitInches ShopListingItemDimensionsUnit = "inches"
	ShopListingItemDimensionsUnitM      ShopListingItemDimensionsUnit = "m"
	ShopListingItemDimensionsUnitMm     ShopListingItemDimensionsUnit = "mm"
	ShopListingItemDimensionsUnitYd     ShopListingItemDimensionsUnit = "yd"
)

// Defines values for ShopListingItemWeightUnit.
const (
	ShopListingItemWeightUnitG  ShopListingItemWeightUnit = "g"
	ShopListingItemWeightUnitKg ShopListingItemWeightUnit = "kg"
	ShopListingItemWeightUnitLb ShopListingItemWeightUnit = "lb"
	ShopListingItemWeightUnitOz ShopListingItemWeightUnit = "oz"
)

// Defines values for ShopListingListingType.
const (
	ShopListingListingTypeBoth     ShopListingListingType = "both"
	ShopListingListingTypeDownload ShopListingListingType = "download"
	ShopListingListingTypePhysical ShopListingListingType = "physical"
)

// Defines values for ShopListingState.
const (
	ShopListingStateActive   ShopListingState = "active"
	ShopListingStateDraft    ShopListingState = "draft"
	ShopListingStateExpired  ShopListingState = "expired"
	ShopListingStateInactive ShopListingState = "inactive"
	ShopListingStateSoldOut  ShopListingState = "sold_out"
)

// Defines values for ShopListingWhenMade.
const (
	ShopListingWhenMadeBefore1700  ShopListingWhenMade = "before_1700"
	ShopListingWhenMadeBefore2005  ShopListingWhenMade = "before_2005"
	ShopListingWhenMadeMadeToOrder ShopListingWhenMade = "made_to_order"
	ShopListingWhenMadeN1700s      ShopListingWhenMade = "1700s"
	ShopListingWhenMadeN1800s      ShopListingWhenMade = "1800s"
	ShopListingWhenMadeN1900s      ShopListingWhenMade = "1900s"
	ShopListingWhenMadeN1910s      ShopListingWhenMade = "1910s"
	ShopListingWhenMadeN1920s      ShopListingWhenMade = "1920s"
	ShopListingWhenMadeN1930s      ShopListingWhenMade = "1930s"
	ShopListingWhenMadeN1940s      ShopListingWhenMade = "1940s"
	ShopListingWhenMadeN1950s      ShopListingWhenMade = "1950s"
	ShopListingWhenMadeN1960s      ShopListingWhenMade = "1960s"
	ShopListingWhenMadeN1970s      ShopListingWhenMade = "1970s"
	ShopListingWhenMadeN1980s      ShopListingWhenMade = "1980s"
	ShopListingWhenMadeN1990s      ShopListingWhenMade = "1990s"
	ShopListingWhenMadeN20002004   ShopListingWhenMade = "2000_2004"
	ShopListingWhenMadeN20052009   ShopListingWhenMade = "2005_2009"
	ShopListingWhenMadeN20102019   ShopListingWhenMade = "2010_2019"
	ShopListingWhenMadeN20202024   ShopListingWhenMade = "2020_2024"
)

// Defines values for ShopListingWhoMade.
const (
	ShopListingWhoMadeCollective  ShopListingWhoMade = "collective"
	ShopListingWhoMadeIDid        ShopListingWhoMade = "i_did"
	ShopListingWhoMadeSomeoneElse ShopListingWhoMade = "someone_else"
)

// Defines values for ShopListingWithAssociationsItemDimensionsUnit.
const (
	ShopListingWithAssociationsItemDimensionsUnitCm     ShopListingWithAssociationsItemDimensionsUnit = "cm"
	ShopListingWithAssociationsItemDimensionsUnitFt     ShopListingWithAssociationsItemDimensionsUnit = "ft"
	ShopListingWithAssociationsItemDimensionsUnitIn     ShopListingWithAssociationsItemDimensionsUnit = "in"
	ShopListingWithAssociationsItemDimensionsUnitInches ShopListingWithAssociationsItemDimensionsUnit = "inches"
	ShopListingWithAssociationsItemDimensionsUnitM      ShopListingWithAssociationsItemDimensionsUnit = "m"
	ShopListingWithAssociationsItemDimensionsUnitMm     ShopListingWithAssociationsItemDimensionsUnit = "mm"
	ShopListingWithAssociationsItemDimensionsUnitYd     ShopListingWithAssociationsItemDimensionsUnit = "yd"
)

// Defines values for ShopListingWithAssociationsItemWeightUnit.
const (
	ShopListingWithAssociationsItemWeightUnitG  ShopListingWithAssociationsItemWeightUnit = "g"
	ShopListingWithAssociationsItemWeightUnitKg ShopListingWithAssociationsItemWeightUnit = "kg"
	ShopListingWithAssociationsItemWeightUnitLb ShopListingWithAssociationsItemWeightUnit = "lb"
	ShopListingWithAssociationsItemWeightUnitOz ShopListingWithAssociationsItemWeightUnit = "oz"
)

// Defines values for ShopListingWithAssociationsListingType.
const (
	ShopListingWithAssociationsListingTypeBoth     ShopListingWithAssociationsListingType = "both"
	ShopListingWithAssociationsListingTypeDownload ShopListingWithAssociationsListingType = "download"
	ShopListingWithAssociationsListingTypePhysical ShopListingWithAssociationsListingType = "physical"
)

// Defines values for ShopListingWithAssociationsState.
const (
	ShopListingWithAssociationsStateActive   ShopListingWithAssociationsState = "active"
	ShopListingWithAssociationsStateDraft    ShopListingWithAssociationsState = "draft"
	ShopListingWithAssociationsStateExpired  ShopListingWithAssociationsState = "expired"
	ShopListingWithAssociationsStateInactive ShopListingWithAssociationsState = "inactive"
	ShopListingWithAssociationsStateSoldOut  ShopListingWithAssociationsState = "sold_out"
)

// Defines values for ShopListingWithAssociationsWhenMade.
const (
	ShopListingWithAssociationsWhenMadeBefore1700  ShopListingWithAssociationsWhenMade = "before_1700"
	ShopListingWithAssociationsWhenMadeBefore2005  ShopListingWithAssociationsWhenMade = "before_2005"
	ShopListingWithAssociationsWhenMadeMadeToOrder ShopListingWithAssociationsWhenMade = "made_to_order"
	ShopListingWithAssociationsWhenMadeN1700s      ShopListingWithAssociationsWhenMade = "1700s"
	ShopListingWithAssociationsWhenMadeN1800s      ShopListingWithAssociationsWhenMade = "1800s"
	ShopListingWithAssociationsWhenMadeN1900s      ShopListingWithAssociationsWhenMade = "1900s"
	ShopListingWithAssociationsWhenMadeN1910s      ShopListingWithAssociationsWhenMade = "1910s"
	ShopListingWithAssociationsWhenMadeN1920s      ShopListingWithAssociationsWhenMade = "1920s"
	ShopListingWithAssociationsWhenMadeN1930s      ShopListingWithAssociationsWhenMade = "1930s"
	ShopListingWithAssociationsWhenMadeN1940s      ShopListingWithAssociationsWhenMade = "1940s"
	ShopListingWithAssociationsWhenMadeN1950s      ShopListingWithAssociationsWhenMade = "1950s"
	ShopListingWithAssociationsWhenMadeN1960s      ShopListingWithAssociationsWhenMade = "1960s"
	ShopListingWithAssociationsWhenMadeN1970s      ShopListingWithAssociationsWhenMade = "1970s"
	ShopListingWithAssociationsWhenMadeN1980s      ShopListingWithAssociationsWhenMade = "1980s"
	ShopListingWithAssociationsWhenMadeN1990s      ShopListingWithAssociationsWhenMade = "1990s"
	ShopListingWithAssociationsWhenMadeN20002004   ShopListingWithAssociationsWhenMade = "2000_2004"
	ShopListingWithAssociationsWhenMadeN20052009   ShopListingWithAssociationsWhenMade = "2005_2009"
	ShopListingWithAssociationsWhenMadeN20102019   ShopListingWithAssociationsWhenMade = "2010_2019"
	ShopListingWithAssociationsWhenMadeN20202024   ShopListingWithAssociationsWhenMade = "2020_2024"
)

// Defines values for ShopListingWithAssociationsWhoMade.
const (
	ShopListingWithAssociationsWhoMadeCollective  ShopListingWithAssociationsWhoMade = "collective"
	ShopListingWithAssociationsWhoMadeIDid        ShopListingWithAssociationsWhoMade = "i_did"
	ShopListingWithAssociationsWhoMadeSomeoneElse ShopListingWithAssociationsWhoMade = "someone_else"
)

// Defines values for ShopReceiptStatus.
const (
	Canceled          ShopReceiptStatus = "canceled"
	Completed         ShopReceiptStatus = "completed"
	FullyRefunded     ShopReceiptStatus = "fully refunded"
	Open              ShopReceiptStatus = "open"
	Paid              ShopReceiptStatus = "paid"
	PartiallyRefunded ShopReceiptStatus = "partially refunded"
	PaymentProcessing ShopReceiptStatus = "payment processing"
)

// Defines values for ShopShippingProfileProfileType.
const (
	Calculated ShopShippingProfileProfileType = "calculated"
	Manual     ShopShippingProfileProfileType = "manual"
)

// Defines values for ShopShippingProfileDestinationDestinationRegion.
const (
	ShopShippingProfileDestinationDestinationRegionEu    ShopShippingProfileDestinationDestinationRegion = "eu"
	ShopShippingProfileDestinationDestinationRegionNonEu ShopShippingProfileDestinationDestinationRegion = "non_eu"
	ShopShippingProfileDestinationDestinationRegionNone  ShopShippingProfileDestinationDestinationRegion = "none"
)

// Defines values for ShopShippingProfileUpgradeType.
const (
	ShopShippingProfileUpgradeTypeN0 ShopShippingProfileUpgradeType = "0"
	ShopShippingProfileUpgradeTypeN1 ShopShippingProfileUpgradeType = "1"
)

// Defines values for FindAllListingsActiveParamsSortOn.
const (
	FindAllListingsActiveParamsSortOnCreated FindAllListingsActiveParamsSortOn = "created"
	FindAllListingsActiveParamsSortOnPrice   FindAllListingsActiveParamsSortOn = "price"
	FindAllListingsActiveParamsSortOnScore   FindAllListingsActiveParamsSortOn = "score"
	FindAllListingsActiveParamsSortOnUpdated FindAllListingsActiveParamsSortOn = "updated"
)

// Defines values for FindAllListingsActiveParamsSortOrder.
const (
	FindAllListingsActiveParamsSortOrderAsc        FindAllListingsActiveParamsSortOrder = "asc"
	FindAllListingsActiveParamsSortOrderAscending  FindAllListingsActiveParamsSortOrder = "ascending"
	FindAllListingsActiveParamsSortOrderDesc       FindAllListingsActiveParamsSortOrder = "desc"
	FindAllListingsActiveParamsSortOrderDescending FindAllListingsActiveParamsSortOrder = "descending"
	FindAllListingsActiveParamsSortOrderDown       FindAllListingsActiveParamsSortOrder = "down"
	FindAllListingsActiveParamsSortOrderUp         FindAllListingsActiveParamsSortOrder = "up"
)

// Defines values for GetListingsByListingIdsParamsIncludes.
const (
	GetListingsByListingIdsParamsIncludesImages       GetListingsByListingIdsParamsIncludes = "Images"
	GetListingsByListingIdsParamsIncludesInventory    GetListingsByListingIdsParamsIncludes = "Inventory"
	GetListingsByListingIdsParamsIncludesShipping     GetListingsByListingIdsParamsIncludes = "Shipping"
	GetListingsByListingIdsParamsIncludesShop         GetListingsByListingIdsParamsIncludes = "Shop"
	GetListingsByListingIdsParamsIncludesTranslations GetListingsByListingIdsParamsIncludes = "Translations"
	GetListingsByListingIdsParamsIncludesUser         GetListingsByListingIdsParamsIncludes = "User"
	GetListingsByListingIdsParamsIncludesVideos       GetListingsByListingIdsParamsIncludes = "Videos"
)

// Defines values for GetListingParamsIncludes.
const (
	GetListingParamsIncludesImages       GetListingParamsIncludes = "Images"
	GetListingParamsIncludesInventory    GetListingParamsIncludes = "Inventory"
	GetListingParamsIncludesShipping     GetListingParamsIncludes = "Shipping"
	GetListingParamsIncludesShop         GetListingParamsIncludes = "Shop"
	GetListingParamsIncludesTranslations GetListingParamsIncludes = "Translations"
	GetListingParamsIncludesUser         GetListingParamsIncludes = "User"
	GetListingParamsIncludesVideos       GetListingParamsIncludes = "Videos"
)

// Defines values for GetListingInventoryParamsIncludes.
const (
	Listing GetListingInventoryParamsIncludes = "Listing"
)

// Defines values for GetListingsByShopParamsState.
const (
	GetListingsByShopParamsStateActive   GetListingsByShopParamsState = "active"
	GetListingsByShopParamsStateDraft    GetListingsByShopParamsState = "draft"
	GetListingsByShopParamsStateExpired  GetListingsByShopParamsState = "expired"
	GetListingsByShopParamsStateInactive GetListingsByShopParamsState = "inactive"
	GetListingsByShopParamsStateSoldOut  GetListingsByShopParamsState = "sold_out"
)

// Defines values for GetListingsByShopParamsSortOn.
const (
	GetListingsByShopParamsSortOnCreated GetListingsByShopParamsSortOn = "created"
	GetListingsByShopParamsSortOnPrice   GetListingsByShopParamsSortOn = "price"
	GetListingsByShopParamsSortOnScore   GetListingsByShopParamsSortOn = "score"
	GetListingsByShopParamsSortOnUpdated GetListingsByShopParamsSortOn = "updated"
)

// Defines values for GetListingsByShopParamsSortOrder.
const (
	GetListingsByShopParamsSortOrderAsc        GetListingsByShopParamsSortOrder = "asc"
	GetListingsByShopParamsSortOrderAscending  GetListingsByShopParamsSortOrder = "ascending"
	GetListingsByShopParamsSortOrderDesc       GetListingsByShopParamsSortOrder = "desc"
	GetListingsByShopParamsSortOrderDescending GetListingsByShopParamsSortOrder = "descending"
	GetListingsByShopParamsSortOrderDown       GetListingsByShopParamsSortOrder = "down"
	GetListingsByShopParamsSortOrderUp         GetListingsByShopParamsSortOrder = "up"
)

// Defines values for GetListingsByShopParamsIncludes.
const (
	GetListingsByShopParamsIncludesImages       GetListingsByShopParamsIncludes = "Images"
	GetListingsByShopParamsIncludesInventory    GetListingsByShopParamsIncludes = "Inventory"
	GetListingsByShopParamsIncludesShipping     GetListingsByShopParamsIncludes = "Shipping"
	GetListingsByShopParamsIncludesShop         GetListingsByShopParamsIncludes = "Shop"
	GetListingsByShopParamsIncludesTranslations GetListingsByShopParamsIncludes = "Translations"
	GetListingsByShopParamsIncludesUser         GetListingsByShopParamsIncludes = "User"
	GetListingsByShopParamsIncludesVideos       GetListingsByShopParamsIncludes = "Videos"
)

// Defines values for CreateDraftListingFormdataBodyItemDimensionsUnit.
const (
	CreateDraftListingFormdataBodyItemDimensionsUnitCm     CreateDraftListingFormdataBodyItemDimensionsUnit = "cm"
	CreateDraftListingFormdataBodyItemDimensionsUnitFt     CreateDraftListingFormdataBodyItemDimensionsUnit = "ft"
	CreateDraftListingFormdataBodyItemDimensionsUnitIn     CreateDraftListingFormdataBodyItemDimensionsUnit = "in"
	CreateDraftListingFormdataBodyItemDimensionsUnitInches CreateDraftListingFormdataBodyItemDimensionsUnit = "inches"
	CreateDraftListingFormdataBodyItemDimensionsUnitM      CreateDraftListingFormdataBodyItemDimensionsUnit = "m"
	CreateDraftListingFormdataBodyItemDimensionsUnitMm     CreateDraftListingFormdataBodyItemDimensionsUnit = "mm"
	CreateDraftListingFormdataBodyItemDimensionsUnitYd     CreateDraftListingFormdataBodyItemDimensionsUnit = "yd"
)

// Defines values for CreateDraftListingFormdataBodyItemWeightUnit.
const (
	CreateDraftListingFormdataBodyItemWeightUnitG  CreateDraftListingFormdataBodyItemWeightUnit = "g"
	CreateDraftListingFormdataBodyItemWeightUnitKg CreateDraftListingFormdataBodyItemWeightUnit = "kg"
	CreateDraftListingFormdataBodyItemWeightUnitLb CreateDraftListingFormdataBodyItemWeightUnit = "lb"
	CreateDraftListingFormdataBodyItemWeightUnitOz CreateDraftListingFormdataBodyItemWeightUnit = "oz"
)

// Defines values for CreateDraftListingFormdataBodyType.
const (
	CreateDraftListingFormdataBodyTypeBoth     CreateDraftListingFormdataBodyType = "both"
	CreateDraftListingFormdataBodyTypeDownload CreateDraftListingFormdataBodyType = "download"
	CreateDraftListingFormdataBodyTypePhysical CreateDraftListingFormdataBodyType = "physical"
)

// Defines values for CreateDraftListingFormdataBodyWhenMade.
const (
	CreateDraftListingFormdataBodyWhenMadeBefore1700  CreateDraftListingFormdataBodyWhenMade = "before_1700"
	CreateDraftListingFormdataBodyWhenMadeBefore2005  CreateDraftListingFormdataBodyWhenMade = "before_2005"
	CreateDraftListingFormdataBodyWhenMadeMadeToOrder CreateDraftListingFormdataBodyWhenMade = "made_to_order"
	CreateDraftListingFormdataBodyWhenMadeN1700s      CreateDraftListingFormdataBodyWhenMade = "1700s"
	CreateDraftListingFormdataBodyWhenMadeN1800s      CreateDraftListingFormdataBodyWhenMade = "1800s"
	CreateDraftListingFormdataBodyWhenMadeN1900s      CreateDraftListingFormdataBodyWhenMade = "1900s"
	CreateDraftListingFormdataBodyWhenMadeN1910s      CreateDraftListingFormdataBodyWhenMade = "1910s"
	CreateDraftListingFormdataBodyWhenMadeN1920s      CreateDraftListingFormdataBodyWhenMade = "1920s"
	CreateDraftListingFormdataBodyWhenMadeN1930s      CreateDraftListingFormdataBodyWhenMade = "1930s"
	CreateDraftListingFormdataBodyWhenMadeN1940s      CreateDraftListingFormdataBodyWhenMade = "1940s"
	CreateDraftListingFormdataBodyWhenMadeN1950s      CreateDraftListingFormdataBodyWhenMade = "1950s"
	CreateDraftListingFormdataBodyWhenMadeN1960s      CreateDraftListingFormdataBodyWhenMade = "1960s"
	CreateDraftListingFormdataBodyWhenMadeN1970s      CreateDraftListingFormdataBodyWhenMade = "1970s"
	CreateDraftListingFormdataBodyWhenMadeN1980s      CreateDraftListingFormdataBodyWhenMade = "1980s"
	CreateDraftListingFormdataBodyWhenMadeN1990s      CreateDraftListingFormdataBodyWhenMade = "1990s"
	CreateDraftListingFormdataBodyWhenMadeN20002004   CreateDraftListingFormdataBodyWhenMade = "2000_2004"
	CreateDraftListingFormdataBodyWhenMadeN20052009   CreateDraftListingFormdataBodyWhenMade = "2005_2009"
	CreateDraftListingFormdataBodyWhenMadeN20102019   CreateDraftListingFormdataBodyWhenMade = "2010_2019"
	CreateDraftListingFormdataBodyWhenMadeN20202024   CreateDraftListingFormdataBodyWhenMade = "2020_2024"
)

// Defines values for CreateDraftListingFormdataBodyWhoMade.
const (
	CreateDraftListingFormdataBodyWhoMadeCollective  CreateDraftListingFormdataBodyWhoMade = "collective"
	CreateDraftListingFormdataBodyWhoMadeIDid        CreateDraftListingFormdataBodyWhoMade = "i_did"
	CreateDraftListingFormdataBodyWhoMadeSomeoneElse CreateDraftListingFormdataBodyWhoMade = "someone_else"
)

// Defines values for FindAllActiveListingsByShopParamsSortOn.
const (
	FindAllActiveListingsByShopParamsSortOnCreated FindAllActiveListingsByShopParamsSortOn = "created"
	FindAllActiveListingsByShopParamsSortOnPrice   FindAllActiveListingsByShopParamsSortOn = "price"
	FindAllActiveListingsByShopParamsSortOnScore   FindAllActiveListingsByShopParamsSortOn = "score"
	FindAllActiveListingsByShopParamsSortOnUpdated FindAllActiveListingsByShopParamsSortOn = "updated"
)

// Defines values for FindAllActiveListingsByShopParamsSortOrder.
const (
	FindAllActiveListingsByShopParamsSortOrderAsc        FindAllActiveListingsByShopParamsSortOrder = "asc"
	FindAllActiveListingsByShopParamsSortOrderAscending  FindAllActiveListingsByShopParamsSortOrder = "ascending"
	FindAllActiveListingsByShopParamsSortOrderDesc       FindAllActiveListingsByShopParamsSortOrder = "desc"
	FindAllActiveListingsByShopParamsSortOrderDescending FindAllActiveListingsByShopParamsSortOrder = "descending"
	FindAllActiveListingsByShopParamsSortOrderDown       FindAllActiveListingsByShopParamsSortOrder = "down"
	FindAllActiveListingsByShopParamsSortOrderUp         FindAllActiveListingsByShopParamsSortOrder = "up"
)

// Defines values for UpdateListingFormdataBodyItemDimensionsUnit.
const (
	UpdateListingFormdataBodyItemDimensionsUnitCm     UpdateListingFormdataBodyItemDimensionsUnit = "cm"
	UpdateListingFormdataBodyItemDimensionsUnitEmpty  UpdateListingFormdataBodyItemDimensionsUnit = ""
	UpdateListingFormdataBodyItemDimensionsUnitFt     UpdateListingFormdataBodyItemDimensionsUnit = "ft"
	UpdateListingFormdataBodyItemDimensionsUnitIn     UpdateListingFormdataBodyItemDimensionsUnit = "in"
	UpdateListingFormdataBodyItemDimensionsUnitInches UpdateListingFormdataBodyItemDimensionsUnit = "inches"
	UpdateListingFormdataBodyItemDimensionsUnitM      UpdateListingFormdataBodyItemDimensionsUnit = "m"
	UpdateListingFormdataBodyItemDimensionsUnitMm     UpdateListingFormdataBodyItemDimensionsUnit = "mm"
	UpdateListingFormdataBodyItemDimensionsUnitYd     UpdateListingFormdataBodyItemDimensionsUnit = "yd"
)

// Defines values for UpdateListingFormdataBodyItemWeightUnit.
const (
	UpdateListingFormdataBodyItemWeightUnitEmpty UpdateListingFormdataBodyItemWeightUnit = ""
	UpdateListingFormdataBodyItemWeightUnitG     UpdateListingFormdataBodyItemWeightUnit = "g"
	UpdateListingFormdataBodyItemWeightUnitKg    UpdateListingFormdataBodyItemWeightUnit = "kg"
	UpdateListingFormdataBodyItemWeightUnitLb    UpdateListingFormdataBodyItemWeightUnit = "lb"
	UpdateListingFormdataBodyItemWeightUnitOz    UpdateListingFormdataBodyItemWeightUnit = "oz"
)

// Defines values for UpdateListingFormdataBodyState.
const (
	UpdateListingFormdataBodyStateActive   UpdateListingFormdataBodyState = "active"
	UpdateListingFormdataBodyStateInactive UpdateListingFormdataBodyState = "inactive"
)

// Defines values for UpdateListingFormdataBodyType.
const (
	UpdateListingFormdataBodyTypeBoth     UpdateListingFormdataBodyType = "both"
	UpdateListingFormdataBodyTypeDownload UpdateListingFormdataBodyType = "download"
	UpdateListingFormdataBodyTypePhysical UpdateListingFormdataBodyType = "physical"
)

// Defines values for UpdateListingFormdataBodyWhenMade.
const (
	UpdateListingFormdataBodyWhenMadeBefore1700  UpdateListingFormdataBodyWhenMade = "before_1700"
	UpdateListingFormdataBodyWhenMadeBefore2005  UpdateListingFormdataBodyWhenMade = "before_2005"
	UpdateListingFormdataBodyWhenMadeMadeToOrder UpdateListingFormdataBodyWhenMade = "made_to_order"
	UpdateListingFormdataBodyWhenMadeN1700s      UpdateListingFormdataBodyWhenMade = "1700s"
	UpdateListingFormdataBodyWhenMadeN1800s      UpdateListingFormdataBodyWhenMade = "1800s"
	UpdateListingFormdataBodyWhenMadeN1900s      UpdateListingFormdataBodyWhenMade = "1900s"
	UpdateListingFormdataBodyWhenMadeN1910s      UpdateListingFormdataBodyWhenMade = "1910s"
	UpdateListingFormdataBodyWhenMadeN1920s      UpdateListingFormdataBodyWhenMade = "1920s"
	UpdateListingFormdataBodyWhenMadeN1930s      UpdateListingFormdataBodyWhenMade = "1930s"
	UpdateListingFormdataBodyWhenMadeN1940s      UpdateListingFormdataBodyWhenMade = "1940s"
	UpdateListingFormdataBodyWhenMadeN1950s      UpdateListingFormdataBodyWhenMade = "1950s"
	UpdateListingFormdataBodyWhenMadeN1960s      UpdateListingFormdataBodyWhenMade = "1960s"
	UpdateListingFormdataBodyWhenMadeN1970s      UpdateListingFormdataBodyWhenMade = "1970s"
	UpdateListingFormdataBodyWhenMadeN1980s      UpdateListingFormdataBodyWhenMade = "1980s"
	UpdateListingFormdataBodyWhenMadeN1990s      UpdateListingFormdataBodyWhenMade = "1990s"
	UpdateListingFormdataBodyWhenMadeN20002004   UpdateListingFormdataBodyWhenMade = "2000_2004"
	UpdateListingFormdataBodyWhenMadeN20052009   UpdateListingFormdataBodyWhenMade = "2005_2009"
	UpdateListingFormdataBodyWhenMadeN20102019   UpdateListingFormdataBodyWhenMade = "2010_2019"
	UpdateListingFormdataBodyWhenMadeN20202024   UpdateListingFormdataBodyWhenMade = "2020_2024"
)

// Defines values for UpdateListingFormdataBodyWhoMade.
const (
	UpdateListingFormdataBodyWhoMadeCollective  UpdateListingFormdataBodyWhoMade = "collective"
	UpdateListingFormdataBodyWhoMadeIDid        UpdateListingFormdataBodyWhoMade = "i_did"
	UpdateListingFormdataBodyWhoMadeSomeoneElse UpdateListingFormdataBodyWhoMade = "someone_else"
)

// Defines values for UpdateListingDeprecatedFormdataBodyItemDimensionsUnit.
const (
	Cm     UpdateListingDeprecatedFormdataBodyItemDimensionsUnit = "cm"
	Ft     UpdateListingDeprecatedFormdataBodyItemDimensionsUnit = "ft"
	In     UpdateListingDeprecatedFormdataBodyItemDimensionsUnit = "in"
	Inches UpdateListingDeprecatedFormdataBodyItemDimensionsUnit = "inches"
	M      UpdateListingDeprecatedFormdataBodyItemDimensionsUnit = "m"
	Mm     UpdateListingDeprecatedFormdataBodyItemDimensionsUnit = "mm"
	Yd     UpdateListingDeprecatedFormdataBodyItemDimensionsUnit = "yd"
)

// Defines values for UpdateListingDeprecatedFormdataBodyItemWeightUnit.
const (
	G  UpdateListingDeprecatedFormdataBodyItemWeightUnit = "g"
	Kg UpdateListingDeprecatedFormdataBodyItemWeightUnit = "kg"
	Lb UpdateListingDeprecatedFormdataBodyItemWeightUnit = "lb"
	Oz UpdateListingDeprecatedFormdataBodyItemWeightUnit = "oz"
)

// Defines values for UpdateListingDeprecatedFormdataBodyState.
const (
	UpdateListingDeprecatedFormdataBodyStateActive   UpdateListingDeprecatedFormdataBodyState = "active"
	UpdateListingDeprecatedFormdataBodyStateInactive UpdateListingDeprecatedFormdataBodyState = "inactive"
)

// Defines values for UpdateListingDeprecatedFormdataBodyType.
const (
	Both     UpdateListingDeprecatedFormdataBodyType = "both"
	Download UpdateListingDeprecatedFormdataBodyType = "download"
	Physical UpdateListingDeprecatedFormdataBodyType = "physical"
)

// Defines values for UpdateListingDeprecatedFormdataBodyWhenMade.
const (
	Before1700  UpdateListingDeprecatedFormdataBodyWhenMade = "before_1700"
	Before2005  UpdateListingDeprecatedFormdataBodyWhenMade = "before_2005"
	MadeToOrder UpdateListingDeprecatedFormdataBodyWhenMade = "made_to_order"
	N1700s      UpdateListingDeprecatedFormdataBodyWhenMade = "1700s"
	N1800s      UpdateListingDeprecatedFormdataBodyWhenMade = "1800s"
	N1900s      UpdateListingDeprecatedFormdataBodyWhenMade = "1900s"
	N1910s      UpdateListingDeprecatedFormdataBodyWhenMade = "1910s"
	N1920s      UpdateListingDeprecatedFormdataBodyWhenMade = "1920s"
	N1930s      UpdateListingDeprecatedFormdataBodyWhenMade = "1930s"
	N1940s      UpdateListingDeprecatedFormdataBodyWhenMade = "1940s"
	N1950s      UpdateListingDeprecatedFormdataBodyWhenMade = "1950s"
	N1960s      UpdateListingDeprecatedFormdataBodyWhenMade = "1960s"
	N1970s      UpdateListingDeprecatedFormdataBodyWhenMade = "1970s"
	N1980s      UpdateListingDeprecatedFormdataBodyWhenMade = "1980s"
	N1990s      UpdateListingDeprecatedFormdataBodyWhenMade = "1990s"
	N20002004   UpdateListingDeprecatedFormdataBodyWhenMade = "2000_2004"
	N20052009   UpdateListingDeprecatedFormdataBodyWhenMade = "2005_2009"
	N20102019   UpdateListingDeprecatedFormdataBodyWhenMade = "2010_2019"
	N20202024   UpdateListingDeprecatedFormdataBodyWhenMade = "2020_2024"
)

// Defines values for UpdateListingDeprecatedFormdataBodyWhoMade.
const (
	Collective  UpdateListingDeprecatedFormdataBodyWhoMade = "collective"
	IDid        UpdateListingDeprecatedFormdataBodyWhoMade = "i_did"
	SomeoneElse UpdateListingDeprecatedFormdataBodyWhoMade = "someone_else"
)

// Defines values for GetShopReceiptsParamsSortOn.
const (
	GetShopReceiptsParamsSortOnCreated   GetShopReceiptsParamsSortOn = "created"
	GetShopReceiptsParamsSortOnReceiptId GetShopReceiptsParamsSortOn = "receipt_id"
	GetShopReceiptsParamsSortOnUpdated   GetShopReceiptsParamsSortOn = "updated"
)

// Defines values for GetShopReceiptsParamsSortOrder.
const (
	GetShopReceiptsParamsSortOrderAsc        GetShopReceiptsParamsSortOrder = "asc"
	GetShopReceiptsParamsSortOrderAscending  GetShopReceiptsParamsSortOrder = "ascending"
	GetShopReceiptsParamsSortOrderDesc       GetShopReceiptsParamsSortOrder = "desc"
	GetShopReceiptsParamsSortOrderDescending GetShopReceiptsParamsSortOrder = "descending"
	GetShopReceiptsParamsSortOrderDown       GetShopReceiptsParamsSortOrder = "down"
	GetShopReceiptsParamsSortOrderUp         GetShopReceiptsParamsSortOrder = "up"
)

// Defines values for CreateShopShippingProfileFormdataBodyDestinationRegion.
const (
	CreateShopShippingProfileFormdataBodyDestinationRegionEu    CreateShopShippingProfileFormdataBodyDestinationRegion = "eu"
	CreateShopShippingProfileFormdataBodyDestinationRegionNonEu CreateShopShippingProfileFormdataBodyDestinationRegion = "non_eu"
	CreateShopShippingProfileFormdataBodyDestinationRegionNone  CreateShopShippingProfileFormdataBodyDestinationRegion = "none"
)

// Defines values for CreateShopShippingProfileFormdataBodyProcessingTimeUnit.
const (
	CreateShopShippingProfileFormdataBodyProcessingTimeUnitBusinessDays CreateShopShippingProfileFormdataBodyProcessingTimeUnit = "business_days"
	CreateShopShippingProfileFormdataBodyProcessingTimeUnitWeeks        CreateShopShippingProfileFormdataBodyProcessingTimeUnit = "weeks"
)

// Defines values for UpdateShopShippingProfileFormdataBodyProcessingTimeUnit.
const (
	UpdateShopShippingProfileFormdataBodyProcessingTimeUnitBusinessDays UpdateShopShippingProfileFormdataBodyProcessingTimeUnit = "business_days"
	UpdateShopShippingProfileFormdataBodyProcessingTimeUnitWeeks        UpdateShopShippingProfileFormdataBodyProcessingTimeUnit = "weeks"
)

// Defines values for CreateShopShippingProfileDestinationFormdataBodyDestinationRegion.
const (
	CreateShopShippingProfileDestinationFormdataBodyDestinationRegionEu    CreateShopShippingProfileDestinationFormdataBodyDestinationRegion = "eu"
	CreateShopShippingProfileDestinationFormdataBodyDestinationRegionNonEu CreateShopShippingProfileDestinationFormdataBodyDestinationRegion = "non_eu"
	CreateShopShippingProfileDestinationFormdataBodyDestinationRegionNone  CreateShopShippingProfileDestinationFormdataBodyDestinationRegion = "none"
)

// Defines values for UpdateShopShippingProfileDestinationFormdataBodyDestinationRegion.
const (
	UpdateShopShippingProfileDestinationFormdataBodyDestinationRegionEu    UpdateShopShippingProfileDestinationFormdataBodyDestinationRegion = "eu"
	UpdateShopShippingProfileDestinationFormdataBodyDestinationRegionNonEu UpdateShopShippingProfileDestinationFormdataBodyDestinationRegion = "non_eu"
	UpdateShopShippingProfileDestinationFormdataBodyDestinationRegionNone  UpdateShopShippingProfileDestinationFormdataBodyDestinationRegion = "none"
)

// Defines values for CreateShopShippingProfileUpgradeFormdataBodyType.
const (
	CreateShopShippingProfileUpgradeFormdataBodyTypeN0 CreateShopShippingProfileUpgradeFormdataBodyType = "0"
	CreateShopShippingProfileUpgradeFormdataBodyTypeN1 CreateShopShippingProfileUpgradeFormdataBodyType = "1"
)

// Defines values for UpdateShopShippingProfileUpgradeFormdataBodyType.
const (
	N0 UpdateShopShippingProfileUpgradeFormdataBodyType = "0"
	N1 UpdateShopShippingProfileUpgradeFormdataBodyType = "1"
)

// Defines values for GetListingsByShopSectionIdParamsSortOn.
const (
	Created GetListingsByShopSectionIdParamsSortOn = "created"
	Price   GetListingsByShopSectionIdParamsSortOn = "price"
	Score   GetListingsByShopSectionIdParamsSortOn = "score"
	Updated GetListingsByShopSectionIdParamsSortOn = "updated"
)

// Defines values for GetListingsByShopSectionIdParamsSortOrder.
const (
	Asc        GetListingsByShopSectionIdParamsSortOrder = "asc"
	Ascending  GetListingsByShopSectionIdParamsSortOrder = "ascending"
	Desc       GetListingsByShopSectionIdParamsSortOrder = "desc"
	Descending GetListingsByShopSectionIdParamsSortOrder = "descending"
	Down       GetListingsByShopSectionIdParamsSortOrder = "down"
	Up         GetListingsByShopSectionIdParamsSortOrder = "up"
)

// BuyerTaxonomyNode A taxonomy node in the buyer taxonomy tree.
type BuyerTaxonomyNode struct {
	// Children An array of taxonomy nodes for all the direct children of this taxonomy node in the seller taxonomy tree.
	Children *[]BuyerTaxonomyNode `json:"children,omitempty"`

	// FullPathTaxonomyIds An array of `taxonomy_id`s including this node and all of its direct parents in the seller taxonomy tree up to a root node. They are listed in order from root to leaf.
	FullPathTaxonomyIds *[]int `json:"full_path_taxonomy_ids,omitempty"`

	// Id The unique numeric ID of an Etsy taxonomy node, which is a metadata category for listings organized into the seller taxonomy hierarchy tree. For example, the \"shoes\" taxonomy node (ID: 1429, level: 1) is higher in the hierarchy than \"girls' shoes\" (ID: 1440, level: 2). The taxonomy nodes assigned to a listing support access to specific standardized product scales and properties. For example, listings assigned the taxonomy nodes \"shoes\" or \"girls' shoes\" support access to the \"EU\" shoe size scale with its associated property names and IDs for EU shoe sizes, such as property `value_id`:\"1394\", and `name`:\"38\".
	Id *int `json:"id,omitempty"`

	// Level The integer depth of this taxonomy node in the seller taxonomy tree, with roots at level 0.
	Level *int `json:"level,omitempty"`

	// Name The name string for this taxonomy node.
	Name *string `json:"name,omitempty"`

	// ParentId The numeric taxonomy ID of the parent of this node.
	ParentId *int `json:"parent_id"`
}

// BuyerTaxonomyNodeProperties A list of product property definitions.
type BuyerTaxonomyNodeProperties struct {
	// Count The number of results.
	Count *int `json:"count,omitempty"`

	// Results The list of requested resources.
	Results *[]BuyerTaxonomyNodeProperty `json:"results,omitempty"`
}

// BuyerTaxonomyNodeProperty A product property definition.
type BuyerTaxonomyNodeProperty struct {
	// DisplayName The human-readable product property name string.
	DisplayName *string `json:"display_name,omitempty"`

	// IsMultivalued When true, you can assign multiple property values to this property
	IsMultivalued *bool `json:"is_multivalued,omitempty"`

	// IsRequired When true, listings assigned eligible taxonomy IDs require this property.
	IsRequired *bool `json:"is_required,omitempty"`

	// MaxValuesAllowed When true, you can assign multiple property values to this property
	MaxValuesAllowed *int `json:"max_values_allowed"`

	// Name The name string for this taxonomy node.
	Name *string `json:"name,omitempty"`

	// PossibleValues A list of supported property value strings for this property.
	PossibleValues *[]BuyerTaxonomyPropertyValue `json:"possible_values,omitempty"`

	// PropertyId The unique numeric ID of this product property.
	PropertyId *int `json:"property_id,omitempty"`

	// Scales A list of available scales.
	Scales *[]BuyerTaxonomyPropertyScale `json:"scales,omitempty"`

	// SelectedValues A list of property value strings automatically and always selected for the given property.
	SelectedValues *[]BuyerTaxonomyPropertyValue `json:"selected_values,omitempty"`

	// SupportsAttributes When true, you can use this property in listing attributes.
	SupportsAttributes *bool `json:"supports_attributes,omitempty"`

	// SupportsVariations When true, you can use this property in listing variations.
	SupportsVariations *bool `json:"supports_variations,omitempty"`
}

// BuyerTaxonomyNodes A list of taxonomy nodes from the buyer taxonomy tree.
type BuyerTaxonomyNodes struct {
	// Count The number of results.
	Count *int `json:"count,omitempty"`

	// Results The list of requested resources.
	Results *[]BuyerTaxonomyNode `json:"results,omitempty"`
}

// BuyerTaxonomyPropertyScale A scale defnining the assignable increments for the property values available to specific product properties.
type BuyerTaxonomyPropertyScale struct {
	// Description The description string for a scale.
	Description *string `json:"description,omitempty"`

	// DisplayName The name string for a scale.
	DisplayName *string `json:"display_name,omitempty"`

	// ScaleId The unique numeric ID of a scale.
	ScaleId *int `json:"scale_id,omitempty"`
}

// BuyerTaxonomyPropertyValue A property value for a specific product property, which may also employ a specific scale.
type BuyerTaxonomyPropertyValue struct {
	// EqualTo A list of numeric property value IDs this property value is equal to (if any).
	EqualTo *[]int `json:"equal_to,omitempty"`

	// Name The name string of this property value.
	Name *string `json:"name,omitempty"`

	// ScaleId The numeric scale ID of the scale to which this property value belongs.
	ScaleId *int `json:"scale_id"`

	// ValueId The numeric ID of this property value.
	ValueId *int `json:"value_id"`
}

// ErrorSchema defines model for ErrorSchema.
type ErrorSchema struct {
	Error string `json:"error"`
}

// ListingImage Reference urls and metadata for an image associated with a specific listing. The `url_fullxfull` parameter contains the URL for full-sized binary image file.
type ListingImage struct {
	// AltText Alt text for the listing image. Max length 250 characters.
	AltText *string `json:"alt_text"`

	// Blue The numeric red value equal to the image's average red value, from 0-255 (RGB color).
	Blue *int `json:"blue"`

	// Brightness The numeric brightness equal to the image's average brightness, from 0-100 (HSV color).
	Brightness *int `json:"brightness"`

	// CreatedTimestamp The listing image\'s creation time, in epoch seconds.
	CreatedTimestamp *int `json:"created_timestamp,omitempty"`

	// CreationTsz The listing image\'s creation time, in epoch seconds.
	CreationTsz *int `json:"creation_tsz,omitempty"`

	// FullHeight The numeric height, measured in pixels, of the full-sized image referenced in url_fullxfull.
	FullHeight *int `json:"full_height"`

	// FullWidth The numeric width, measured in pixels, of the full-sized image referenced in url_fullxfull.
	FullWidth *int `json:"full_width"`

	// Green The numeric red value equal to the image's average red value, from 0-255 (RGB color).
	Green *int `json:"green"`

	// HexCode The webhex string for the image's average color, in webhex notation.
	HexCode *string `json:"hex_code"`

	// Hue The numeric hue equal to the image's average hue, from 0-360 (HSV color).
	Hue *int `json:"hue"`

	// IsBlackAndWhite When true, the image is in black & white.
	IsBlackAndWhite *bool `json:"is_black_and_white"`

	// ListingId The numeric ID for the [listing](/documentation/reference#tag/ShopListing) associated to this transaction.
	ListingId *int `json:"listing_id,omitempty"`

	// ListingImageId The numeric ID of the primary [listing image](/documentation/reference#tag/ShopListing-Image) for this transaction.
	ListingImageId *int `json:"listing_image_id,omitempty"`

	// Rank The positive non-zero numeric position in the images displayed in a listing, with rank 1 images appearing in the left-most position in a listing.
	Rank *int `json:"rank,omitempty"`

	// Red The numeric red value equal to the image's average red value, from 0-255 (RGB color).
	Red *int `json:"red"`

	// Saturation The numeric saturation equal to the image's average saturation, from 0-100 (HSV color).
	Saturation *int `json:"saturation"`

	// Url170x135 The url string for a 170x135 pixel thumbnail of the image.
	Url170x135 *string `json:"url_170x135,omitempty"`

	// Url570xN The url string for a thumbnail of the image, no more than 570 pixels wide with variable height.
	Url570xN *string `json:"url_570xN,omitempty"`

	// Url75x75 The url string for a 75x75 pixel thumbnail of the image.
	Url75x75 *string `json:"url_75x75,omitempty"`

	// UrlFullxfull The url string for the full-size image, up to 3000 pixels in each dimension.
	UrlFullxfull *string `json:"url_fullxfull,omitempty"`
}

// ListingImages Represents a list of listing image resources, each of which contains the reference URLs and metadata for an image.
type ListingImages struct {
	// Count The number of results.
	Count *int `json:"count,omitempty"`

	// Results The list of requested resources.
	Results *[]ListingImage `json:"results,omitempty"`
}

// ListingInventory A representation of a single listing's inventory record.
type ListingInventory struct {
	// PriceOnProperty An array of unique [listing property](/documentation/reference#operation/getListingProperties) ID integers for the properties that change product prices, if any. For example, if you charge specific prices for different sized products in the same listing, then this array contains the property ID for size.
	PriceOnProperty *[]int `json:"price_on_property,omitempty"`

	// Products A JSON array of products available in a listing, even if only one product. All field names in the JSON blobs are lowercase.
	Products *[]ListingInventoryProduct `json:"products,omitempty"`

	// QuantityOnProperty An array of unique [listing property](/documentation/reference#operation/getListingProperties) ID integers for the properties that change the quantity of the products, if any. For example, if you stock specific quantities of different colored products in the same listing, then this array contains the property ID for color.
	QuantityOnProperty *[]int `json:"quantity_on_property,omitempty"`

	// SkuOnProperty An array of unique [listing property](/documentation/reference#operation/getListingProperties) ID integers for the properties that change the product SKU, if any. For example, if you use specific skus for different colored products in the same listing, then this array contains the property ID for color.
	SkuOnProperty *[]int `json:"sku_on_property,omitempty"`
}

// ListingInventoryProduct A representation of a product for a listing.
type ListingInventoryProduct struct {
	// IsDeleted When true, someone deleted this product.
	IsDeleted *bool `json:"is_deleted,omitempty"`

	// Offerings A list of product offering entries for this product.
	Offerings *[]ListingInventoryProductOffering `json:"offerings,omitempty"`

	// ProductId The numeric ID for a specific [product](/documentation/reference#tag/ShopListing-Product) purchased from a listing.
	ProductId *int `json:"product_id,omitempty"`

	// PropertyValues A list of property value entries for this product. Note: parenthesis characters (`(` and `)`) are not allowed.
	PropertyValues *[]ListingPropertyValue `json:"property_values,omitempty"`

	// Sku The SKU string for the product
	Sku *string `json:"sku,omitempty"`
}

// ListingInventoryProductOffering A representation of an offering for a listing.
type ListingInventoryProductOffering struct {
	// IsDeleted Whether or not the offering has been deleted.
	IsDeleted *bool `json:"is_deleted,omitempty"`

	// IsEnabled Whether or not the offering can be shown to buyers.
	IsEnabled *bool `json:"is_enabled,omitempty"`

	// OfferingId The ID for the ProductOffering
	OfferingId *int `json:"offering_id,omitempty"`

	// Price Price data for this ProductOffering
	Price *Money `json:"price,omitempty"`

	// Quantity The quantity the ProductOffering
	Quantity *int `json:"quantity,omitempty"`
}

// ListingInventoryWithAssociations A representation of a single listing's inventory record with associations
type ListingInventoryWithAssociations struct {
	// Listing An enumerated string that attaches a valid association. Default value is null.
	Listing *ShopListing `json:"listing,omitempty"`

	// PriceOnProperty An array of unique [listing property](/documentation/reference#operation/getListingProperties) ID integers for the properties that change product prices, if any. For example, if you charge specific prices for different sized products in the same listing, then this array contains the property ID for size.
	PriceOnProperty *[]int `json:"price_on_property,omitempty"`

	// Products A JSON array of products available in a listing, even if only one product. All field names in the JSON blobs are lowercase.
	Products *[]ListingInventoryProduct `json:"products,omitempty"`

	// QuantityOnProperty An array of unique [listing property](/documentation/reference#operation/getListingProperties) ID integers for the properties that change the quantity of the products, if any. For example, if you stock specific quantities of different colored products in the same listing, then this array contains the property ID for color.
	QuantityOnProperty *[]int `json:"quantity_on_property,omitempty"`

	// SkuOnProperty An array of unique [listing property](/documentation/reference#operation/getListingProperties) ID integers for the properties that change the product SKU, if any. For example, if you use specific skus for different colored products in the same listing, then this array contains the property ID for color.
	SkuOnProperty *[]int `json:"sku_on_property,omitempty"`
}

// ListingPropertyValue A representation of structured data values.
type ListingPropertyValue struct {
	// PropertyId The numeric ID of the Property.
	PropertyId *int `json:"property_id,omitempty"`

	// PropertyName The name of the Property.
	PropertyName *string `json:"property_name"`

	// ScaleId The numeric ID of the scale (if any).
	ScaleId *int `json:"scale_id"`

	// ScaleName The label used to describe the chosen scale (if any).
	ScaleName *string `json:"scale_name"`

	// ValueIds The numeric IDs of the Property values
	ValueIds *[]int `json:"value_ids,omitempty"`

	// Values The Property values
	Values *[]string `json:"values,omitempty"`
}

// ListingPropertyValues Represents several ListingPropertyValues.
type ListingPropertyValues struct {
	Count   *int                    `json:"count,omitempty"`
	Results *[]ListingPropertyValue `json:"results,omitempty"`
}

// ListingReview A listing review record left by a User.
type ListingReview struct {
	// CreateTimestamp The date and time the TransactionReview was created in epoch seconds.
	CreateTimestamp *int `json:"create_timestamp,omitempty"`

	// CreatedTimestamp The date and time the TransactionReview was created in epoch seconds.
	CreatedTimestamp *int `json:"created_timestamp,omitempty"`

	// ImageUrlFullxfull The url to a photo provided with the feedback, dimensions fullxfull. Note: This field may be absent, depending on the buyer's privacy settings.
	ImageUrlFullxfull *string `json:"image_url_fullxfull"`

	// Language The language of the TransactionReview
	Language *string `json:"language,omitempty"`

	// ListingId The ID of the ShopListing that the TransactionReview belongs to.
	ListingId *int `json:"listing_id,omitempty"`

	// Rating Rating value on scale from 1 to 5
	Rating *int `json:"rating,omitempty"`

	// Review A message left by the author, explaining the feedback, if provided.
	Review *string `json:"review"`

	// ShopId The shop's numeric ID.
	ShopId *int `json:"shop_id,omitempty"`

	// UpdateTimestamp The date and time the TransactionReview was updated in epoch seconds.
	UpdateTimestamp *int `json:"update_timestamp,omitempty"`

	// UpdatedTimestamp The date and time the TransactionReview was updated in epoch seconds.
	UpdatedTimestamp *int `json:"updated_timestamp,omitempty"`
}

// ListingReviews A set of listing review records left by Users.
type ListingReviews struct {
	// Count The number of TransactionReview resources found.
	Count *int `json:"count,omitempty"`

	// Results The TransactionReview resources found.
	Results *[]ListingReview `json:"results,omitempty"`
}

// ListingTranslation Represents the translation data for a Listing.
type ListingTranslation struct {
	// Description The description of the Listing of this Translation.
	Description *string `json:"description"`

	// Language The IETF language tag (e.g. 'fr') for the language of this translation.
	Language *string `json:"language,omitempty"`

	// ListingId The numeric ID for the Listing.
	ListingId *int `json:"listing_id,omitempty"`

	// Tags The tags of the Listing of this Translation.
	Tags *[]string `json:"tags,omitempty"`

	// Title The title of the Listing of this Translation.
	Title *string `json:"title"`
}

// ListingTranslations Container for all current supported translations of a listing. Note that Etsy periodically adds/removes languages, so this list may change in the future.
type ListingTranslations struct {
	De   *ListingTranslation `json:"de,omitempty"`
	EnGB *ListingTranslation `json:"en-GB,omitempty"`
	EnIN *ListingTranslation `json:"en-IN,omitempty"`
	EnUS *ListingTranslation `json:"en-US,omitempty"`
	Es   *ListingTranslation `json:"es,omitempty"`
	Fr   *ListingTranslation `json:"fr,omitempty"`
	It   *ListingTranslation `json:"it,omitempty"`
	Ja   *ListingTranslation `json:"ja,omitempty"`
	Nl   *ListingTranslation `json:"nl,omitempty"`
	Pl   *ListingTranslation `json:"pl,omitempty"`
	Pt   *ListingTranslation `json:"pt,omitempty"`
	Ru   *ListingTranslation `json:"ru,omitempty"`
}

// ListingVariationImage A representation of the associations of variations and images on a listing.
type ListingVariationImage struct {
	// ImageId The numeric ID of the Image.
	ImageId *int `json:"image_id,omitempty"`

	// PropertyId The numeric ID of the Property.
	PropertyId *int `json:"property_id,omitempty"`

	// Value The string value of the property.
	Value *string `json:"value"`

	// ValueId The numeric ID of the Value.
	ValueId *int `json:"value_id,omitempty"`
}

// ListingVariationImages Represents several ListingVariationImages.
type ListingVariationImages struct {
	Count   *int                     `json:"count,omitempty"`
	Results *[]ListingVariationImage `json:"results,omitempty"`
}

// ListingVideo Reference urls and metadata for a video associated with a specific listing.
type ListingVideo struct {
	// Height The video height dimension in pixels.
	Height *int `json:"height,omitempty"`

	// ThumbnailUrl The url of the video thumbnail.
	ThumbnailUrl *string `json:"thumbnail_url,omitempty"`

	// VideoId The unique ID of a video associated with a listing.
	VideoId *int `json:"video_id,omitempty"`

	// VideoState The current state of a given video. Value is one of `active`, `inactive`, `deleted` or `flagged`.
	VideoState *ListingVideoVideoState `json:"video_state,omitempty"`

	// VideoUrl The url of the video file.
	VideoUrl *string `json:"video_url,omitempty"`

	// Width The video width dimension in pixels.
	Width *int `json:"width,omitempty"`
}

// ListingVideoVideoState The current state of a given video. Value is one of `active`, `inactive`, `deleted` or `flagged`.
type ListingVideoVideoState string

// ListingVideos Represents a list of listing video resources, each of which contains the reference URLs for the videos.
type ListingVideos struct {
	// Count The number of results.
	Count *int `json:"count,omitempty"`

	// Results The list of requested resources.
	Results *[]ListingVideo `json:"results,omitempty"`
}

// Money A representation of an amount of money.
type Money struct {
	// Amount The amount of represented by this data.
	Amount *int `json:"amount,omitempty"`

	// CurrencyCode The ISO currency code for this data.
	CurrencyCode *string `json:"currency_code,omitempty"`

	// Divisor The divisor to render the amount.
	Divisor *int `json:"divisor,omitempty"`
}

// Payment Represents a payment made with Etsy Payments. All monetary amounts are in USD pennies unless otherwise specified.
type Payment struct {
	// AdjustedFees The new fee amount after a seller refunds a payment, partially or fully.
	AdjustedFees *Money `json:"adjusted_fees,omitempty"`

	// AdjustedGross The gross payment amount after the seller refunds a payment, partially or fully.
	AdjustedGross *Money `json:"adjusted_gross,omitempty"`

	// AdjustedNet The total value of the payment after refunds, less fees (`adjusted_gross` - `adjusted_fees`).
	AdjustedNet *Money `json:"adjusted_net,omitempty"`

	// AmountFees An integer equal to the original card processing fee of the order in pennies.
	AmountFees *Money `json:"amount_fees,omitempty"`

	// AmountGross An integer equal to gross amount of the order, in pennies, including shipping and taxes.
	AmountGross *Money `json:"amount_gross,omitempty"`

	// AmountNet An integer equal to the payment value, in pennies, less fees (`amount_gross` - `amount_fees`).
	AmountNet *Money `json:"amount_net,omitempty"`

	// BillingAddressId The numeric ID identifying the billing address of the buyer.
	BillingAddressId *int `json:"billing_address_id,omitempty"`

	// BuyerCurrency The currency string of the buyer.
	BuyerCurrency *string `json:"buyer_currency"`

	// BuyerUserId The numeric ID for the [user](/documentation/reference#tag/User) who paid the purchase.
	BuyerUserId *int `json:"buyer_user_id,omitempty"`

	// CreateTimestamp The transaction\'s creation date and time, in epoch seconds.
	CreateTimestamp *int `json:"create_timestamp,omitempty"`

	// CreatedTimestamp The transaction\'s creation date and time, in epoch seconds.
	CreatedTimestamp *int `json:"created_timestamp,omitempty"`

	// Currency The ISO (alphabetic) code string for the payment's currency.
	Currency *string `json:"currency,omitempty"`

	// PaymentAdjustments List of refund objects on an Etsy Payments transaction. All monetary amounts are in USD pennies unless otherwise specified.
	PaymentAdjustments *[]PaymentAdjustment `json:"payment_adjustments,omitempty"`

	// PaymentId A unique numeric ID for a payment to a specific Etsy [shop](/documentation/reference#tag/Shop).
	PaymentId *int `json:"payment_id,omitempty"`

	// PostedFees The total value of the fees posted once the purchase ships. Etsy refunds a proportional amount of the fees when a seller refunds a buyer. When the seller issues a refund prior to shipping, the posted amount is less then the original.
	PostedFees *Money `json:"posted_fees,omitempty"`

	// PostedGross The total gross value of the payment posted once the purchase ships. This is equal to the `amount_gross` UNLESS the seller issues a refund prior to shipping. We consider "shipping" to be the event which "posts" to the ledger. Therefore, if the seller refunds first, we reduce the `amount_gross` first and post then that amount. The seller never sees the refunded amount in their ledger. This is equal to the "Credit" amount in the ledger entry.
	PostedGross *Money `json:"posted_gross,omitempty"`

	// PostedNet The total value of the payment at the time of posting, less fees. (`posted_gross` - `posted_fees`)
	PostedNet *Money `json:"posted_net,omitempty"`

	// ReceiptId The numeric ID for the [receipt](/documentation/reference#tag/Shop-Receipt) associated to this transaction.
	ReceiptId *int `json:"receipt_id,omitempty"`

	// ShippedTimestamp The transaction\'s shipping date and time, in epoch seconds.
	ShippedTimestamp *int `json:"shipped_timestamp"`

	// ShippingAddressId The numeric id identifying the shipping address.
	ShippingAddressId *int `json:"shipping_address_id,omitempty"`

	// ShippingUserId The numeric ID of the user to which the seller ships the order.
	ShippingUserId *int `json:"shipping_user_id"`

	// ShopCurrency The ISO (alphabetic) code for the shop's currency. The shop displays all prices in this currency by default.
	ShopCurrency *string `json:"shop_currency"`

	// ShopId The unique positive non-zero numeric ID for an Etsy Shop.
	ShopId *int `json:"shop_id,omitempty"`

	// Status A string indicating the current status of the payment, most commonly "settled" or "authed".
	Status *string `json:"status,omitempty"`

	// UpdateTimestamp The date and time of the last change to the payment adjustment in epoch seconds.
	UpdateTimestamp *int `json:"update_timestamp,omitempty"`

	// UpdatedTimestamp The date and time of the last change to the payment adjustment in epoch seconds.
	UpdatedTimestamp *int `json:"updated_timestamp,omitempty"`
}

// PaymentAccountLedgerEntries A set of PaymentAccountLedgerEntry resources
type PaymentAccountLedgerEntries struct {
	// Count The number of PaymentAccountLedgerEntry resources found.
	Count *int `json:"count,omitempty"`

	// Results The PaymentAccountLedgerEntry resources found.
	Results *[]PaymentAccountLedgerEntry `json:"results,omitempty"`
}

// PaymentAccountLedgerEntry Represents an entry in a shop's ledger.
type PaymentAccountLedgerEntry struct {
	// Amount The amount of money credited to the ledger.
	Amount *int `json:"amount,omitempty"`

	// Balance The amount of money in the shop's ledger the moment after this entry was applied.
	Balance *int `json:"balance,omitempty"`

	// CreateDate The date and time the ledger entry was created in Epoch seconds.
	CreateDate *int `json:"create_date,omitempty"`

	// CreatedTimestamp The date and time the ledger entry was created in Epoch seconds.
	CreatedTimestamp *int `json:"created_timestamp,omitempty"`

	// Currency The currency of the entry on the ledger.
	Currency *string `json:"currency,omitempty"`

	// Description Details what kind of ledger entry this is: a payment, refund, reversal of a failed refund, disbursement, returned disbursement, recoupment, miscellaneous credit, miscellaneous debit, or bill payment.
	Description *string `json:"description,omitempty"`

	// EntryId The ledger entry's numeric ID.
	EntryId *int `json:"entry_id,omitempty"`

	// LedgerId The ledger's numeric ID.
	LedgerId *int `json:"ledger_id,omitempty"`

	// LedgerType The original reference type for the ledger entry.
	LedgerType *string `json:"ledger_type,omitempty"`

	// PaymentAdjustments List of refund objects on an Etsy Payments transaction. All monetary amounts are in USD pennies unless otherwise specified.
	PaymentAdjustments *[]PaymentAdjustment `json:"payment_adjustments,omitempty"`

	// ReferenceId The object id the ledger entry refers to.
	ReferenceId *string `json:"reference_id"`

	// ReferenceType The object type the ledger entry refers to.
	ReferenceType *string `json:"reference_type,omitempty"`

	// SequenceNumber The sequence allows ledger entries to be sorted chronologically. The higher the sequence, the more recent the entry.
	SequenceNumber *int `json:"sequence_number,omitempty"`
}

// PaymentAdjustment Represents a refund, which applies to a prior Etsy payment. All monetary amounts are in USD pennies unless otherwise specified.
type PaymentAdjustment struct {
	// BuyerTotalAdjustmentAmount The numeric amount of the refund in the buyer currency.
	BuyerTotalAdjustmentAmount *int `json:"buyer_total_adjustment_amount"`

	// CreateTimestamp The transaction\'s creation date and time, in epoch seconds.
	CreateTimestamp *int `json:"create_timestamp,omitempty"`

	// CreatedTimestamp The transaction\'s creation date and time, in epoch seconds.
	CreatedTimestamp *int `json:"created_timestamp,omitempty"`

	// IsSuccess When true, the payment adjustment was or is likely to complete successfully.
	IsSuccess *bool `json:"is_success,omitempty"`

	// PaymentAdjustmentId The numeric ID for a payment adjustment.
	PaymentAdjustmentId *int `json:"payment_adjustment_id,omitempty"`

	// PaymentAdjustmentItems List of payment adjustment line items.
	PaymentAdjustmentItems *[]PaymentAdjustmentItem `json:"payment_adjustment_items,omitempty"`

	// PaymentId A unique numeric ID for a payment to a specific Etsy [shop](/documentation/reference#tag/Shop).
	PaymentId *int `json:"payment_id,omitempty"`

	// ReasonCode A human-readable string describing the reason for the refund.
	ReasonCode *string `json:"reason_code,omitempty"`

	// ShopTotalAdjustmentAmount The numeric amount of the refund in the shop currency.
	ShopTotalAdjustmentAmount *int `json:"shop_total_adjustment_amount"`

	// Status The status string of the payment adjustment.
	Status *string `json:"status,omitempty"`

	// TotalAdjustmentAmount The total numeric amount of the refund in the payment currency.
	TotalAdjustmentAmount *int `json:"total_adjustment_amount"`

	// TotalFeeAdjustmentAmount The numeric amount of card processing fees associated with a payment adjustment.
	TotalFeeAdjustmentAmount *int `json:"total_fee_adjustment_amount"`

	// UpdateTimestamp The date and time of the last change to the payment adjustment in epoch seconds.
	UpdateTimestamp *int `json:"update_timestamp,omitempty"`

	// UpdatedTimestamp The date and time of the last change to the payment adjustment in epoch seconds.
	UpdatedTimestamp *int `json:"updated_timestamp,omitempty"`

	// UserId The numeric ID for the [user](/documentation/reference#tag/User) (seller) fulfilling the purchase.
	UserId *int `json:"user_id,omitempty"`
}

// PaymentAdjustmentItem A payemnt adjustment line item for a payment adjustment.
type PaymentAdjustmentItem struct {
	// AdjustmentType String indicating the type of adjustment for this line item.
	AdjustmentType *string `json:"adjustment_type"`

	// Amount Integer value for the amount of the adjustment in original currency.
	Amount *int `json:"amount,omitempty"`

	// BillPaymentId Unique ID for the bill payment adjustment.
	BillPaymentId *int `json:"bill_payment_id"`

	// CreatedTimestamp The transaction\'s creation date and time, in epoch seconds.
	CreatedTimestamp *int `json:"created_timestamp,omitempty"`

	// PaymentAdjustmentId The numeric ID for a payment adjustment.
	PaymentAdjustmentId *int `json:"payment_adjustment_id,omitempty"`

	// PaymentAdjustmentItemId Unique ID for the adjustment line item.
	PaymentAdjustmentItemId *int `json:"payment_adjustment_item_id,omitempty"`

	// ShopAmount Integer value for the amount of the adjustment in currency for the shop.
	ShopAmount *int `json:"shop_amount,omitempty"`

	// TransactionId The unique numeric ID for a transaction.
	TransactionId *int `json:"transaction_id"`

	// UpdatedTimestamp The update date and time the payment adjustment in epoch seconds.
	UpdatedTimestamp *int `json:"updated_timestamp,omitempty"`
}

// Payments Represents several payments made with Etsy Payments. All monetary amounts are in USD pennies unless otherwise specified.
type Payments struct {
	// Count The number of payments in the response.
	Count *int `json:"count,omitempty"`

	// Results A list of payments.
	Results *[]Payment `json:"results,omitempty"`
}

// Pong A confirmation that the current application has access to the Open API
type Pong struct {
	// ApplicationId The authenticated application's ID
	ApplicationId *int `json:"application_id,omitempty"`
}

// Scopes A list of scopes allowed for the token.
type Scopes = map[string]interface{}

// Self Represents a single user of the site
type Self struct {
	// ShopId The unique positive non-zero numeric ID for an Etsy Shop.
	ShopId *int `json:"shop_id,omitempty"`

	// UserId The numeric ID of a user. This number is also a valid shop ID for the user\'s shop.
	UserId *int `json:"user_id,omitempty"`
}

// SellerTaxonomyNode A taxonomy node in the seller taxonomy tree.
type SellerTaxonomyNode struct {
	// Children An array of taxonomy nodes for all the direct children of this taxonomy node in the seller taxonomy tree.
	Children *[]SellerTaxonomyNode `json:"children,omitempty"`

	// FullPathTaxonomyIds An array of `taxonomy_id`s including this node and all of its direct parents in the seller taxonomy tree up to a root node. They are listed in order from root to leaf.
	FullPathTaxonomyIds *[]int `json:"full_path_taxonomy_ids,omitempty"`

	// Id The unique numeric ID of an Etsy taxonomy node, which is a metadata category for listings organized into the seller taxonomy hierarchy tree. For example, the \"shoes\" taxonomy node (ID: 1429, level: 1) is higher in the hierarchy than \"girls' shoes\" (ID: 1440, level: 2). The taxonomy nodes assigned to a listing support access to specific standardized product scales and properties. For example, listings assigned the taxonomy nodes \"shoes\" or \"girls' shoes\" support access to the \"EU\" shoe size scale with its associated property names and IDs for EU shoe sizes, such as property `value_id`:\"1394\", and `name`:\"38\".
	Id *int `json:"id,omitempty"`

	// Level The integer depth of this taxonomy node in the seller taxonomy tree, with roots at level 0.
	Level *int `json:"level,omitempty"`

	// Name The name string for this taxonomy node.
	Name *string `json:"name,omitempty"`

	// ParentId The numeric taxonomy ID of the parent of this node.
	ParentId *int `json:"parent_id"`
}

// SellerTaxonomyNodes A list of taxonomy nodes from the seller taxonomy tree.
type SellerTaxonomyNodes struct {
	// Count The number of results.
	Count *int `json:"count,omitempty"`

	// Results The list of requested resources.
	Results *[]SellerTaxonomyNode `json:"results,omitempty"`
}

// ShippingCarrier A supported shipping carrier, which is used to calculate an Estimated Delivery Date.
type ShippingCarrier struct {
	// DomesticClasses Set of domestic mail classes of this shipping carrier.
	DomesticClasses *[]ShippingCarrierMailClass `json:"domestic_classes,omitempty"`

	// InternationalClasses Set of international mail classes of this shipping carrier.
	InternationalClasses *[]ShippingCarrierMailClass `json:"international_classes,omitempty"`

	// Name The name of this shipping carrier.
	Name *string `json:"name,omitempty"`

	// ShippingCarrierId The numeric ID of this shipping carrier.
	ShippingCarrierId *int `json:"shipping_carrier_id,omitempty"`
}

// ShippingCarrierMailClass A shipping carrier's mail class, which is used to calculate an Estimated Delivery Date.
type ShippingCarrierMailClass struct {
	// MailClassKey The unique identifier of this mail class.
	MailClassKey *string `json:"mail_class_key,omitempty"`

	// Name The name of this mail class.
	Name *string `json:"name,omitempty"`
}

// ShippingCarriers Represents several ShippingCarriers.
type ShippingCarriers struct {
	Count   *int               `json:"count,omitempty"`
	Results *[]ShippingCarrier `json:"results,omitempty"`
}

// Shop A shop created by an Etsy user.
type Shop struct {
	// AcceptsCustomRequests When true, the shop accepts customization requests.
	AcceptsCustomRequests *bool `json:"accepts_custom_requests,omitempty"`

	// Announcement An announcement string to buyers that displays on the shop's homepage.
	Announcement *string `json:"announcement"`

	// CreateDate The date and time this shop was created, in epoch seconds.
	CreateDate *int `json:"create_date,omitempty"`

	// CreatedTimestamp The date and time this shop was created, in epoch seconds.
	CreatedTimestamp *int `json:"created_timestamp,omitempty"`

	// CurrencyCode The ISO (alphabetic) code for the shop's currency. The shop displays all prices in this currency by default.
	CurrencyCode *string `json:"currency_code,omitempty"`

	// DigitalListingCount The number of digital listings in the shop.
	DigitalListingCount *int `json:"digital_listing_count,omitempty"`

	// DigitalSaleMessage A message string sent to users who purchase a digital item from this shop.
	DigitalSaleMessage *string `json:"digital_sale_message"`

	// HasOnboardedStructuredPolicies When true, the shop accepted OR declined after viewing structured policies onboarding.
	HasOnboardedStructuredPolicies *bool `json:"has_onboarded_structured_policies,omitempty"`

	// HasUnstructuredPolicies When true, the shop displays additional unstructured policy fields.
	HasUnstructuredPolicies *bool `json:"has_unstructured_policies,omitempty"`

	// IconUrlFullxfull The URL string for this shop's icon image.
	IconUrlFullxfull *string `json:"icon_url_fullxfull"`

	// ImageUrl760x100 The URL string for this shop's banner image.
	ImageUrl760x100 *string `json:"image_url_760x100"`

	// IncludeDisputeFormLink When true, this shop\'s policies include a link to an EU online dispute form.
	IncludeDisputeFormLink *bool `json:"include_dispute_form_link,omitempty"`

	// IsCalculatedEligible When true, the shop is eligible for calculated shipping profiles. (Only available in the US and Canada)
	IsCalculatedEligible *bool `json:"is_calculated_eligible,omitempty"`

	// IsDirectCheckoutOnboarded (**DEPRECATED: Replaced by _is_etsy_payments_onboarded_.) When true, the shop has onboarded onto Etsy Payments.
	IsDirectCheckoutOnboarded *bool `json:"is_direct_checkout_onboarded,omitempty"`

	// IsEtsyPaymentsOnboarded When true, the shop has onboarded onto Etsy Payments.
	IsEtsyPaymentsOnboarded *bool `json:"is_etsy_payments_onboarded,omitempty"`

	// IsOptedInToBuyerPromise When true, the shop opted in to buyer promise.
	IsOptedInToBuyerPromise *bool `json:"is_opted_in_to_buyer_promise,omitempty"`

	// IsShopUsBased When true, the shop is based in the US.
	IsShopUsBased *bool `json:"is_shop_us_based,omitempty"`

	// IsUsingStructuredPolicies When true, the shop accepted using structured policies.
	IsUsingStructuredPolicies *bool `json:"is_using_structured_policies,omitempty"`

	// IsVacation When true, this shop is not accepting purchases.
	IsVacation *bool `json:"is_vacation,omitempty"`

	// Languages A list of language strings for the shop's enrolled languages where the default shop language is the first element in the array.
	Languages *[]string `json:"languages,omitempty"`

	// ListingActiveCount The number of active listings in the shop.
	ListingActiveCount *int `json:"listing_active_count,omitempty"`

	// LoginName The shop owner\'s login name string.
	LoginName *string `json:"login_name,omitempty"`

	// NumFavorers The number of users who marked this shop a favorite.
	NumFavorers *int `json:"num_favorers,omitempty"`

	// PolicyAdditional The shop's additional policies string (may be blank).
	PolicyAdditional *string `json:"policy_additional"`

	// PolicyHasPrivateReceiptInfo When true, EU receipts display private info.
	PolicyHasPrivateReceiptInfo *bool `json:"policy_has_private_receipt_info,omitempty"`

	// PolicyPayment The shop's payment policy string (may be blank).
	PolicyPayment *string `json:"policy_payment"`

	// PolicyPrivacy The shop's privacy policy string (may be blank).
	PolicyPrivacy *string `json:"policy_privacy"`

	// PolicyRefunds The shop's refund policy string (may be blank).
	PolicyRefunds *string `json:"policy_refunds"`

	// PolicySellerInfo The shop's seller information string (may be blank).
	PolicySellerInfo *string `json:"policy_seller_info"`

	// PolicyShipping The shop's shipping policy string (may be blank).
	PolicyShipping *string `json:"policy_shipping"`

	// PolicyUpdateDate The date and time of the last update to the shop's policies, in epoch seconds.
	PolicyUpdateDate *int `json:"policy_update_date,omitempty"`

	// PolicyWelcome The shop's policy welcome string (may be blank).
	PolicyWelcome *string `json:"policy_welcome"`

	// ReviewAverage Average rating based on reviews of shop listings in the past year.
	ReviewAverage *float32 `json:"review_average"`

	// ReviewCount Number of reviews of shop listings in the past year.
	ReviewCount *int `json:"review_count"`

	// SaleMessage A message string sent to users who complete a purchase from this shop.
	SaleMessage *string `json:"sale_message"`

	// ShippingFromCountryIso The country iso the shop is shipping from.
	ShippingFromCountryIso *string `json:"shipping_from_country_iso"`

	// ShopId The unique positive non-zero numeric ID for an Etsy Shop.
	ShopId *int `json:"shop_id,omitempty"`

	// ShopLocationCountryIso The country iso where the shop is located.
	ShopLocationCountryIso *string `json:"shop_location_country_iso"`

	// ShopName The shop's name string.
	ShopName *string `json:"shop_name,omitempty"`

	// Title A brief heading string for the shop\'s main page.
	Title *string `json:"title"`

	// TransactionSoldCount The total number of sales ([transactions](/documentation/reference#tag/Shop-Receipt-Transactions)) for this shop.
	TransactionSoldCount *int `json:"transaction_sold_count,omitempty"`

	// UpdateDate The date and time of the last update to the shop, in epoch seconds.
	UpdateDate *int `json:"update_date,omitempty"`

	// UpdatedTimestamp The date and time of the last update to the shop, in epoch seconds.
	UpdatedTimestamp *int `json:"updated_timestamp,omitempty"`

	// Url The URL string for this shop.
	Url *string `json:"url,omitempty"`

	// UserId The numeric user ID of the [user](/documentation/reference#tag/User) who owns this shop.
	UserId *int `json:"user_id,omitempty"`

	// VacationAutoreply The shop's automatic reply string displayed in new conversations when `is_vacation` is true.
	VacationAutoreply *string `json:"vacation_autoreply"`

	// VacationMessage The shop's message string displayed when `is_vacation` is true.
	VacationMessage *string `json:"vacation_message"`
}

// ShopListing A listing from a shop, which contains a product quantity, title, description, price, etc.
type ShopListing struct {
	// CreatedTimestamp The listing\'s creation time, in epoch seconds.
	CreatedTimestamp *int `json:"created_timestamp,omitempty"`

	// CreationTimestamp The listing\'s creation time, in epoch seconds.
	CreationTimestamp *int `json:"creation_timestamp,omitempty"`

	// Description A description string of the product for sale in the listing.
	Description *string `json:"description,omitempty"`

	// EndingTimestamp The listing\'s expiration time, in epoch seconds.
	EndingTimestamp *int `json:"ending_timestamp,omitempty"`

	// FeaturedRank The positive non-zero numeric position in the featured listings of the shop, with rank 1 listings appearing in the left-most position in featured listing on a shop’s home page.
	FeaturedRank *int `json:"featured_rank,omitempty"`

	// FileData A string describing the files attached to a digital listing.
	FileData *string `json:"file_data,omitempty"`

	// HasVariations When true, the listing has variations.
	HasVariations *bool `json:"has_variations,omitempty"`

	// IsCustomizable When true, a buyer may contact the seller for a customized order. The default value is true when a shop accepts custom orders. Does not apply to shops that do not accept custom orders.
	IsCustomizable *bool `json:"is_customizable,omitempty"`

	// IsPersonalizable When true, this listing is personalizable. The default value is null.
	IsPersonalizable *bool `json:"is_personalizable,omitempty"`

	// IsPrivate When true, this is a private listing intended for a specific buyer and hidden from shop view.
	IsPrivate *bool `json:"is_private,omitempty"`

	// IsSupply When true, tags the listing as a supply product, else indicates that it's a finished product. Helps buyers locate the listing under the Supplies heading. Requires 'who_made' and 'when_made'.
	IsSupply *bool `json:"is_supply"`

	// IsTaxable When true, applicable [shop](/documentation/reference#tag/Shop) tax rates apply to this listing at checkout.
	IsTaxable *bool `json:"is_taxable,omitempty"`

	// ItemDimensionsUnit A string defining the units used to measure the dimensions of the product. Default value is null.
	ItemDimensionsUnit *ShopListingItemDimensionsUnit `json:"item_dimensions_unit"`

	// ItemHeight The numeric length of the product measured in units set in \'item_dimensions_unit\'. Default value is null. If set, the value must be greater than 0.
	ItemHeight *float32 `json:"item_height"`

	// ItemLength The numeric length of the product measured in units set in \'item_dimensions_unit\'. Default value is null. If set, the value must be greater than 0.
	ItemLength *float32 `json:"item_length"`

	// ItemWeight The numeric weight of the product measured in units set in \'item_weight_unit\'. Default value is null. If set, the value must be greater than 0.
	ItemWeight *float32 `json:"item_weight"`

	// ItemWeightUnit A string defining the units used to measure the weight of the product. Default value is null.
	ItemWeightUnit *ShopListingItemWeightUnit `json:"item_weight_unit"`

	// ItemWidth The numeric width of the product measured in units set in \'item_dimensions_unit\'. Default value is null. If set, the value must be greater than 0.
	ItemWidth *float32 `json:"item_width"`

	// Language The IETF language tag for the default language of the listing. Ex: `de`, `en`, `es`, `fr`, `it`, `ja`, `nl`, `pl`, `pt`, `ru`.
	Language *string `json:"language"`

	// LastModifiedTimestamp The time of the last update to the listing, in epoch seconds.
	LastModifiedTimestamp *int `json:"last_modified_timestamp,omitempty"`

	// ListingId The numeric ID for the [listing](/documentation/reference#tag/ShopListing) associated to this transaction.
	ListingId *int `json:"listing_id,omitempty"`

	// ListingType An enumerated type string that indicates whether the listing is physical or a digital download.
	ListingType *ShopListingListingType `json:"listing_type,omitempty"`

	// Materials A list of material strings for materials used in the product. Valid materials strings contain only letters, numbers, and whitespace characters. (regex: /[^\\p{L}\\p{Nd}\\p{Zs}]/u) Default value is null.
	Materials *[]string `json:"materials,omitempty"`

	// NonTaxable When true, applicable [shop](/documentation/reference#tag/Shop) tax rates do not apply to this listing at checkout.
	NonTaxable *bool `json:"non_taxable,omitempty"`

	// NumFavorers The number of users who marked this Listing a favorite.
	NumFavorers *int `json:"num_favorers,omitempty"`

	// OriginalCreationTimestamp The listing\'s creation time, in epoch seconds.
	OriginalCreationTimestamp *int `json:"original_creation_timestamp,omitempty"`

	// PersonalizationCharCountMax This is an integer value representing the maximum length for the personalization message entered by the buyer. Will only change if is_personalizable is 'true'.
	PersonalizationCharCountMax *int `json:"personalization_char_count_max"`

	// PersonalizationInstructions When true, this listing requires personalization. The default value is null. Will only change if is_personalizable is 'true'.
	PersonalizationInstructions *string `json:"personalization_instructions"`

	// PersonalizationIsRequired When true, this listing requires personalization. The default value is null. Will only change if is_personalizable is 'true'.
	PersonalizationIsRequired *bool `json:"personalization_is_required,omitempty"`

	// Price The positive non-zero price of the product. (Sold product listings are private) Note: The price is the minimum possible price. The [`getListingInventory`](/documentation/reference/#operation/getListingInventory) method requests exact prices for available offerings.
	Price *Money `json:"price,omitempty"`

	// ProcessingMax The maximum number of days required to process this listing. Default value is null.
	ProcessingMax *int `json:"processing_max"`

	// ProcessingMin The minimum number of days required to process this listing. Default value is null.
	ProcessingMin *int `json:"processing_min"`

	// Quantity The positive non-zero number of products available for purchase in the listing. Note: The listing quantity is the sum of available offering quantities. You can request the quantities for individual offerings from the ListingInventory resource using the [getListingInventory](/documentation/reference#operation/getListingInventory) endpoint.
	Quantity *int `json:"quantity,omitempty"`

	// ReturnPolicyId The numeric ID of the [Return Policy](/documentation/reference#operation/getShopReturnPolicies).
	ReturnPolicyId *int `json:"return_policy_id"`

	// ShippingProfileId The numeric ID of the [shipping profile](/documentation/reference#operation/getShopShippingProfile) associated with the listing. Required when listing type is `physical`.
	ShippingProfileId *int `json:"shipping_profile_id"`

	// ShopId The unique positive non-zero numeric ID for an Etsy Shop.
	ShopId *int `json:"shop_id,omitempty"`

	// ShopSectionId The numeric ID of a section in a specific Etsy shop.
	ShopSectionId *int `json:"shop_section_id"`

	// ShouldAutoRenew When true, renews a listing for four months upon expiration.
	ShouldAutoRenew *bool `json:"should_auto_renew,omitempty"`

	// State When _updating_ a listing, this value can be either `active` or `inactive`. Note: Setting a `draft` listing to `active` will also publish the listing on etsy.com and requires that the listing have an image set. Setting a `sold_out` listing to active will update the quantity to 1 and renew the listing on etsy.com.
	State *ShopListingState `json:"state,omitempty"`

	// StateTimestamp The date and time of the last state change of this listing.
	StateTimestamp *int `json:"state_timestamp,omitempty"`

	// Style An array of style strings for this listing, each of which is free-form text string such as \"Formal\", or \"Steampunk\". When creating or updating a listing, the listing may have up to two styles. Valid style strings contain only letters, numbers, and whitespace characters. (regex: /[^\\p{L}\\p{Nd}\\p{Zs}]/u) Default value is null.
	Style *[]string `json:"style,omitempty"`

	// Tags A comma-separated list of tag strings for the listing. When creating or updating a listing, valid tag strings contain only letters, numbers, whitespace characters, -, ', ™, ©, and ®. (regex: /[^\\p{L}\\p{Nd}\\p{Zs}\\-'™©®]/u) Default value is null.
	Tags *[]string `json:"tags,omitempty"`

	// TaxonomyId The numerical taxonomy ID of the listing. See [SellerTaxonomy](/documentation/reference#tag/SellerTaxonomy) and [BuyerTaxonomy](/documentation/reference#tag/BuyerTaxonomy) for more information.
	TaxonomyId *int `json:"taxonomy_id"`

	// Title The listing's title string. When creating or updating a listing, valid title strings contain only letters, numbers, punctuation marks, mathematical symbols, whitespace characters, ™, ©, and ®. (regex: /[^\\p{L}\\p{Nd}\\p{P}\\p{Sm}\\p{Zs}™©®]/u) You can only use the %, :, & and + characters once each.
	Title *string `json:"title,omitempty"`

	// UpdatedTimestamp The time of the last update to the listing, in epoch seconds.
	UpdatedTimestamp *int `json:"updated_timestamp,omitempty"`

	// Url The full URL to the listing's page on Etsy.
	Url *string `json:"url,omitempty"`

	// UserId The numeric ID for the [user](/documentation/reference#tag/User) posting the listing.
	UserId *int `json:"user_id,omitempty"`

	// WhenMade An enumerated string for the era in which the maker made the product in this listing. Helps buyers locate the listing under the Vintage heading. Requires 'is_supply' and 'who_made'.
	WhenMade *ShopListingWhenMade `json:"when_made"`

	// WhoMade An enumerated string indicating who made the product. Helps buyers locate the listing under the Handmade heading. Requires 'is_supply' and 'when_made'.
	WhoMade *ShopListingWhoMade `json:"who_made"`
}

// ShopListingItemDimensionsUnit A string defining the units used to measure the dimensions of the product. Default value is null.
type ShopListingItemDimensionsUnit string

// ShopListingItemWeightUnit A string defining the units used to measure the weight of the product. Default value is null.
type ShopListingItemWeightUnit string

// ShopListingListingType An enumerated type string that indicates whether the listing is physical or a digital download.
type ShopListingListingType string

// ShopListingState When _updating_ a listing, this value can be either `active` or `inactive`. Note: Setting a `draft` listing to `active` will also publish the listing on etsy.com and requires that the listing have an image set. Setting a `sold_out` listing to active will update the quantity to 1 and renew the listing on etsy.com.
type ShopListingState string

// ShopListingWhenMade An enumerated string for the era in which the maker made the product in this listing. Helps buyers locate the listing under the Vintage heading. Requires 'is_supply' and 'who_made'.
type ShopListingWhenMade string

// ShopListingWhoMade An enumerated string indicating who made the product. Helps buyers locate the listing under the Handmade heading. Requires 'is_supply' and 'when_made'.
type ShopListingWhoMade string

// ShopListingFile A file associated with a digital listing.
type ShopListingFile struct {
	// CreateTimestamp The unique numeric ID of a file associated with a digital listing.
	CreateTimestamp *int `json:"create_timestamp,omitempty"`

	// CreatedTimestamp The unique numeric ID of a file associated with a digital listing.
	CreatedTimestamp *int `json:"created_timestamp,omitempty"`

	// Filename The file name string for a file associated with a digital listing.
	Filename *string `json:"filename,omitempty"`

	// Filesize A human-readable format size string for the size of a file.
	Filesize *string `json:"filesize,omitempty"`

	// Filetype A type string indicating a file's MIME type.
	Filetype *string `json:"filetype,omitempty"`

	// ListingFileId The unique numeric ID of a file associated with a digital listing.
	ListingFileId *int `json:"listing_file_id,omitempty"`

	// ListingId The numeric ID for the [listing](/documentation/reference#tag/ShopListing) associated to this transaction.
	ListingId *int `json:"listing_id,omitempty"`

	// Rank The numeric index of the display order position of this file in the listing, starting at 1.
	Rank *int `json:"rank,omitempty"`

	// SizeBytes A number indicating the size of a file, measured in bytes.
	SizeBytes *int `json:"size_bytes,omitempty"`
}

// ShopListingFiles Represents several ShopListingFiles.
type ShopListingFiles struct {
	// Count The number of ShopListingFiles being returned..
	Count *int `json:"count,omitempty"`

	// Results An array of ShopListingFile resources.
	Results *[]ShopListingFile `json:"results,omitempty"`
}

// ShopListingWithAssociations A listing from a shop, which contains a product quantity, title, description, price, etc. and additional fields which represent associations.
type ShopListingWithAssociations struct {
	// CreatedTimestamp The listing\'s creation time, in epoch seconds.
	CreatedTimestamp *int `json:"created_timestamp,omitempty"`

	// CreationTimestamp The listing\'s creation time, in epoch seconds.
	CreationTimestamp *int `json:"creation_timestamp,omitempty"`

	// Description A description string of the product for sale in the listing.
	Description *string `json:"description,omitempty"`

	// EndingTimestamp The listing\'s expiration time, in epoch seconds.
	EndingTimestamp *int `json:"ending_timestamp,omitempty"`

	// FeaturedRank The positive non-zero numeric position in the featured listings of the shop, with rank 1 listings appearing in the left-most position in featured listing on a shop’s home page.
	FeaturedRank *int `json:"featured_rank,omitempty"`

	// FileData A string describing the files attached to a digital listing.
	FileData *string `json:"file_data,omitempty"`

	// HasVariations When true, the listing has variations.
	HasVariations *bool `json:"has_variations,omitempty"`

	// Images Represents a list of listing image resources, each of which contains the reference URLs and metadata for an image
	Images *[]ListingImage `json:"images,omitempty"`

	// Inventory An enumerated string that attaches a valid association. Default value is null.
	Inventory *ListingInventory `json:"inventory,omitempty"`

	// IsCustomizable When true, a buyer may contact the seller for a customized order. The default value is true when a shop accepts custom orders. Does not apply to shops that do not accept custom orders.
	IsCustomizable *bool `json:"is_customizable,omitempty"`

	// IsPersonalizable When true, this listing is personalizable. The default value is null.
	IsPersonalizable *bool `json:"is_personalizable,omitempty"`

	// IsPrivate When true, this is a private listing intended for a specific buyer and hidden from shop view.
	IsPrivate *bool `json:"is_private,omitempty"`

	// IsSupply When true, tags the listing as a supply product, else indicates that it's a finished product. Helps buyers locate the listing under the Supplies heading. Requires 'who_made' and 'when_made'.
	IsSupply *bool `json:"is_supply"`

	// IsTaxable When true, applicable [shop](/documentation/reference#tag/Shop) tax rates apply to this listing at checkout.
	IsTaxable *bool `json:"is_taxable,omitempty"`

	// ItemDimensionsUnit A string defining the units used to measure the dimensions of the product. Default value is null.
	ItemDimensionsUnit *ShopListingWithAssociationsItemDimensionsUnit `json:"item_dimensions_unit"`

	// ItemHeight The numeric length of the product measured in units set in \'item_dimensions_unit\'. Default value is null. If set, the value must be greater than 0.
	ItemHeight *float32 `json:"item_height"`

	// ItemLength The numeric length of the product measured in units set in \'item_dimensions_unit\'. Default value is null. If set, the value must be greater than 0.
	ItemLength *float32 `json:"item_length"`

	// ItemWeight The numeric weight of the product measured in units set in \'item_weight_unit\'. Default value is null. If set, the value must be greater than 0.
	ItemWeight *float32 `json:"item_weight"`

	// ItemWeightUnit A string defining the units used to measure the weight of the product. Default value is null.
	ItemWeightUnit *ShopListingWithAssociationsItemWeightUnit `json:"item_weight_unit"`

	// ItemWidth The numeric width of the product measured in units set in \'item_dimensions_unit\'. Default value is null. If set, the value must be greater than 0.
	ItemWidth *float32 `json:"item_width"`

	// Language The IETF language tag for the default language of the listing. Ex: `de`, `en`, `es`, `fr`, `it`, `ja`, `nl`, `pl`, `pt`, `ru`.
	Language *string `json:"language"`

	// LastModifiedTimestamp The time of the last update to the listing, in epoch seconds.
	LastModifiedTimestamp *int `json:"last_modified_timestamp,omitempty"`

	// ListingId The numeric ID for the [listing](/documentation/reference#tag/ShopListing) associated to this transaction.
	ListingId *int `json:"listing_id,omitempty"`

	// ListingType An enumerated type string that indicates whether the listing is physical or a digital download.
	ListingType *ShopListingWithAssociationsListingType `json:"listing_type,omitempty"`

	// Materials A list of material strings for materials used in the product. Valid materials strings contain only letters, numbers, and whitespace characters. (regex: /[^\\p{L}\\p{Nd}\\p{Zs}]/u) Default value is null.
	Materials *[]string `json:"materials,omitempty"`

	// NonTaxable When true, applicable [shop](/documentation/reference#tag/Shop) tax rates do not apply to this listing at checkout.
	NonTaxable *bool `json:"non_taxable,omitempty"`

	// NumFavorers The number of users who marked this Listing a favorite.
	NumFavorers *int `json:"num_favorers,omitempty"`

	// OriginalCreationTimestamp The listing\'s creation time, in epoch seconds.
	OriginalCreationTimestamp *int `json:"original_creation_timestamp,omitempty"`

	// PersonalizationCharCountMax This is an integer value representing the maximum length for the personalization message entered by the buyer. Will only change if is_personalizable is 'true'.
	PersonalizationCharCountMax *int `json:"personalization_char_count_max"`

	// PersonalizationInstructions When true, this listing requires personalization. The default value is null. Will only change if is_personalizable is 'true'.
	PersonalizationInstructions *string `json:"personalization_instructions"`

	// PersonalizationIsRequired When true, this listing requires personalization. The default value is null. Will only change if is_personalizable is 'true'.
	PersonalizationIsRequired *bool `json:"personalization_is_required,omitempty"`

	// Price The positive non-zero price of the product. (Sold product listings are private) Note: The price is the minimum possible price. The [`getListingInventory`](/documentation/reference/#operation/getListingInventory) method requests exact prices for available offerings.
	Price *Money `json:"price,omitempty"`

	// ProcessingMax The maximum number of days required to process this listing. Default value is null.
	ProcessingMax *int `json:"processing_max"`

	// ProcessingMin The minimum number of days required to process this listing. Default value is null.
	ProcessingMin *int `json:"processing_min"`

	// ProductionPartners Represents a list of production partners for a shop.
	ProductionPartners *[]ShopProductionPartner `json:"production_partners,omitempty"`

	// Quantity The positive non-zero number of products available for purchase in the listing. Note: The listing quantity is the sum of available offering quantities. You can request the quantities for individual offerings from the ListingInventory resource using the [getListingInventory](/documentation/reference#operation/getListingInventory) endpoint.
	Quantity *int `json:"quantity,omitempty"`

	// ReturnPolicyId The numeric ID of the [Return Policy](/documentation/reference#operation/getShopReturnPolicies).
	ReturnPolicyId *int `json:"return_policy_id"`

	// ShippingProfile An array of data representing the shipping profile resource.
	ShippingProfile *ShopShippingProfile `json:"shipping_profile,omitempty"`

	// ShippingProfileId The numeric ID of the [shipping profile](/documentation/reference#operation/getShopShippingProfile) associated with the listing. Required when listing type is `physical`.
	ShippingProfileId *int `json:"shipping_profile_id"`

	// Shop A shop created by an Etsy user.
	Shop *Shop `json:"shop,omitempty"`

	// ShopId The unique positive non-zero numeric ID for an Etsy Shop.
	ShopId *int `json:"shop_id,omitempty"`

	// ShopSectionId The numeric ID of a section in a specific Etsy shop.
	ShopSectionId *int `json:"shop_section_id"`

	// ShouldAutoRenew When true, renews a listing for four months upon expiration.
	ShouldAutoRenew *bool `json:"should_auto_renew,omitempty"`

	// Skus A list of SKU strings for the listing. SKUs will only appear if the requesting user owns the shop and a valid matching OAuth 2 token is provided. When requested without the token it will be an empty array.
	Skus *[]string `json:"skus,omitempty"`

	// State When _updating_ a listing, this value can be either `active` or `inactive`. Note: Setting a `draft` listing to `active` will also publish the listing on etsy.com and requires that the listing have an image set. Setting a `sold_out` listing to active will update the quantity to 1 and renew the listing on etsy.com.
	State *ShopListingWithAssociationsState `json:"state,omitempty"`

	// StateTimestamp The date and time of the last state change of this listing.
	StateTimestamp *int `json:"state_timestamp,omitempty"`

	// Style An array of style strings for this listing, each of which is free-form text string such as \"Formal\", or \"Steampunk\". When creating or updating a listing, the listing may have up to two styles. Valid style strings contain only letters, numbers, and whitespace characters. (regex: /[^\\p{L}\\p{Nd}\\p{Zs}]/u) Default value is null.
	Style *[]string `json:"style,omitempty"`

	// Tags A comma-separated list of tag strings for the listing. When creating or updating a listing, valid tag strings contain only letters, numbers, whitespace characters, -, ', ™, ©, and ®. (regex: /[^\\p{L}\\p{Nd}\\p{Zs}\\-'™©®]/u) Default value is null.
	Tags *[]string `json:"tags,omitempty"`

	// TaxonomyId The numerical taxonomy ID of the listing. See [SellerTaxonomy](/documentation/reference#tag/SellerTaxonomy) and [BuyerTaxonomy](/documentation/reference#tag/BuyerTaxonomy) for more information.
	TaxonomyId *int `json:"taxonomy_id"`

	// Title The listing's title string. When creating or updating a listing, valid title strings contain only letters, numbers, punctuation marks, mathematical symbols, whitespace characters, ™, ©, and ®. (regex: /[^\\p{L}\\p{Nd}\\p{P}\\p{Sm}\\p{Zs}™©®]/u) You can only use the %, :, & and + characters once each.
	Title *string `json:"title,omitempty"`

	// Translations A map of translations for the listing. Default value is a map of all supported languages keyed to null.
	Translations *ListingTranslations `json:"translations,omitempty"`

	// UpdatedTimestamp The time of the last update to the listing, in epoch seconds.
	UpdatedTimestamp *int `json:"updated_timestamp,omitempty"`

	// Url The full URL to the listing's page on Etsy.
	Url *string `json:"url,omitempty"`

	// User Represents a single user of the site
	User *User `json:"user,omitempty"`

	// UserId The numeric ID for the [user](/documentation/reference#tag/User) posting the listing.
	UserId *int `json:"user_id,omitempty"`

	// Videos The single video associated with a listing.
	Videos *[]ListingVideo `json:"videos,omitempty"`

	// Views The number of times the listing has been viewed. This value is tabulated once per day and **only for active listings**, so the value is not real-time. If `0`, the listing has either not been viewed, not yet tabulated, was not active during the last tabulation or there was an error fetching the value. If a value is expected, call `getListing` to confirm the value.
	Views *int `json:"views,omitempty"`

	// WhenMade An enumerated string for the era in which the maker made the product in this listing. Helps buyers locate the listing under the Vintage heading. Requires 'is_supply' and 'who_made'.
	WhenMade *ShopListingWithAssociationsWhenMade `json:"when_made"`

	// WhoMade An enumerated string indicating who made the product. Helps buyers locate the listing under the Handmade heading. Requires 'is_supply' and 'when_made'.
	WhoMade *ShopListingWithAssociationsWhoMade `json:"who_made"`
}

// ShopListingWithAssociationsItemDimensionsUnit A string defining the units used to measure the dimensions of the product. Default value is null.
type ShopListingWithAssociationsItemDimensionsUnit string

// ShopListingWithAssociationsItemWeightUnit A string defining the units used to measure the weight of the product. Default value is null.
type ShopListingWithAssociationsItemWeightUnit string

// ShopListingWithAssociationsListingType An enumerated type string that indicates whether the listing is physical or a digital download.
type ShopListingWithAssociationsListingType string

// ShopListingWithAssociationsState When _updating_ a listing, this value can be either `active` or `inactive`. Note: Setting a `draft` listing to `active` will also publish the listing on etsy.com and requires that the listing have an image set. Setting a `sold_out` listing to active will update the quantity to 1 and renew the listing on etsy.com.
type ShopListingWithAssociationsState string

// ShopListingWithAssociationsWhenMade An enumerated string for the era in which the maker made the product in this listing. Helps buyers locate the listing under the Vintage heading. Requires 'is_supply' and 'who_made'.
type ShopListingWithAssociationsWhenMade string

// ShopListingWithAssociationsWhoMade An enumerated string indicating who made the product. Helps buyers locate the listing under the Handmade heading. Requires 'is_supply' and 'when_made'.
type ShopListingWithAssociationsWhoMade string

// ShopListings A set of ShopListing resources.
type ShopListings struct {
	// Count The number of ShopListing resources found.
	Count *int `json:"count,omitempty"`

	// Results The ShopListing resources found.
	Results *[]ShopListing `json:"results,omitempty"`
}

// ShopListingsWithAssociations A set of ShopListing resources with associations.
type ShopListingsWithAssociations struct {
	// Count The number of ShopListing resources found.
	Count *int `json:"count,omitempty"`

	// Results The ShopListing resources found.
	Results *[]ShopListingWithAssociations `json:"results,omitempty"`
}

// ShopProductionPartner Represents a description of a shop production partner.
type ShopProductionPartner struct {
	// Location A string representing the production partner location.
	Location *string `json:"location,omitempty"`

	// PartnerName The name or title of the production partner.
	PartnerName *string `json:"partner_name,omitempty"`

	// ProductionPartnerId The numeric ID of a production partner.
	ProductionPartnerId *int `json:"production_partner_id,omitempty"`
}

// ShopProductionPartners Represents a list of shop production partners.
type ShopProductionPartners struct {
	// Count The number of results.
	Count *int `json:"count,omitempty"`

	// Results The list of requested resources.
	Results *[]ShopProductionPartner `json:"results,omitempty"`
}

// ShopReceipt The record of a purchase from a shop. Shop receipts display monetary values using the shop's currency.
type ShopReceipt struct {
	// BuyerEmail The email address string for the buyer of the listing.
	BuyerEmail *string `json:"buyer_email"`

	// BuyerUserId The numeric ID for the [user](/documentation/reference#tag/User) making the purchase.
	BuyerUserId *int `json:"buyer_user_id,omitempty"`

	// City The city string for the recipient in the shipping address.
	City *string `json:"city,omitempty"`

	// CountryIso The ISO-3166 alpha-2 country code string for the recipient in the shipping address.
	CountryIso *string `json:"country_iso,omitempty"`

	// CreateTimestamp The receipt\'s creation time, in epoch seconds.
	CreateTimestamp *int `json:"create_timestamp,omitempty"`

	// CreatedTimestamp The receipt\'s creation time, in epoch seconds.
	CreatedTimestamp *int `json:"created_timestamp,omitempty"`

	// DiscountAmt The numeric total discounted price for the receipt when using a discount (percent or fixed) coupon. Free shipping coupons are not included in this discount amount.
	DiscountAmt *Money `json:"discount_amt,omitempty"`

	// FirstLine The first address line string for the recipient in the shipping address.
	FirstLine *string `json:"first_line,omitempty"`

	// FormattedAddress The formatted shipping address string for the recipient in the shipping address.
	FormattedAddress *string `json:"formatted_address,omitempty"`

	// GiftMessage A gift message string the buyer requests delivered with the product.
	GiftMessage *string `json:"gift_message,omitempty"`

	// GiftWrapPrice The numeric price of gift wrap for this receipt.
	GiftWrapPrice *Money `json:"gift_wrap_price,omitempty"`

	// Grandtotal A number equal to the total_price minus the coupon discount plus tax and shipping costs.
	Grandtotal *Money `json:"grandtotal,omitempty"`

	// IsGift When true, the buyer indicated this purchase is a gift.
	IsGift *bool `json:"is_gift,omitempty"`

	// IsPaid When true, buyer paid for this purchase.
	IsPaid *bool `json:"is_paid,omitempty"`

	// IsShipped When true, seller shipped the products.
	IsShipped *bool `json:"is_shipped,omitempty"`

	// MessageFromBuyer An optional message string from the buyer.
	MessageFromBuyer *string `json:"message_from_buyer"`

	// MessageFromPayment The machine-generated acknowledgement string from the payment system.
	MessageFromPayment *string `json:"message_from_payment"`

	// MessageFromSeller An optional message string from the seller.
	MessageFromSeller *string `json:"message_from_seller"`

	// Name The name string for the recipient in the shipping address.
	Name *string `json:"name,omitempty"`

	// PaymentEmail The email address string for the email address to which to send payment confirmation
	PaymentEmail *string `json:"payment_email,omitempty"`

	// PaymentMethod The payment method string identifying purchaser's payment method, which must be one of: \'cc\' (credit card), \'paypal\', \'check\', \'mo\' (money order), \'bt\' (bank transfer), \'other\', \'ideal\', \'sofort\', \'apple_pay\', \'google\', \'android_pay\', \'google_pay\', \'klarna\', \'k_pay_in_4\' (klarna), \'k_pay_in_3\' (klarna), or \'k_financing\' (klarna).
	PaymentMethod *string `json:"payment_method,omitempty"`

	// ReceiptId The numeric ID for the [receipt](/documentation/reference#tag/Shop-Receipt) associated to this transaction.
	ReceiptId *int `json:"receipt_id,omitempty"`

	// ReceiptType The numeric value for the Etsy channel that serviced the purchase: 0 for Etsy.com, 1 for a Pattern shop.
	ReceiptType *int `json:"receipt_type,omitempty"`

	// Refunds Refunds for a given receipt.
	Refunds *[]ShopRefund `json:"refunds,omitempty"`

	// SecondLine The optional second address line string for the recipient in the shipping address.
	SecondLine *string `json:"second_line"`

	// SellerEmail The email address string for the seller of the listing.
	SellerEmail *openapi_types.Email `json:"seller_email"`

	// SellerUserId The numeric ID for the [user](/documentation/reference#tag/User) (seller) fulfilling the purchase.
	SellerUserId *int `json:"seller_user_id,omitempty"`

	// Shipments A list of shipment statements for this receipt.
	Shipments *[]ShopReceiptShipment `json:"shipments,omitempty"`

	// State The state string for the recipient in the shipping address.
	State *string `json:"state"`

	// Status The current order status string. One of: `paid`, `completed`, `open`, `payment processing` or `canceled`.
	Status *ShopReceiptStatus `json:"status,omitempty"`

	// Subtotal A number equal to the total_price minus coupon discounts. Does not included tax or shipping costs.
	Subtotal *Money `json:"subtotal,omitempty"`

	// TotalPrice A number equal to the sum of the individual listings\' (price * quantity). Does not included tax or shipping costs.
	TotalPrice *Money `json:"total_price,omitempty"`

	// TotalShippingCost A number equal to the total shipping cost of the receipt.
	TotalShippingCost *Money `json:"total_shipping_cost,omitempty"`

	// TotalTaxCost The total sales tax of the receipt.
	TotalTaxCost *Money `json:"total_tax_cost,omitempty"`

	// TotalVatCost A number equal to the total value-added tax (VAT) of the receipt.
	TotalVatCost *Money `json:"total_vat_cost,omitempty"`

	// Transactions Array of transactions for the receipt.
	Transactions *[]ShopReceiptTransaction `json:"transactions,omitempty"`

	// UpdateTimestamp The time of the last update to the receipt, in epoch seconds.
	UpdateTimestamp *int `json:"update_timestamp,omitempty"`

	// UpdatedTimestamp The time of the last update to the receipt, in epoch seconds.
	UpdatedTimestamp *int `json:"updated_timestamp,omitempty"`

	// Zip The zip code string (not necessarily a number) for the recipient in the shipping address.
	Zip *string `json:"zip,omitempty"`
}

// ShopReceiptStatus The current order status string. One of: `paid`, `completed`, `open`, `payment processing` or `canceled`.
type ShopReceiptStatus string

// ShopReceiptShipment The record of one shipment event for a ShopReceipt. A receipt may have many ShopReceiptShipment records.
type ShopReceiptShipment struct {
	// CarrierName The name string for the carrier/company responsible for delivering the shipment.
	CarrierName *string `json:"carrier_name,omitempty"`

	// ReceiptShippingId The unique numeric ID of a Shop Receipt Shipment record.
	ReceiptShippingId *int `json:"receipt_shipping_id"`

	// ShipmentNotificationTimestamp The time at which Etsy notified the buyer of the shipment event, in epoch seconds.
	ShipmentNotificationTimestamp *int `json:"shipment_notification_timestamp,omitempty"`

	// TrackingCode The tracking code string provided by the carrier/company for the shipment.
	TrackingCode *string `json:"tracking_code,omitempty"`
}

// ShopReceiptTransaction A transaction object associated with a shop receipt. Etsy generates one transaction per listing purchased as recorded on the order receipt.
type ShopReceiptTransaction struct {
	// BuyerCoupon The amount of the buyer coupon that was discounted in the shop's currency.
	BuyerCoupon *float32 `json:"buyer_coupon,omitempty"`

	// BuyerUserId The numeric user ID for the buyer in this transaction.
	BuyerUserId *int `json:"buyer_user_id,omitempty"`

	// CreateTimestamp The transaction\'s creation date and time, in epoch seconds.
	CreateTimestamp *int `json:"create_timestamp,omitempty"`

	// CreatedTimestamp The transaction\'s creation date and time, in epoch seconds.
	CreatedTimestamp *int `json:"created_timestamp,omitempty"`

	// Description The description string of the [listing](/documentation/reference#tag/ShopListing) purchased in this transaction.
	Description *string `json:"description"`

	// ExpectedShipDate The date & time of the expected ship date, in epoch seconds.
	ExpectedShipDate *int `json:"expected_ship_date"`

	// FileData A string describing the files purchased in this transaction.
	FileData *string `json:"file_data,omitempty"`

	// IsDigital When true, the transaction recorded the purchase of a digital listing.
	IsDigital *bool `json:"is_digital,omitempty"`

	// ListingId The numeric ID for the [listing](/documentation/reference#tag/ShopListing) associated to this transaction.
	ListingId *int `json:"listing_id"`

	// ListingImageId The numeric ID of the primary [listing image](/documentation/reference#tag/ShopListing-Image) for this transaction.
	ListingImageId *int `json:"listing_image_id"`

	// MaxProcessingDays The maximum number of days for processing the listing.
	MaxProcessingDays *int `json:"max_processing_days"`

	// MinProcessingDays The minimum number of days for processing the listing.
	MinProcessingDays *int `json:"min_processing_days"`

	// PaidTimestamp The transaction\'s paid date and time, in epoch seconds.
	PaidTimestamp *int `json:"paid_timestamp"`

	// Price A money object representing the price recorded the transaction.
	Price *Money `json:"price,omitempty"`

	// ProductData A list of property value entries for this product. Note: parenthesis characters (`(` and `)`) are not allowed.
	ProductData *[]ListingPropertyValue `json:"product_data,omitempty"`

	// ProductId The numeric ID for a specific [product](/documentation/reference#tag/ShopListing-Product) purchased from a listing.
	ProductId *int `json:"product_id"`

	// Quantity The numeric quantity of products purchased in this transaction.
	Quantity *int `json:"quantity,omitempty"`

	// ReceiptId The numeric ID for the [receipt](/documentation/reference#tag/Shop-Receipt) associated to this transaction.
	ReceiptId *int `json:"receipt_id,omitempty"`

	// SellerUserId The numeric user ID for the seller in this transaction.
	SellerUserId *int `json:"seller_user_id,omitempty"`

	// ShippedTimestamp The transaction\'s shipping date and time, in epoch seconds.
	ShippedTimestamp *int `json:"shipped_timestamp"`

	// ShippingCost A money object representing the shipping cost for this transaction.
	ShippingCost *Money `json:"shipping_cost,omitempty"`

	// ShippingMethod Name of the selected shipping method.
	ShippingMethod *string `json:"shipping_method"`

	// ShippingProfileId The ID of the shipping profile selected for this listing.
	ShippingProfileId *int `json:"shipping_profile_id"`

	// ShippingUpgrade The name of the shipping upgrade selected for this listing. Default value is null.
	ShippingUpgrade *string `json:"shipping_upgrade"`

	// ShopCoupon The amount of the shop coupon that was discounted in the shop's currency.
	ShopCoupon *float32 `json:"shop_coupon,omitempty"`

	// Sku The SKU string for the product
	Sku *string `json:"sku"`

	// Title The title string of the [listing](/documentation/reference#tag/ShopListing) purchased in this transaction.
	Title *string `json:"title"`

	// TransactionId The unique numeric ID for a transaction.
	TransactionId *int `json:"transaction_id,omitempty"`

	// TransactionType The type string for the transaction, usually "listing".
	TransactionType *string `json:"transaction_type,omitempty"`

	// Variations Array of variations and personalizations the buyer chose.
	Variations *[]TransactionVariations `json:"variations,omitempty"`
}

// ShopReceiptTransactions A set of ShopReceiptTransaction resources
type ShopReceiptTransactions struct {
	// Count The number of ShopReceiptTransaction resources found.
	Count *int `json:"count,omitempty"`

	// Results The ShopReceiptTransaction resources found.
	Results *[]ShopReceiptTransaction `json:"results,omitempty"`
}

// ShopReceipts The receipts for a specific Shop.
type ShopReceipts struct {
	// Count The number of Shop Receipts found.
	Count *int `json:"count,omitempty"`

	// Results List of Shop Receipt resources found, with all Shop Receipt fields for each resource.
	Results *[]ShopReceipt `json:"results,omitempty"`
}

// ShopRefund The refund record for a receipt.
type ShopRefund struct {
	// Amount A number equal to the refund total.
	Amount *Money `json:"amount,omitempty"`

	// CreatedTimestamp The date & time of the refund, in epoch seconds.
	CreatedTimestamp *int `json:"created_timestamp,omitempty"`

	// NoteFromIssuer The note string created by the refund issuer.
	NoteFromIssuer *string `json:"note_from_issuer"`

	// Reason The reason string given for the refund.
	Reason *string `json:"reason"`

	// Status The status indication string for the refund.
	Status *string `json:"status"`
}

// ShopReturnPolicies Represents a shop's listing-level return policies list.
type ShopReturnPolicies struct {
	Count   *int                `json:"count,omitempty"`
	Results *[]ShopReturnPolicy `json:"results,omitempty"`
}

// ShopReturnPolicy Represents a listing-level return policy.
type ShopReturnPolicy struct {
	// AcceptsExchanges return_policy_accepts_exchanges
	AcceptsExchanges *bool `json:"accepts_exchanges,omitempty"`

	// AcceptsReturns return_policy_accepts_returns
	AcceptsReturns *bool `json:"accepts_returns,omitempty"`

	// ReturnDeadline The deadline for the Return Policy, measured in days. The value must be one of the following: [7, 14, 21, 30, 45, 60, 90].
	ReturnDeadline *int `json:"return_deadline"`

	// ReturnPolicyId The numeric ID of the [Return Policy](/documentation/reference#operation/getShopReturnPolicies).
	ReturnPolicyId *int `json:"return_policy_id,omitempty"`

	// ShopId The unique positive non-zero numeric ID for an Etsy Shop.
	ShopId *int `json:"shop_id,omitempty"`
}

// ShopSection A section within a shop, into which a user can sort listings.
type ShopSection struct {
	// ActiveListingCount The number of active listings in one section of a specific Etsy shop.
	ActiveListingCount *int `json:"active_listing_count,omitempty"`

	// Rank The positive non-zero numeric position of this section in the section display order for a shop, with rank 1 sections appearing first.
	Rank *int `json:"rank,omitempty"`

	// ShopSectionId The numeric ID of a section in a specific Etsy shop.
	ShopSectionId *int `json:"shop_section_id,omitempty"`

	// Title The title string for a shop section.
	Title *string `json:"title,omitempty"`

	// UserId The numeric ID of the [user](/documentation/reference#tag/User) who owns this shop section.
	UserId *int `json:"user_id,omitempty"`
}

// ShopSections All the sections in a sprecific Shop.
type ShopSections struct {
	// Count The number of results.
	Count *int `json:"count,omitempty"`

	// Results The list of requested resources.
	Results *[]ShopSection `json:"results,omitempty"`
}

// ShopShippingProfile Represents a profile used to set a listing's shipping information. Please note that it's not possible to create calculated shipping templates via the API. However, you can associate calculated shipping profiles created from Shop Manager with listings using the API.
type ShopShippingProfile struct {
	// DomesticHandlingFee The domestic handling fee added to buyer's shipping total - only available for calculated shipping profiles.
	DomesticHandlingFee *float32 `json:"domestic_handling_fee,omitempty"`

	// InternationalHandlingFee The international handling fee added to buyer's shipping total - only available for calculated shipping profiles.
	InternationalHandlingFee *float32 `json:"international_handling_fee,omitempty"`

	// IsDeleted When true, someone deleted this shipping profile.
	IsDeleted *bool `json:"is_deleted,omitempty"`

	// MaxProcessingDays The maximum number of days for processing the listing.
	MaxProcessingDays *int `json:"max_processing_days"`

	// MinProcessingDays The minimum number of days for processing the listing.
	MinProcessingDays *int `json:"min_processing_days"`

	// OriginCountryIso The ISO code of the country from which the listing ships.
	OriginCountryIso *string `json:"origin_country_iso,omitempty"`

	// OriginPostalCode The postal code string (not necessarily a number) for the location from which the listing ships. Required if the `origin_country_iso` is `US` or `CA`.
	OriginPostalCode *string `json:"origin_postal_code"`

	// ProcessingDaysDisplayLabel Translated display label string for processing days.
	ProcessingDaysDisplayLabel *string                         `json:"processing_days_display_label,omitempty"`
	ProfileType                *ShopShippingProfileProfileType `json:"profile_type,omitempty"`

	// ShippingProfileDestinations A list of [shipping profile destinations](/documentation/reference/#operation/createShopShippingProfileDestination) available for this shipping profile.
	ShippingProfileDestinations *[]ShopShippingProfileDestination `json:"shipping_profile_destinations,omitempty"`

	// ShippingProfileId The numeric ID of the shipping profile.
	ShippingProfileId *int `json:"shipping_profile_id,omitempty"`

	// ShippingProfileUpgrades A list of [shipping profile upgrades](/documentation/reference/#operation/createShopShippingProfileUpgrade) available for this shipping profile.
	ShippingProfileUpgrades *[]ShopShippingProfileUpgrade `json:"shipping_profile_upgrades,omitempty"`

	// Title The name string of this shipping profile.
	Title *string `json:"title"`

	// UserId The numeric ID for the [user](/documentation/reference#tag/User) who owns the shipping profile.
	UserId *int `json:"user_id,omitempty"`
}

// ShopShippingProfileProfileType defines model for ShopShippingProfile.ProfileType.
type ShopShippingProfileProfileType string

// ShopShippingProfileDestination Represents a shipping destination assigned to a shipping profile.
type ShopShippingProfileDestination struct {
	// DestinationCountryIso The ISO code of the country to which the listing ships. If null, request sets destination to destination_region. Required if destination_region is null or not provided.
	DestinationCountryIso *string `json:"destination_country_iso,omitempty"`

	// DestinationRegion The code of the region to which the listing ships. A region represents a set of countries. Supported regions are Europe Union and Non-Europe Union (countries in Europe not in EU). If \`none\`, request sets destination to destination_country_iso. Required if destination_country_iso is null or not provided.
	DestinationRegion *ShopShippingProfileDestinationDestinationRegion `json:"destination_region,omitempty"`

	// MailClass The unique ID string of a shipping carrier's mail class, which is used to calculate an estimated delivery date. **Required with `shipping_carrier_id`** if `min_delivery_days` and `max_delivery_days` are null.
	MailClass *string `json:"mail_class"`

	// MaxDeliveryDays The maximum number of business days a buyer can expect to wait to receive their purchased item once it has shipped. **Required with `min_delivery_days`** if `mail_class` is null.
	MaxDeliveryDays *int `json:"max_delivery_days"`

	// MinDeliveryDays The minimum number of business days a buyer can expect to wait to receive their purchased item once it has shipped. **Required with `max_delivery_days`** if `mail_class` is null.
	MinDeliveryDays *int `json:"min_delivery_days"`

	// OriginCountryIso The ISO code of the country from which the listing ships.
	OriginCountryIso *string `json:"origin_country_iso,omitempty"`

	// PrimaryCost The cost of shipping to this country/region alone, measured in the store's default currency.
	PrimaryCost *Money `json:"primary_cost,omitempty"`

	// SecondaryCost The cost of shipping to this country/region with another item, measured in the store's default currency.
	SecondaryCost *Money `json:"secondary_cost,omitempty"`

	// ShippingCarrierId The unique ID of a supported shipping carrier, which is used to calculate an Estimated Delivery Date. **Required with `mail_class`** if `min_delivery_days` and `max_delivery_days` are null.
	ShippingCarrierId *int `json:"shipping_carrier_id"`

	// ShippingProfileDestinationId The numeric ID of the shipping profile destination in the [shipping profile](/documentation/reference#tag/Shop-ShippingProfile) associated with the listing.
	ShippingProfileDestinationId *int `json:"shipping_profile_destination_id,omitempty"`

	// ShippingProfileId The numeric ID of the shipping profile.
	ShippingProfileId *int `json:"shipping_profile_id,omitempty"`
}

// ShopShippingProfileDestinationDestinationRegion The code of the region to which the listing ships. A region represents a set of countries. Supported regions are Europe Union and Non-Europe Union (countries in Europe not in EU). If \`none\`, request sets destination to destination_country_iso. Required if destination_country_iso is null or not provided.
type ShopShippingProfileDestinationDestinationRegion string

// ShopShippingProfileDestinations Represents a list of shipping destination objects.
type ShopShippingProfileDestinations struct {
	// Count The number of results.
	Count *int `json:"count,omitempty"`

	// Results The list of requested resources.
	Results *[]ShopShippingProfileDestination `json:"results,omitempty"`
}

// ShopShippingProfileUpgrade A representation of a shipping profile upgrade option.
type ShopShippingProfileUpgrade struct {
	// Language The IETF language tag for the language of the shipping profile. Ex: `de`, `en`, `es`, `fr`, `it`, `ja`, `nl`, `pl`, `pt`
	Language *string `json:"language,omitempty"`

	// MailClass The unique ID string of a shipping carrier's mail class, which is used to calculate an estimated delivery date. **Required with `shipping_carrier_id`** if `min_delivery_days` and `max_delivery_days` are null.
	MailClass *string `json:"mail_class"`

	// MaxDeliveryDays The maximum number of business days a buyer can expect to wait to receive their purchased item once it has shipped. **Required with `min_delivery_days`** if `mail_class` is null.
	MaxDeliveryDays *int `json:"max_delivery_days"`

	// MinDeliveryDays The minimum number of business days a buyer can expect to wait to receive their purchased item once it has shipped. **Required with `max_delivery_days`** if `mail_class` is null.
	MinDeliveryDays *int `json:"min_delivery_days"`

	// Price Additional cost of adding the shipping upgrade.
	Price *Money `json:"price,omitempty"`

	// Rank The positive non-zero numeric position in the images displayed in a listing, with rank 1 images appearing in the left-most position in a listing.
	Rank *int `json:"rank,omitempty"`

	// SecondaryPrice Additional cost of adding the shipping upgrade for each additional item.
	SecondaryPrice *Money `json:"secondary_price,omitempty"`

	// ShippingCarrierId The unique ID of a supported shipping carrier, which is used to calculate an Estimated Delivery Date. **Required with `mail_class`** if `min_delivery_days` and `max_delivery_days` are null.
	ShippingCarrierId *int `json:"shipping_carrier_id"`

	// ShippingProfileId The numeric ID of the base shipping profile.
	ShippingProfileId *int `json:"shipping_profile_id,omitempty"`

	// Type The type of the shipping upgrade. Domestic (0) or international (1).
	Type *ShopShippingProfileUpgradeType `json:"type,omitempty"`

	// UpgradeId The numeric ID that is associated with a shipping upgrade
	UpgradeId *int `json:"upgrade_id,omitempty"`

	// UpgradeName Name for the shipping upgrade shown to shoppers at checkout, e.g. USPS Priority.
	UpgradeName *string `json:"upgrade_name,omitempty"`
}

// ShopShippingProfileUpgradeType The type of the shipping upgrade. Domestic (0) or international (1).
type ShopShippingProfileUpgradeType string

// ShopShippingProfileUpgrades A list of shipping upgrade options.
type ShopShippingProfileUpgrades struct {
	// Count The number of results.
	Count *int `json:"count,omitempty"`

	// Results The list of requested resources.
	Results *[]ShopShippingProfileUpgrade `json:"results,omitempty"`
}

// ShopShippingProfiles Represents several ShopShippingProfiles.
type ShopShippingProfiles struct {
	Count   *int                   `json:"count,omitempty"`
	Results *[]ShopShippingProfile `json:"results,omitempty"`
}

// Shops A set of Shop records.
type Shops struct {
	// Count The total number of Shops
	Count *int `json:"count,omitempty"`

	// Results The Shop resources.
	Results *[]Shop `json:"results,omitempty"`
}

// TaxonomyNodeProperties A list of product property definitions.
type TaxonomyNodeProperties struct {
	// Count The number of results.
	Count *int `json:"count,omitempty"`

	// Results The list of requested resources.
	Results *[]TaxonomyNodeProperty `json:"results,omitempty"`
}

// TaxonomyNodeProperty A product property definition.
type TaxonomyNodeProperty struct {
	// DisplayName The human-readable product property name string.
	DisplayName *string `json:"display_name,omitempty"`

	// IsMultivalued When true, you can assign multiple property values to this property
	IsMultivalued *bool `json:"is_multivalued,omitempty"`

	// IsRequired When true, listings assigned eligible taxonomy IDs require this property.
	IsRequired *bool `json:"is_required,omitempty"`

	// MaxValuesAllowed When true, you can assign multiple property values to this property
	MaxValuesAllowed *int `json:"max_values_allowed"`

	// Name The name string for this taxonomy node.
	Name *string `json:"name,omitempty"`

	// PossibleValues A list of supported property value strings for this property.
	PossibleValues *[]TaxonomyPropertyValue `json:"possible_values,omitempty"`

	// PropertyId The unique numeric ID of this product property.
	PropertyId *int `json:"property_id,omitempty"`

	// Scales A list of available scales.
	Scales *[]TaxonomyPropertyScale `json:"scales,omitempty"`

	// SelectedValues A list of property value strings automatically and always selected for the given property.
	SelectedValues *[]TaxonomyPropertyValue `json:"selected_values,omitempty"`

	// SupportsAttributes When true, you can use this property in listing attributes.
	SupportsAttributes *bool `json:"supports_attributes,omitempty"`

	// SupportsVariations When true, you can use this property in listing variations.
	SupportsVariations *bool `json:"supports_variations,omitempty"`
}

// TaxonomyPropertyScale A scale defnining the assignable increments for the property values available to specific product properties.
type TaxonomyPropertyScale struct {
	// Description The description string for a scale.
	Description *string `json:"description,omitempty"`

	// DisplayName The name string for a scale.
	DisplayName *string `json:"display_name,omitempty"`

	// ScaleId The unique numeric ID of a scale.
	ScaleId *int `json:"scale_id,omitempty"`
}

// TaxonomyPropertyValue A property value for a specific product property, which may also employ a specific scale.
type TaxonomyPropertyValue struct {
	// EqualTo A list of numeric property value IDs this property value is equal to (if any).
	EqualTo *[]int `json:"equal_to,omitempty"`

	// Name The name string of this property value.
	Name *string `json:"name,omitempty"`

	// ScaleId The numeric scale ID of the scale to which this property value belongs.
	ScaleId *int `json:"scale_id"`

	// ValueId The numeric ID of this property value.
	ValueId *int `json:"value_id"`
}

// TransactionReview A transaction review record left by a User.
type TransactionReview struct {
	// BuyerUserId The numeric ID of the user who was the buyer in this transaction. Note: This field may be absent, depending on the buyer's privacy settings.
	BuyerUserId *int `json:"buyer_user_id"`

	// CreateTimestamp The date and time the TransactionReview was created in epoch seconds.
	CreateTimestamp *int `json:"create_timestamp,omitempty"`

	// CreatedTimestamp The date and time the TransactionReview was created in epoch seconds.
	CreatedTimestamp *int `json:"created_timestamp,omitempty"`

	// ImageUrlFullxfull The url to a photo provided with the feedback, dimensions fullxfull. Note: This field may be absent, depending on the buyer's privacy settings.
	ImageUrlFullxfull *string `json:"image_url_fullxfull"`

	// Language The language of the TransactionReview
	Language *string `json:"language,omitempty"`

	// ListingId The ID of the ShopListing that the TransactionReview belongs to.
	ListingId *int `json:"listing_id,omitempty"`

	// Rating Rating value on scale from 1 to 5
	Rating *int `json:"rating,omitempty"`

	// Review A message left by the author, explaining the feedback, if provided.
	Review *string `json:"review,omitempty"`

	// ShopId The shop's numeric ID.
	ShopId *int `json:"shop_id,omitempty"`

	// TransactionId The ID of the ShopReceipt Transaction that the TransactionReview belongs to.
	TransactionId *int `json:"transaction_id,omitempty"`

	// UpdateTimestamp The date and time the TransactionReview was updated in epoch seconds.
	UpdateTimestamp *int `json:"update_timestamp,omitempty"`

	// UpdatedTimestamp The date and time the TransactionReview was updated in epoch seconds.
	UpdatedTimestamp *int `json:"updated_timestamp,omitempty"`
}

// TransactionReviews A set of transaction review records left by Users.
type TransactionReviews struct {
	// Count The number of TransactionReview resources found.
	Count *int `json:"count,omitempty"`

	// Results The TransactionReview resources found.
	Results *[]TransactionReview `json:"results,omitempty"`
}

// TransactionVariations A list of variations chosen by the buyer during checkout.
type TransactionVariations struct {
	// FormattedName Formatted name of the variation.
	FormattedName *string `json:"formatted_name,omitempty"`

	// FormattedValue Value of the variation entered by the buyer.
	FormattedValue *string `json:"formatted_value,omitempty"`

	// PropertyId The variation property ID.
	PropertyId *int `json:"property_id,omitempty"`

	// ValueId The ID of the variation value selected.
	ValueId *int `json:"value_id"`
}

// User Represents a single user of the site
type User struct {
	// FirstName The user\'s first name.
	FirstName *string `json:"first_name"`

	// ImageUrl75x75 The user\'s avatar URL.
	ImageUrl75x75 *string `json:"image_url_75x75"`

	// LastName The user\'s last name.
	LastName *string `json:"last_name"`

	// PrimaryEmail An email address string for the user\'s primary email address.
	PrimaryEmail *openapi_types.Email `json:"primary_email"`

	// UserId The numeric ID of a user. This number is also a valid shop ID for the user\'s shop.
	UserId *int `json:"user_id,omitempty"`
}

// UserAddress Represents a user's address.
type UserAddress struct {
	// City The city field of the user's address.
	City *string `json:"city,omitempty"`

	// CountryName The name of the user's country.
	CountryName *string `json:"country_name"`

	// FirstLine The first line of the user's address.
	FirstLine *string `json:"first_line,omitempty"`

	// IsDefaultShippingAddress Is this the user's default shipping address.
	IsDefaultShippingAddress *bool `json:"is_default_shipping_address,omitempty"`

	// IsoCountryCode The ISO code of the country in this address.
	IsoCountryCode *string `json:"iso_country_code"`

	// Name The user's name for this address.
	Name *string `json:"name,omitempty"`

	// SecondLine The second line of the user's address.
	SecondLine *string `json:"second_line"`

	// State The state field of the user's address.
	State *string `json:"state"`

	// UserAddressId The numeric ID of the user's address.
	UserAddressId *int `json:"user_address_id,omitempty"`

	// UserId The user's numeric ID.
	UserId *int `json:"user_id,omitempty"`

	// Zip The zip code field of the user's address.
	Zip *string `json:"zip,omitempty"`
}

// UserAddresses Represents several UserAddress records.
type UserAddresses struct {
	// Count The number of UserAddress records being returned.
	Count *int `json:"count,omitempty"`

	// Results An array of UserAddress resources.
	Results *[]UserAddress `json:"results,omitempty"`
}

// FindAllListingsActiveParams defines parameters for FindAllListingsActive.
type FindAllListingsActiveParams struct {
	// Limit The maximum number of results to return.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The number of records to skip before selecting the first result.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Keywords Search term or phrase that must appear in all results.
	Keywords *string `form:"keywords,omitempty" json:"keywords,omitempty"`

	// SortOn The value to sort a search result of listings on. NOTES: a) `sort_on` only works when combined with one of the search options (keywords, region, etc.). b) when using `score` the returned results will always be in _descending_ order, regardless of the `sort_order` parameter.
	SortOn *FindAllListingsActiveParamsSortOn `form:"sort_on,omitempty" json:"sort_on,omitempty"`

	// SortOrder The ascending(up) or descending(down) order to sort listings by. NOTE: sort_order only works when combined with one of the search options (keywords, region, etc.).
	SortOrder *FindAllListingsActiveParamsSortOrder `form:"sort_order,omitempty" json:"sort_order,omitempty"`

	// MinPrice The minimum price of listings to be returned by a search result.
	MinPrice *float32 `form:"min_price,omitempty" json:"min_price,omitempty"`

	// MaxPrice The maximum price of listings to be returned by a search result.
	MaxPrice *float32 `form:"max_price,omitempty" json:"max_price,omitempty"`

	// TaxonomyId The numerical taxonomy ID of the listing. See [SellerTaxonomy](/documentation/reference#tag/SellerTaxonomy) and [BuyerTaxonomy](/documentation/reference#tag/BuyerTaxonomy) for more information.
	TaxonomyId *int `form:"taxonomy_id,omitempty" json:"taxonomy_id,omitempty"`

	// ShopLocation Filters by shop location. If location cannot be parsed, Etsy responds with an error.
	ShopLocation *string `form:"shop_location,omitempty" json:"shop_location,omitempty"`
}

// FindAllListingsActiveParamsSortOn defines parameters for FindAllListingsActive.
type FindAllListingsActiveParamsSortOn string

// FindAllListingsActiveParamsSortOrder defines parameters for FindAllListingsActive.
type FindAllListingsActiveParamsSortOrder string

// GetListingsByListingIdsParams defines parameters for GetListingsByListingIds.
type GetListingsByListingIdsParams struct {
	// ListingIds The list of numeric IDS for the listings in a specific Etsy shop.
	ListingIds []int `form:"listing_ids" json:"listing_ids"`

	// Includes An enumerated string that attaches a valid association. Acceptable inputs are 'Shipping', 'Shop', 'Images', 'User', 'Translations' and 'Inventory'.
	Includes *[]GetListingsByListingIdsParamsIncludes `form:"includes,omitempty" json:"includes,omitempty"`
}

// GetListingsByListingIdsParamsIncludes defines parameters for GetListingsByListingIds.
type GetListingsByListingIdsParamsIncludes string

// GetListingParams defines parameters for GetListing.
type GetListingParams struct {
	// Includes An enumerated string that attaches a valid association. Acceptable inputs are 'Shipping', 'Shop', 'Images', 'User', 'Translations' and 'Inventory'.
	Includes *[]GetListingParamsIncludes `form:"includes,omitempty" json:"includes,omitempty"`

	// Language The IETF language tag for the language of this translation. Ex: `de`, `en`, `es`, `fr`, `it`, `ja`, `nl`, `pl`, `pt`.
	Language *string `form:"language,omitempty" json:"language,omitempty"`
}

// GetListingParamsIncludes defines parameters for GetListing.
type GetListingParamsIncludes string

// GetListingInventoryParams defines parameters for GetListingInventory.
type GetListingInventoryParams struct {
	// ShowDeleted A boolean value for inventory whether to include deleted products and their offerings. Default value is false.
	ShowDeleted *bool `form:"show_deleted,omitempty" json:"show_deleted,omitempty"`

	// Includes An enumerated string that attaches a valid association. Default value is null.
	Includes *GetListingInventoryParamsIncludes `form:"includes,omitempty" json:"includes,omitempty"`
}

// GetListingInventoryParamsIncludes defines parameters for GetListingInventory.
type GetListingInventoryParamsIncludes string

// UpdateListingInventoryJSONBody defines parameters for UpdateListingInventory.
type UpdateListingInventoryJSONBody struct {
	// PriceOnProperty An array of unique [listing property](/documentation/reference#operation/getListingProperties) ID integers for the properties that change product prices, if any. For example, if you charge specific prices for different sized products in the same listing, then this array contains the property ID for size.
	PriceOnProperty *[]int `json:"price_on_property,omitempty"`

	// Products A JSON array of products available in a listing, even if only one product. All field names in the JSON blobs are lowercase.
	Products []struct {
		// Offerings A list of product offering entries for this product.
		Offerings []struct {
			// IsEnabled True if the offering is shown to buyers
			IsEnabled bool `json:"is_enabled"`

			// Price The price of the product.
			Price float32 `json:"price"`

			// Quantity How many of this product are available?
			Quantity int `json:"quantity"`
		} `json:"offerings"`

		// PropertyValues A list of property value entries for this product. Note: parenthesis characters (`(` and `)`) are not allowed.
		PropertyValues *[]struct {
			// PropertyId The unique ID of an Etsy [listing property](/documentation/reference#operation/getListingProperties).
			PropertyId int `json:"property_id"`

			// PropertyName The name of the property, in the requested locale language.
			PropertyName *string `json:"property_name,omitempty"`

			// ScaleId The numeric ID of a single Etsy.com measurement scale. For example, for shoe size, there are three `scale_id`s available - `UK`, `US/Canada`, and `EU`, where `US/Canada` has `scale_id` 19.
			ScaleId *int `json:"scale_id"`

			// ValueIds An array of unique IDs of multiple Etsy [listing property](/documentation/reference#operation/getListingProperties) values. For example, if your listing offers different sizes of a product, then the value ID list contains value IDs for each size.
			ValueIds []int `json:"value_ids"`

			// Values A list of property value entries for this product. Note: parenthesis characters (`(` and `)`) are not allowed.
			Values []string `json:"values"`
		} `json:"property_values,omitempty"`

		// Sku The SKU string for the product
		Sku *string `json:"sku"`
	} `json:"products"`

	// QuantityOnProperty An array of unique [listing property](/documentation/reference#operation/getListingProperties) ID integers for the properties that change the quantity of the products, if any. For example, if you stock specific quantities of different colored products in the same listing, then this array contains the property ID for color.
	QuantityOnProperty *[]int `json:"quantity_on_property,omitempty"`

	// SkuOnProperty An array of unique [listing property](/documentation/reference#operation/getListingProperties) ID integers for the properties that change the product SKU, if any. For example, if you use specific skus for different colored products in the same listing, then this array contains the property ID for color.
	SkuOnProperty *[]int `json:"sku_on_property,omitempty"`
}

// GetReviewsByListingParams defines parameters for GetReviewsByListing.
type GetReviewsByListingParams struct {
	// Limit The maximum number of results to return.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The number of records to skip before selecting the first result.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// MinCreated The earliest unix timestamp for when a record was created.
	MinCreated *int `form:"min_created,omitempty" json:"min_created,omitempty"`

	// MaxCreated The latest unix timestamp for when a record was created.
	MaxCreated *int `form:"max_created,omitempty" json:"max_created,omitempty"`
}

// TokenScopesFormdataBody defines parameters for TokenScopes.
type TokenScopesFormdataBody struct {
	Token string `form:"token" json:"token"`
}

// GetShippingCarriersParams defines parameters for GetShippingCarriers.
type GetShippingCarriersParams struct {
	// OriginCountryIso The ISO code of the country from which the listing ships.
	OriginCountryIso string `form:"origin_country_iso" json:"origin_country_iso"`
}

// FindShopsParams defines parameters for FindShops.
type FindShopsParams struct {
	// ShopName The shop's name string.
	ShopName string `form:"shop_name" json:"shop_name"`

	// Limit The maximum number of results to return.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The number of records to skip before selecting the first result.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// UpdateShopFormdataBody defines parameters for UpdateShop.
type UpdateShopFormdataBody struct {
	// Announcement An announcement string to buyers that displays on the shop's homepage.
	Announcement *string `form:"announcement,omitempty" json:"announcement,omitempty"`

	// DigitalSaleMessage A message string sent to users who purchase a digital item from this shop.
	DigitalSaleMessage *string `form:"digital_sale_message,omitempty" json:"digital_sale_message,omitempty"`

	// PolicyAdditional The shop's additional policies string (may be blank).
	PolicyAdditional *string `form:"policy_additional,omitempty" json:"policy_additional,omitempty"`

	// SaleMessage A message string sent to users who complete a purchase from this shop.
	SaleMessage *string `form:"sale_message,omitempty" json:"sale_message,omitempty"`

	// Title A brief heading string for the shop's main page.
	Title *string `form:"title,omitempty" json:"title,omitempty"`
}

// GetListingsByShopParams defines parameters for GetListingsByShop.
type GetListingsByShopParams struct {
	// State When _updating_ a listing, this value can be either `active` or `inactive`. Note: Setting a `draft` listing to `active` will also publish the listing on etsy.com and requires that the listing have an image set. Setting a `sold_out` listing to active will update the quantity to 1 and renew the listing on etsy.com.
	State *GetListingsByShopParamsState `form:"state,omitempty" json:"state,omitempty"`

	// Limit The maximum number of results to return.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The number of records to skip before selecting the first result.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// SortOn The value to sort a search result of listings on. NOTES: a) `sort_on` only works when combined with one of the search options (keywords, region, etc.). b) when using `score` the returned results will always be in _descending_ order, regardless of the `sort_order` parameter.
	SortOn *GetListingsByShopParamsSortOn `form:"sort_on,omitempty" json:"sort_on,omitempty"`

	// SortOrder The ascending(up) or descending(down) order to sort listings by. NOTE: sort_order only works when combined with one of the search options (keywords, region, etc.).
	SortOrder *GetListingsByShopParamsSortOrder `form:"sort_order,omitempty" json:"sort_order,omitempty"`

	// Includes An enumerated string that attaches a valid association. Acceptable inputs are 'Shipping', 'Shop', 'Images', 'User', 'Translations' and 'Inventory'.
	Includes *[]GetListingsByShopParamsIncludes `form:"includes,omitempty" json:"includes,omitempty"`
}

// GetListingsByShopParamsState defines parameters for GetListingsByShop.
type GetListingsByShopParamsState string

// GetListingsByShopParamsSortOn defines parameters for GetListingsByShop.
type GetListingsByShopParamsSortOn string

// GetListingsByShopParamsSortOrder defines parameters for GetListingsByShop.
type GetListingsByShopParamsSortOrder string

// GetListingsByShopParamsIncludes defines parameters for GetListingsByShop.
type GetListingsByShopParamsIncludes string

// CreateDraftListingFormdataBody defines parameters for CreateDraftListing.
type CreateDraftListingFormdataBody struct {
	// Description A description string of the product for sale in the listing.
	Description string `form:"description" json:"description"`

	// ImageIds An array of numeric image IDs of the images in a listing, which can include up to 10 images.
	ImageIds *[]int `form:"image_ids" json:"image_ids"`

	// IsCustomizable When true, a buyer may contact the seller for a customized order. The default value is true when a shop accepts custom orders. Does not apply to shops that do not accept custom orders.
	IsCustomizable *bool `form:"is_customizable,omitempty" json:"is_customizable,omitempty"`

	// IsPersonalizable When true, this listing is personalizable. The default value is null.
	IsPersonalizable *bool `form:"is_personalizable,omitempty" json:"is_personalizable,omitempty"`

	// IsSupply When true, tags the listing as a supply product, else indicates that it's a finished product. Helps buyers locate the listing under the Supplies heading. Requires 'who_made' and 'when_made'.
	IsSupply *bool `form:"is_supply,omitempty" json:"is_supply,omitempty"`

	// IsTaxable When true, applicable [shop](/documentation/reference#tag/Shop) tax rates apply to this listing at checkout.
	IsTaxable *bool `form:"is_taxable,omitempty" json:"is_taxable,omitempty"`

	// ItemDimensionsUnit A string defining the units used to measure the dimensions of the product. Default value is null.
	ItemDimensionsUnit *CreateDraftListingFormdataBodyItemDimensionsUnit `form:"item_dimensions_unit" json:"item_dimensions_unit"`

	// ItemHeight The numeric height of the product measured in units set in 'item_dimensions_unit'. Default value is null. If set, the value must be greater than 0.
	ItemHeight *float32 `form:"item_height" json:"item_height"`

	// ItemLength The numeric length of the product measured in units set in 'item_dimensions_unit'. Default value is null. If set, the value must be greater than 0.
	ItemLength *float32 `form:"item_length" json:"item_length"`

	// ItemWeight The numeric weight of the product measured in units set in 'item_weight_unit'. Default value is null. If set, the value must be greater than 0.
	ItemWeight *float32 `form:"item_weight" json:"item_weight"`

	// ItemWeightUnit A string defining the units used to measure the weight of the product. Default value is null.
	ItemWeightUnit *CreateDraftListingFormdataBodyItemWeightUnit `form:"item_weight_unit" json:"item_weight_unit"`

	// ItemWidth The numeric width of the product measured in units set in 'item_dimensions_unit'. Default value is null. If set, the value must be greater than 0.
	ItemWidth *float32 `form:"item_width" json:"item_width"`

	// Materials A list of material strings for materials used in the product. Valid materials strings contain only letters, numbers, and whitespace characters. (regex: /[^\p{L}\p{Nd}\p{Zs}]/u) Default value is null.
	Materials *[]string `form:"materials" json:"materials"`

	// PersonalizationCharCountMax This is an integer value representing the maximum length for the personalization message entered by the buyer. Will only change if is_personalizable is 'true'.
	PersonalizationCharCountMax *int `form:"personalization_char_count_max,omitempty" json:"personalization_char_count_max,omitempty"`

	// PersonalizationInstructions A string representing instructions for the buyer to enter the personalization. Will only change if is_personalizable is 'true'.
	PersonalizationInstructions *string `form:"personalization_instructions,omitempty" json:"personalization_instructions,omitempty"`

	// PersonalizationIsRequired When true, this listing requires personalization. The default value is null. Will only change if is_personalizable is 'true'.
	PersonalizationIsRequired *bool `form:"personalization_is_required,omitempty" json:"personalization_is_required,omitempty"`

	// Price The positive non-zero price of the product. (Sold product listings are private) Note: The price is the minimum possible price. The [`getListingInventory`](/documentation/reference/#operation/getListingInventory) method requests exact prices for available offerings.
	Price float32 `form:"price" json:"price"`

	// ProcessingMax The maximum number of days required to process this listing. Default value is null.
	ProcessingMax *int `form:"processing_max" json:"processing_max"`

	// ProcessingMin The minimum number of days required to process this listing. Default value is null.
	ProcessingMin *int `form:"processing_min" json:"processing_min"`

	// ProductionPartnerIds An array of unique IDs of production partner ids.
	ProductionPartnerIds *[]int `form:"production_partner_ids" json:"production_partner_ids"`

	// Quantity The positive non-zero number of products available for purchase in the listing. Note: The listing quantity is the sum of available offering quantities. You can request the quantities for individual offerings from the ListingInventory resource using the [getListingInventory](/documentation/reference#operation/getListingInventory) endpoint.
	Quantity int `form:"quantity" json:"quantity"`

	// ReturnPolicyId The numeric ID of the [Return Policy](/documentation/reference#operation/getShopReturnPolicies).
	ReturnPolicyId *int `form:"return_policy_id" json:"return_policy_id"`

	// ShippingProfileId The numeric ID of the [shipping profile](/documentation/reference#operation/getShopShippingProfile) associated with the listing. Required when listing type is `physical`.
	ShippingProfileId *int `form:"shipping_profile_id" json:"shipping_profile_id"`

	// ShopSectionId The numeric ID of the [shop section](/documentation/reference#tag/Shop-Section) for this listing. Default value is null.
	ShopSectionId *int `form:"shop_section_id" json:"shop_section_id"`

	// ShouldAutoRenew When true, renews a listing for four months upon expiration.
	ShouldAutoRenew *bool `form:"should_auto_renew,omitempty" json:"should_auto_renew,omitempty"`

	// Styles An array of style strings for this listing, each of which is free-form text string such as "Formal", or "Steampunk". When creating or updating a listing, the listing may have up to two styles. Valid style strings contain only letters, numbers, and whitespace characters. (regex: /[^\p{L}\p{Nd}\p{Zs}]/u) Default value is null.
	Styles *[]string `form:"styles" json:"styles"`

	// Tags A comma-separated list of tag strings for the listing. When creating or updating a listing, valid tag strings contain only letters, numbers, whitespace characters, -, ', ™, ©, and ®. (regex: /[^\p{L}\p{Nd}\p{Zs}\-'™©®]/u) Default value is null.
	Tags *[]string `form:"tags" json:"tags"`

	// TaxonomyId The numerical taxonomy ID of the listing. See [SellerTaxonomy](/documentation/reference#tag/SellerTaxonomy) and [BuyerTaxonomy](/documentation/reference#tag/BuyerTaxonomy) for more information.
	TaxonomyId int `form:"taxonomy_id" json:"taxonomy_id"`

	// Title The listing's title string. When creating or updating a listing, valid title strings contain only letters, numbers, punctuation marks, mathematical symbols, whitespace characters, ™, ©, and ®. (regex: /[^\p{L}\p{Nd}\p{P}\p{Sm}\p{Zs}™©®]/u) You can only use the %, :, & and + characters once each.
	Title string `form:"title" json:"title"`

	// Type An enumerated type string that indicates whether the listing is physical or a digital download.
	Type *CreateDraftListingFormdataBodyType `form:"type,omitempty" json:"type,omitempty"`

	// WhenMade An enumerated string for the era in which the maker made the product in this listing. Helps buyers locate the listing under the Vintage heading. Requires 'is_supply' and 'who_made'.
	WhenMade CreateDraftListingFormdataBodyWhenMade `form:"when_made" json:"when_made"`

	// WhoMade An enumerated string indicating who made the product. Helps buyers locate the listing under the Handmade heading. Requires 'is_supply' and 'when_made'.
	WhoMade CreateDraftListingFormdataBodyWhoMade `form:"who_made" json:"who_made"`
}

// CreateDraftListingFormdataBodyItemDimensionsUnit defines parameters for CreateDraftListing.
type CreateDraftListingFormdataBodyItemDimensionsUnit string

// CreateDraftListingFormdataBodyItemWeightUnit defines parameters for CreateDraftListing.
type CreateDraftListingFormdataBodyItemWeightUnit string

// CreateDraftListingFormdataBodyType defines parameters for CreateDraftListing.
type CreateDraftListingFormdataBodyType string

// CreateDraftListingFormdataBodyWhenMade defines parameters for CreateDraftListing.
type CreateDraftListingFormdataBodyWhenMade string

// CreateDraftListingFormdataBodyWhoMade defines parameters for CreateDraftListing.
type CreateDraftListingFormdataBodyWhoMade string

// FindAllActiveListingsByShopParams defines parameters for FindAllActiveListingsByShop.
type FindAllActiveListingsByShopParams struct {
	// Limit The maximum number of results to return.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// SortOn The value to sort a search result of listings on. NOTES: a) `sort_on` only works when combined with one of the search options (keywords, region, etc.). b) when using `score` the returned results will always be in _descending_ order, regardless of the `sort_order` parameter.
	SortOn *FindAllActiveListingsByShopParamsSortOn `form:"sort_on,omitempty" json:"sort_on,omitempty"`

	// SortOrder The ascending(up) or descending(down) order to sort listings by. NOTE: sort_order only works when combined with one of the search options (keywords, region, etc.).
	SortOrder *FindAllActiveListingsByShopParamsSortOrder `form:"sort_order,omitempty" json:"sort_order,omitempty"`

	// Offset The number of records to skip before selecting the first result.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Keywords Search term or phrase that must appear in all results.
	Keywords *string `form:"keywords,omitempty" json:"keywords,omitempty"`
}

// FindAllActiveListingsByShopParamsSortOn defines parameters for FindAllActiveListingsByShop.
type FindAllActiveListingsByShopParamsSortOn string

// FindAllActiveListingsByShopParamsSortOrder defines parameters for FindAllActiveListingsByShop.
type FindAllActiveListingsByShopParamsSortOrder string

// GetFeaturedListingsByShopParams defines parameters for GetFeaturedListingsByShop.
type GetFeaturedListingsByShopParams struct {
	// Limit The maximum number of results to return.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The number of records to skip before selecting the first result.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// UpdateListingFormdataBody defines parameters for UpdateListing.
type UpdateListingFormdataBody struct {
	// Description A description string of the product for sale in the listing.
	Description *string `form:"description,omitempty" json:"description,omitempty"`

	// FeaturedRank The positive non-zero numeric position in the featured listings of the shop, with rank 1 listings appearing in the left-most position in featured listing on a shop’s home page.
	FeaturedRank *int `form:"featured_rank" json:"featured_rank"`

	// ImageIds An array of numeric image IDs of the images in a listing, which can include up to 10 images.
	ImageIds *[]int `form:"image_ids,omitempty" json:"image_ids,omitempty"`

	// IsPersonalizable When true, this listing is personalizable. The default value is null.
	IsPersonalizable *bool `form:"is_personalizable,omitempty" json:"is_personalizable,omitempty"`

	// IsSupply When true, tags the listing as a supply product, else indicates that it's a finished product. Helps buyers locate the listing under the Supplies heading. Requires 'who_made' and 'when_made'.
	IsSupply *bool `form:"is_supply,omitempty" json:"is_supply,omitempty"`

	// IsTaxable When true, applicable [shop](/documentation/reference#tag/Shop) tax rates apply to this listing at checkout.
	IsTaxable *bool `form:"is_taxable,omitempty" json:"is_taxable,omitempty"`

	// ItemDimensionsUnit A string defining the units used to measure the dimensions of the product. Default value is null.
	ItemDimensionsUnit *UpdateListingFormdataBodyItemDimensionsUnit `form:"item_dimensions_unit" json:"item_dimensions_unit"`

	// ItemHeight The numeric height of the product measured in units set in 'item_dimensions_unit'. Default value is null. If set, the value must be greater than 0.
	ItemHeight *float32 `form:"item_height" json:"item_height"`

	// ItemLength The numeric length of the product measured in units set in 'item_dimensions_unit'. Default value is null. If set, the value must be greater than 0.
	ItemLength *float32 `form:"item_length" json:"item_length"`

	// ItemWeight The numeric weight of the product measured in units set in 'item_weight_unit'. Default value is null. If set, the value must be greater than 0.
	ItemWeight *float32 `form:"item_weight" json:"item_weight"`

	// ItemWeightUnit A string defining the units used to measure the weight of the product. Default value is null.
	ItemWeightUnit *UpdateListingFormdataBodyItemWeightUnit `form:"item_weight_unit" json:"item_weight_unit"`

	// ItemWidth The numeric width of the product measured in units set in 'item_dimensions_unit'. Default value is null. If set, the value must be greater than 0.
	ItemWidth *float32 `form:"item_width" json:"item_width"`

	// Materials A list of material strings for materials used in the product. Valid materials strings contain only letters, numbers, and whitespace characters. (regex: /[^\p{L}\p{Nd}\p{Zs}]/u) Default value is null.
	Materials *[]string `form:"materials" json:"materials"`

	// PersonalizationCharCountMax This is an integer value representing the maximum length for the personalization message entered by the buyer. Will only change if is_personalizable is 'true'.
	PersonalizationCharCountMax *int `form:"personalization_char_count_max,omitempty" json:"personalization_char_count_max,omitempty"`

	// PersonalizationInstructions A string representing instructions for the buyer to enter the personalization. Will only change if is_personalizable is 'true'.
	PersonalizationInstructions *string `form:"personalization_instructions,omitempty" json:"personalization_instructions,omitempty"`

	// PersonalizationIsRequired When true, this listing requires personalization. The default value is null. Will only change if is_personalizable is 'true'.
	PersonalizationIsRequired *bool `form:"personalization_is_required,omitempty" json:"personalization_is_required,omitempty"`

	// ProductionPartnerIds An array of unique IDs of production partner ids.
	ProductionPartnerIds *[]int `form:"production_partner_ids" json:"production_partner_ids"`

	// ReturnPolicyId The numeric ID of the [Return Policy](/documentation/reference#operation/getShopReturnPolicies). Required for active physical listings. This requirement does not apply to listings of EU-based shops.
	ReturnPolicyId *int `form:"return_policy_id" json:"return_policy_id"`

	// ShippingProfileId The numeric ID of the [shipping profile](/documentation/reference#operation/getShopShippingProfile) associated with the listing. Required when listing type is `physical`.
	ShippingProfileId *int `form:"shipping_profile_id" json:"shipping_profile_id"`

	// ShopSectionId The numeric ID of the [shop section](/documentation/reference#tag/Shop-Section) for this listing. Default value is null.
	ShopSectionId *int `form:"shop_section_id" json:"shop_section_id"`

	// ShouldAutoRenew When true, renews a listing for four months upon expiration.
	ShouldAutoRenew *bool `form:"should_auto_renew,omitempty" json:"should_auto_renew,omitempty"`

	// State When _updating_ a listing, this value can be either `active` or `inactive`. Note: Setting a `draft` listing to `active` will also publish the listing on etsy.com and requires that the listing have an image set. Setting a `sold_out` listing to active will update the quantity to 1 and renew the listing on etsy.com.
	State *UpdateListingFormdataBodyState `form:"state,omitempty" json:"state,omitempty"`

	// Tags A comma-separated list of tag strings for the listing. When creating or updating a listing, valid tag strings contain only letters, numbers, whitespace characters, -, ', ™, ©, and ®. (regex: /[^\p{L}\p{Nd}\p{Zs}\-'™©®]/u) Default value is null.
	Tags *[]string `form:"tags" json:"tags"`

	// TaxonomyId The numerical taxonomy ID of the listing. See [SellerTaxonomy](/documentation/reference#tag/SellerTaxonomy) and [BuyerTaxonomy](/documentation/reference#tag/BuyerTaxonomy) for more information.
	TaxonomyId *int `form:"taxonomy_id,omitempty" json:"taxonomy_id,omitempty"`

	// Title The listing's title string. When creating or updating a listing, valid title strings contain only letters, numbers, punctuation marks, mathematical symbols, whitespace characters, ™, ©, and ®. (regex: /[^\p{L}\p{Nd}\p{P}\p{Sm}\p{Zs}™©®]/u) You can only use the %, :, & and + characters once each.
	Title *string `form:"title,omitempty" json:"title,omitempty"`

	// Type An enumerated type string that indicates whether the listing is physical or a digital download.
	Type *UpdateListingFormdataBodyType `form:"type" json:"type"`

	// WhenMade An enumerated string for the era in which the maker made the product in this listing. Helps buyers locate the listing under the Vintage heading. Requires 'is_supply' and 'who_made'.
	WhenMade *UpdateListingFormdataBodyWhenMade `form:"when_made,omitempty" json:"when_made,omitempty"`

	// WhoMade An enumerated string indicating who made the product. Helps buyers locate the listing under the Handmade heading. Requires 'is_supply' and 'when_made'.
	WhoMade *UpdateListingFormdataBodyWhoMade `form:"who_made,omitempty" json:"who_made,omitempty"`
}

// UpdateListingFormdataBodyItemDimensionsUnit defines parameters for UpdateListing.
type UpdateListingFormdataBodyItemDimensionsUnit string

// UpdateListingFormdataBodyItemWeightUnit defines parameters for UpdateListing.
type UpdateListingFormdataBodyItemWeightUnit string

// UpdateListingFormdataBodyState defines parameters for UpdateListing.
type UpdateListingFormdataBodyState string

// UpdateListingFormdataBodyType defines parameters for UpdateListing.
type UpdateListingFormdataBodyType string

// UpdateListingFormdataBodyWhenMade defines parameters for UpdateListing.
type UpdateListingFormdataBodyWhenMade string

// UpdateListingFormdataBodyWhoMade defines parameters for UpdateListing.
type UpdateListingFormdataBodyWhoMade string

// UpdateListingDeprecatedFormdataBody defines parameters for UpdateListingDeprecated.
type UpdateListingDeprecatedFormdataBody struct {
	// Description A description string of the product for sale in the listing.
	Description *string `form:"description,omitempty" json:"description,omitempty"`

	// FeaturedRank The positive non-zero numeric position in the featured listings of the shop, with rank 1 listings appearing in the left-most position in featured listing on a shop’s home page.
	FeaturedRank *int `form:"featured_rank" json:"featured_rank"`

	// ImageIds An array of numeric image IDs of the images in a listing, which can include up to 10 images.
	ImageIds *[]int `form:"image_ids,omitempty" json:"image_ids,omitempty"`

	// IsPersonalizable When true, this listing is personalizable. The default value is null.
	IsPersonalizable *bool `form:"is_personalizable,omitempty" json:"is_personalizable,omitempty"`

	// IsSupply When true, tags the listing as a supply product, else indicates that it's a finished product. Helps buyers locate the listing under the Supplies heading. Requires 'who_made' and 'when_made'.
	IsSupply *bool `form:"is_supply,omitempty" json:"is_supply,omitempty"`

	// IsTaxable When true, applicable [shop](/documentation/reference#tag/Shop) tax rates apply to this listing at checkout.
	IsTaxable *bool `form:"is_taxable,omitempty" json:"is_taxable,omitempty"`

	// ItemDimensionsUnit A string defining the units used to measure the dimensions of the product. Default value is null.
	ItemDimensionsUnit *UpdateListingDeprecatedFormdataBodyItemDimensionsUnit `form:"item_dimensions_unit" json:"item_dimensions_unit"`

	// ItemHeight The numeric height of the product measured in units set in 'item_dimensions_unit'. Default value is null. If set, the value must be greater than 0.
	ItemHeight *float32 `form:"item_height" json:"item_height"`

	// ItemLength The numeric length of the product measured in units set in 'item_dimensions_unit'. Default value is null. If set, the value must be greater than 0.
	ItemLength *float32 `form:"item_length" json:"item_length"`

	// ItemWeight The numeric weight of the product measured in units set in 'item_weight_unit'. Default value is null. If set, the value must be greater than 0.
	ItemWeight *float32 `form:"item_weight" json:"item_weight"`

	// ItemWeightUnit A string defining the units used to measure the weight of the product. Default value is null.
	ItemWeightUnit *UpdateListingDeprecatedFormdataBodyItemWeightUnit `form:"item_weight_unit" json:"item_weight_unit"`

	// ItemWidth The numeric width of the product measured in units set in 'item_dimensions_unit'. Default value is null. If set, the value must be greater than 0.
	ItemWidth *float32 `form:"item_width" json:"item_width"`

	// Materials A list of material strings for materials used in the product. Valid materials strings contain only letters, numbers, and whitespace characters. (regex: /[^\p{L}\p{Nd}\p{Zs}]/u) Default value is null.
	Materials *[]string `form:"materials" json:"materials"`

	// PersonalizationCharCountMax This is an integer value representing the maximum length for the personalization message entered by the buyer. Will only change if is_personalizable is 'true'.
	PersonalizationCharCountMax *int `form:"personalization_char_count_max,omitempty" json:"personalization_char_count_max,omitempty"`

	// PersonalizationInstructions A string representing instructions for the buyer to enter the personalization. Will only change if is_personalizable is 'true'.
	PersonalizationInstructions *string `form:"personalization_instructions,omitempty" json:"personalization_instructions,omitempty"`

	// PersonalizationIsRequired When true, this listing requires personalization. The default value is null. Will only change if is_personalizable is 'true'.
	PersonalizationIsRequired *bool `form:"personalization_is_required,omitempty" json:"personalization_is_required,omitempty"`

	// ProductionPartnerIds An array of unique IDs of production partner ids.
	ProductionPartnerIds *[]int `form:"production_partner_ids" json:"production_partner_ids"`

	// ShippingProfileId The numeric ID of the [shipping profile](/documentation/reference#operation/getShopShippingProfile) associated with the listing. Required when listing type is `physical`.
	ShippingProfileId *int `form:"shipping_profile_id" json:"shipping_profile_id"`

	// ShopSectionId The numeric ID of the [shop section](/documentation/reference#tag/Shop-Section) for this listing. Default value is null.
	ShopSectionId *int `form:"shop_section_id" json:"shop_section_id"`

	// ShouldAutoRenew When true, renews a listing for four months upon expiration.
	ShouldAutoRenew *bool `form:"should_auto_renew,omitempty" json:"should_auto_renew,omitempty"`

	// State When _updating_ a listing, this value can be either `active` or `inactive`. Note: Setting a `draft` listing to `active` will also publish the listing on etsy.com and requires that the listing have an image set. Setting a `sold_out` listing to active will update the quantity to 1 and renew the listing on etsy.com.
	State *UpdateListingDeprecatedFormdataBodyState `form:"state,omitempty" json:"state,omitempty"`

	// Tags A comma-separated list of tag strings for the listing. When creating or updating a listing, valid tag strings contain only letters, numbers, whitespace characters, -, ', ™, ©, and ®. (regex: /[^\p{L}\p{Nd}\p{Zs}\-'™©®]/u) Default value is null.
	Tags *[]string `form:"tags" json:"tags"`

	// TaxonomyId The numerical taxonomy ID of the listing. See [SellerTaxonomy](/documentation/reference#tag/SellerTaxonomy) and [BuyerTaxonomy](/documentation/reference#tag/BuyerTaxonomy) for more information.
	TaxonomyId *int `form:"taxonomy_id,omitempty" json:"taxonomy_id,omitempty"`

	// Title The listing's title string. When creating or updating a listing, valid title strings contain only letters, numbers, punctuation marks, mathematical symbols, whitespace characters, ™, ©, and ®. (regex: /[^\p{L}\p{Nd}\p{P}\p{Sm}\p{Zs}™©®]/u) You can only use the %, :, & and + characters once each.
	Title *string `form:"title,omitempty" json:"title,omitempty"`

	// Type An enumerated type string that indicates whether the listing is physical or a digital download.
	Type *UpdateListingDeprecatedFormdataBodyType `form:"type" json:"type"`

	// WhenMade An enumerated string for the era in which the maker made the product in this listing. Helps buyers locate the listing under the Vintage heading. Requires 'is_supply' and 'who_made'.
	WhenMade *UpdateListingDeprecatedFormdataBodyWhenMade `form:"when_made,omitempty" json:"when_made,omitempty"`

	// WhoMade An enumerated string indicating who made the product. Helps buyers locate the listing under the Handmade heading. Requires 'is_supply' and 'when_made'.
	WhoMade *UpdateListingDeprecatedFormdataBodyWhoMade `form:"who_made,omitempty" json:"who_made,omitempty"`
}

// UpdateListingDeprecatedFormdataBodyItemDimensionsUnit defines parameters for UpdateListingDeprecated.
type UpdateListingDeprecatedFormdataBodyItemDimensionsUnit string

// UpdateListingDeprecatedFormdataBodyItemWeightUnit defines parameters for UpdateListingDeprecated.
type UpdateListingDeprecatedFormdataBodyItemWeightUnit string

// UpdateListingDeprecatedFormdataBodyState defines parameters for UpdateListingDeprecated.
type UpdateListingDeprecatedFormdataBodyState string

// UpdateListingDeprecatedFormdataBodyType defines parameters for UpdateListingDeprecated.
type UpdateListingDeprecatedFormdataBodyType string

// UpdateListingDeprecatedFormdataBodyWhenMade defines parameters for UpdateListingDeprecated.
type UpdateListingDeprecatedFormdataBodyWhenMade string

// UpdateListingDeprecatedFormdataBodyWhoMade defines parameters for UpdateListingDeprecated.
type UpdateListingDeprecatedFormdataBodyWhoMade string

// UploadListingFileMultipartBody defines parameters for UploadListingFile.
type UploadListingFileMultipartBody struct {
	// File A binary file to upload.
	File *openapi_types.File `json:"file"`

	// ListingFileId The unique numeric ID of a file associated with a digital listing.
	ListingFileId *int `json:"listing_file_id,omitempty"`

	// Name The file name string of a file to upload
	Name *string `json:"name,omitempty"`

	// Rank The positive non-zero numeric position in the images displayed in a listing, with rank 1 images appearing in the left-most position in a listing.
	Rank *int `json:"rank,omitempty"`
}

// UploadListingImageMultipartBody defines parameters for UploadListingImage.
type UploadListingImageMultipartBody struct {
	// AltText Alt text for the listing image. Max length 250 characters.
	AltText *string `json:"alt_text,omitempty"`

	// Image The file name string of a file to upload
	Image *openapi_types.File `json:"image"`

	// IsWatermarked When true, indicates that the uploaded image has a watermark.
	IsWatermarked *bool `json:"is_watermarked,omitempty"`

	// ListingImageId The numeric ID of the primary [listing image](/documentation/reference#tag/ShopListing-Image) for this transaction.
	ListingImageId *int `json:"listing_image_id,omitempty"`

	// Overwrite When true, this request replaces the existing image at a given rank.
	Overwrite *bool `json:"overwrite,omitempty"`

	// Rank The positive non-zero numeric position in the images displayed in a listing, with rank 1 images appearing in the left-most position in a listing.
	Rank *int `json:"rank,omitempty"`
}

// UpdateListingPropertyFormdataBody defines parameters for UpdateListingProperty.
type UpdateListingPropertyFormdataBody struct {
	// ScaleId The numeric ID of a single Etsy.com measurement scale. For example, for shoe size, there are three `scale_id`s available - `UK`, `US/Canada`, and `EU`, where `US/Canada` has `scale_id` 19.
	ScaleId *int `form:"scale_id,omitempty" json:"scale_id,omitempty"`

	// ValueIds An array of unique IDs of multiple Etsy [listing property](/documentation/reference#operation/getListingProperties) values. For example, if your listing offers different sizes of a product, then the value ID list contains value IDs for each size.
	ValueIds []int `form:"value_ids" json:"value_ids"`

	// Values An array of value strings for multiple Etsy [listing property](/documentation/reference#operation/getListingProperties) values. For example, if your listing offers different colored products, then the values array contains the color strings for each color. Note: parenthesis characters (`(` and `)`) are not allowed.
	Values []string `form:"values" json:"values"`
}

// GetShopReceiptTransactionsByListingParams defines parameters for GetShopReceiptTransactionsByListing.
type GetShopReceiptTransactionsByListingParams struct {
	// Limit The maximum number of results to return.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The number of records to skip before selecting the first result.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// CreateListingTranslationFormdataBody defines parameters for CreateListingTranslation.
type CreateListingTranslationFormdataBody struct {
	// Description The description of the Listing of this Translation.
	Description string `form:"description" json:"description"`

	// Tags The tags of the Listing of this Translation.
	Tags *[]string `form:"tags,omitempty" json:"tags,omitempty"`

	// Title The title of the Listing of this Translation.
	Title string `form:"title" json:"title"`
}

// UpdateListingTranslationFormdataBody defines parameters for UpdateListingTranslation.
type UpdateListingTranslationFormdataBody struct {
	// Description The description of the Listing of this Translation.
	Description string `form:"description" json:"description"`

	// Tags The tags of the Listing of this Translation.
	Tags *[]string `form:"tags,omitempty" json:"tags,omitempty"`

	// Title The title of the Listing of this Translation.
	Title string `form:"title" json:"title"`
}

// UpdateVariationImagesJSONBody defines parameters for UpdateVariationImages.
type UpdateVariationImagesJSONBody struct {
	// VariationImages A list of variation image data.
	VariationImages []struct {
		ImageId    int `json:"image_id"`
		PropertyId int `json:"property_id"`
		ValueId    int `json:"value_id"`
	} `json:"variation_images"`
}

// UploadListingVideoMultipartBody defines parameters for UploadListingVideo.
type UploadListingVideoMultipartBody struct {
	// Name The file name string for the video to upload.
	Name *string `json:"name,omitempty"`

	// Video A video file to upload.
	Video *openapi_types.File `json:"video"`

	// VideoId The unique ID of a video associated with a listing.
	VideoId *int `json:"video_id,omitempty"`
}

// GetShopPaymentAccountLedgerEntriesParams defines parameters for GetShopPaymentAccountLedgerEntries.
type GetShopPaymentAccountLedgerEntriesParams struct {
	// MinCreated The earliest unix timestamp for when a record was created.
	MinCreated int `form:"min_created" json:"min_created"`

	// MaxCreated The latest unix timestamp for when a record was created.
	MaxCreated int `form:"max_created" json:"max_created"`

	// Limit The maximum number of results to return.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The number of records to skip before selecting the first result.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetPaymentAccountLedgerEntryPaymentsParams defines parameters for GetPaymentAccountLedgerEntryPayments.
type GetPaymentAccountLedgerEntryPaymentsParams struct {
	LedgerEntryIds []int `form:"ledger_entry_ids" json:"ledger_entry_ids"`
}

// GetPaymentsParams defines parameters for GetPayments.
type GetPaymentsParams struct {
	// PaymentIds A comma-separated array of Payment IDs numbers.
	PaymentIds []int `form:"payment_ids" json:"payment_ids"`
}

// CreateShopReturnPolicyFormdataBody defines parameters for CreateShopReturnPolicy.
type CreateShopReturnPolicyFormdataBody struct {
	AcceptsExchanges bool `form:"accepts_exchanges" json:"accepts_exchanges"`
	AcceptsReturns   bool `form:"accepts_returns" json:"accepts_returns"`

	// ReturnDeadline The deadline for the Return Policy, measured in days. The value must be one of the following: [7, 14, 21, 30, 45, 60, 90].
	ReturnDeadline *int `form:"return_deadline" json:"return_deadline"`
}

// ConsolidateShopReturnPoliciesFormdataBody defines parameters for ConsolidateShopReturnPolicies.
type ConsolidateShopReturnPoliciesFormdataBody struct {
	// DestinationReturnPolicyId The numeric ID of the [Return Policy](/documentation/reference#operation/getShopReturnPolicies).
	DestinationReturnPolicyId int `form:"destination_return_policy_id" json:"destination_return_policy_id"`

	// SourceReturnPolicyId The numeric ID of the [Return Policy](/documentation/reference#operation/getShopReturnPolicies).
	SourceReturnPolicyId int `form:"source_return_policy_id" json:"source_return_policy_id"`
}

// UpdateShopReturnPolicyFormdataBody defines parameters for UpdateShopReturnPolicy.
type UpdateShopReturnPolicyFormdataBody struct {
	AcceptsExchanges bool `form:"accepts_exchanges" json:"accepts_exchanges"`
	AcceptsReturns   bool `form:"accepts_returns" json:"accepts_returns"`

	// ReturnDeadline The deadline for the Return Policy, measured in days. The value must be one of the following: [7, 14, 21, 30, 45, 60, 90].
	ReturnDeadline *int `form:"return_deadline" json:"return_deadline"`
}

// GetShopReceiptsParams defines parameters for GetShopReceipts.
type GetShopReceiptsParams struct {
	// MinCreated The earliest unix timestamp for when a record was created.
	MinCreated *int `form:"min_created,omitempty" json:"min_created,omitempty"`

	// MaxCreated The latest unix timestamp for when a record was created.
	MaxCreated *int `form:"max_created,omitempty" json:"max_created,omitempty"`

	// MinLastModified The earliest unix timestamp for when a record last changed.
	MinLastModified *int `form:"min_last_modified,omitempty" json:"min_last_modified,omitempty"`

	// MaxLastModified The latest unix timestamp for when a record last changed.
	MaxLastModified *int `form:"max_last_modified,omitempty" json:"max_last_modified,omitempty"`

	// Limit The maximum number of results to return.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The number of records to skip before selecting the first result.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// SortOn The value to sort a search result of listings on.
	SortOn *GetShopReceiptsParamsSortOn `form:"sort_on,omitempty" json:"sort_on,omitempty"`

	// SortOrder The ascending(up) or descending(down) order to sort receipts by.
	SortOrder *GetShopReceiptsParamsSortOrder `form:"sort_order,omitempty" json:"sort_order,omitempty"`

	// WasPaid When `true`, returns receipts where the seller has recieved payment for the receipt. When `false`, returns receipts where payment has not been received.
	WasPaid *bool `form:"was_paid,omitempty" json:"was_paid,omitempty"`

	// WasShipped When `true`, returns receipts where the seller shipped the product(s) in this receipt. When `false`, returns receipts where shipment has not been set.
	WasShipped *bool `form:"was_shipped,omitempty" json:"was_shipped,omitempty"`

	// WasDelivered When `true`, returns receipts that have been marked as delivered. When `false`, returns receipts where shipment has not been marked as delivered.
	WasDelivered *bool `form:"was_delivered,omitempty" json:"was_delivered,omitempty"`

	// WasCanceled When `true`, the endpoint will only return the canceled receipts. When `false`, the endpoint will only return non-canceled receipts.
	WasCanceled *bool `form:"was_canceled,omitempty" json:"was_canceled,omitempty"`
}

// GetShopReceiptsParamsSortOn defines parameters for GetShopReceipts.
type GetShopReceiptsParamsSortOn string

// GetShopReceiptsParamsSortOrder defines parameters for GetShopReceipts.
type GetShopReceiptsParamsSortOrder string

// UpdateShopReceiptFormdataBody defines parameters for UpdateShopReceipt.
type UpdateShopReceiptFormdataBody struct {
	// WasPaid When `true`, returns receipts where the seller has recieved payment for the receipt. When `false`, returns receipts where payment has not been received.
	WasPaid *bool `form:"was_paid" json:"was_paid"`

	// WasShipped When `true`, returns receipts where the seller shipped the product(s) in this receipt. When `false`, returns receipts where shipment has not been set.
	WasShipped *bool `form:"was_shipped" json:"was_shipped"`
}

// GetListingsByShopReceiptParams defines parameters for GetListingsByShopReceipt.
type GetListingsByShopReceiptParams struct {
	// Limit The maximum number of results to return.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The number of records to skip before selecting the first result.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// CreateReceiptShipmentFormdataBody defines parameters for CreateReceiptShipment.
type CreateReceiptShipmentFormdataBody struct {
	// CarrierName The carrier name for this receipt.
	CarrierName *string `form:"carrier_name,omitempty" json:"carrier_name,omitempty"`

	// NoteToBuyer Message to include in notification to the buyer.
	NoteToBuyer *string `form:"note_to_buyer,omitempty" json:"note_to_buyer,omitempty"`

	// SendBcc If true, the shipping notification will be sent to the seller as well
	SendBcc *bool `form:"send_bcc,omitempty" json:"send_bcc,omitempty"`

	// TrackingCode The tracking code for this receipt.
	TrackingCode *string `form:"tracking_code,omitempty" json:"tracking_code,omitempty"`
}

// GetReviewsByShopParams defines parameters for GetReviewsByShop.
type GetReviewsByShopParams struct {
	// Limit The maximum number of results to return.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The number of records to skip before selecting the first result.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// MinCreated The earliest unix timestamp for when a record was created.
	MinCreated *int `form:"min_created,omitempty" json:"min_created,omitempty"`

	// MaxCreated The latest unix timestamp for when a record was created.
	MaxCreated *int `form:"max_created,omitempty" json:"max_created,omitempty"`
}

// CreateShopSectionFormdataBody defines parameters for CreateShopSection.
type CreateShopSectionFormdataBody struct {
	// Title The title string for a shop section.
	Title string `form:"title" json:"title"`
}

// UpdateShopSectionFormdataBody defines parameters for UpdateShopSection.
type UpdateShopSectionFormdataBody struct {
	// Title The title string for a shop section.
	Title string `form:"title" json:"title"`
}

// CreateShopShippingProfileFormdataBody defines parameters for CreateShopShippingProfile.
type CreateShopShippingProfileFormdataBody struct {
	// DestinationCountryIso The ISO code of the country to which the listing ships. If null, request sets destination to destination_region. Required if destination_region is null or not provided.
	DestinationCountryIso *string `form:"destination_country_iso,omitempty" json:"destination_country_iso,omitempty"`

	// DestinationRegion The code of the region to which the listing ships. A region represents a set of countries. Supported regions are Europe Union and Non-Europe Union (countries in Europe not in EU). If `none`, request sets destination to destination_country_iso. Required if destination_country_iso is null or not provided.
	DestinationRegion *CreateShopShippingProfileFormdataBodyDestinationRegion `form:"destination_region,omitempty" json:"destination_region,omitempty"`

	// MailClass The unique ID string of a shipping carrier's mail class, which is used to calculate an estimated delivery date. **Required with `shipping_carrier_id`** if `min_delivery_days` and `max_delivery_days` are null.
	MailClass *string `form:"mail_class,omitempty" json:"mail_class,omitempty"`

	// MaxDeliveryDays The maximum number of business days a buyer can expect to wait to receive their purchased item once it has shipped. **Required with `min_delivery_days`** if `mail_class` is null.
	MaxDeliveryDays *int `form:"max_delivery_days,omitempty" json:"max_delivery_days,omitempty"`

	// MaxProcessingTime The maximum processing time the listing needs to ship.
	MaxProcessingTime int `form:"max_processing_time" json:"max_processing_time"`

	// MinDeliveryDays The minimum number of business days a buyer can expect to wait to receive their purchased item once it has shipped. **Required with `max_delivery_days`** if `mail_class` is null.
	MinDeliveryDays *int `form:"min_delivery_days,omitempty" json:"min_delivery_days,omitempty"`

	// MinProcessingTime The minimum time required to process to ship listings with this shipping profile.
	MinProcessingTime int `form:"min_processing_time" json:"min_processing_time"`

	// OriginCountryIso The ISO code of the country from which the listing ships.
	OriginCountryIso string `form:"origin_country_iso" json:"origin_country_iso"`

	// OriginPostalCode The postal code string (not necessarily a number) for the location from which the listing ships. Required if the `origin_country_iso` is `US` or `CA`.
	OriginPostalCode *string `form:"origin_postal_code,omitempty" json:"origin_postal_code,omitempty"`

	// PrimaryCost The cost of shipping to this country/region alone, measured in the store's default currency.
	PrimaryCost float32 `form:"primary_cost" json:"primary_cost"`

	// ProcessingTimeUnit The unit used to represent how long a processing time is. A week is equivalent to 5 business days. If none is provided, the unit is set to "business_days".
	ProcessingTimeUnit *CreateShopShippingProfileFormdataBodyProcessingTimeUnit `form:"processing_time_unit,omitempty" json:"processing_time_unit,omitempty"`

	// SecondaryCost The cost of shipping to this country/region with another item, measured in the store's default currency.
	SecondaryCost float32 `form:"secondary_cost" json:"secondary_cost"`

	// ShippingCarrierId The unique ID of a supported shipping carrier, which is used to calculate an Estimated Delivery Date. **Required with `mail_class`** if `min_delivery_days` and `max_delivery_days` are null.
	ShippingCarrierId *int `form:"shipping_carrier_id,omitempty" json:"shipping_carrier_id,omitempty"`

	// Title The name string of this shipping profile.
	Title string `form:"title" json:"title"`
}

// CreateShopShippingProfileFormdataBodyDestinationRegion defines parameters for CreateShopShippingProfile.
type CreateShopShippingProfileFormdataBodyDestinationRegion string

// CreateShopShippingProfileFormdataBodyProcessingTimeUnit defines parameters for CreateShopShippingProfile.
type CreateShopShippingProfileFormdataBodyProcessingTimeUnit string

// UpdateShopShippingProfileFormdataBody defines parameters for UpdateShopShippingProfile.
type UpdateShopShippingProfileFormdataBody struct {
	// MaxProcessingTime The maximum processing time the listing needs to ship.
	MaxProcessingTime *int `form:"max_processing_time,omitempty" json:"max_processing_time,omitempty"`

	// MinProcessingTime The minimum time required to process to ship listings with this shipping profile.
	MinProcessingTime *int `form:"min_processing_time,omitempty" json:"min_processing_time,omitempty"`

	// OriginCountryIso The ISO code of the country from which the listing ships.
	OriginCountryIso *string `form:"origin_country_iso,omitempty" json:"origin_country_iso,omitempty"`

	// OriginPostalCode The postal code string (not necessarily a number) for the location from which the listing ships. Required if the `origin_country_iso` is `US` or `CA`.
	OriginPostalCode *string `form:"origin_postal_code,omitempty" json:"origin_postal_code,omitempty"`

	// ProcessingTimeUnit The unit used to represent how long a processing time is. A week is equivalent to 5 business days. If none is provided, the unit is set to "business_days".
	ProcessingTimeUnit *UpdateShopShippingProfileFormdataBodyProcessingTimeUnit `form:"processing_time_unit,omitempty" json:"processing_time_unit,omitempty"`

	// Title The name string of this shipping profile.
	Title *string `form:"title,omitempty" json:"title,omitempty"`
}

// UpdateShopShippingProfileFormdataBodyProcessingTimeUnit defines parameters for UpdateShopShippingProfile.
type UpdateShopShippingProfileFormdataBodyProcessingTimeUnit string

// GetShopShippingProfileDestinationsByShippingProfileParams defines parameters for GetShopShippingProfileDestinationsByShippingProfile.
type GetShopShippingProfileDestinationsByShippingProfileParams struct {
	// Limit The maximum number of results to return.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The number of records to skip before selecting the first result.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// CreateShopShippingProfileDestinationFormdataBody defines parameters for CreateShopShippingProfileDestination.
type CreateShopShippingProfileDestinationFormdataBody struct {
	// DestinationCountryIso The ISO code of the country to which the listing ships. If null, request sets destination to destination_region. Required if destination_region is null or not provided.
	DestinationCountryIso *string `form:"destination_country_iso,omitempty" json:"destination_country_iso,omitempty"`

	// DestinationRegion The code of the region to which the listing ships. A region represents a set of countries. Supported regions are Europe Union and Non-Europe Union (countries in Europe not in EU). If `none`, request sets destination to destination_country_iso. Required if destination_country_iso is null or not provided.
	DestinationRegion *CreateShopShippingProfileDestinationFormdataBodyDestinationRegion `form:"destination_region,omitempty" json:"destination_region,omitempty"`

	// MailClass The unique ID string of a shipping carrier's mail class, which is used to calculate an estimated delivery date. **Required with `shipping_carrier_id`** if `min_delivery_days` and `max_delivery_days` are null.
	MailClass *string `form:"mail_class,omitempty" json:"mail_class,omitempty"`

	// MaxDeliveryDays The maximum number of business days a buyer can expect to wait to receive their purchased item once it has shipped. **Required with `min_delivery_days`** if `mail_class` is null.
	MaxDeliveryDays *int `form:"max_delivery_days,omitempty" json:"max_delivery_days,omitempty"`

	// MinDeliveryDays The minimum number of business days a buyer can expect to wait to receive their purchased item once it has shipped. **Required with `max_delivery_days`** if `mail_class` is null.
	MinDeliveryDays *int `form:"min_delivery_days,omitempty" json:"min_delivery_days,omitempty"`

	// PrimaryCost The cost of shipping to this country/region alone, measured in the store's default currency.
	PrimaryCost float32 `form:"primary_cost" json:"primary_cost"`

	// SecondaryCost The cost of shipping to this country/region with another item, measured in the store's default currency.
	SecondaryCost float32 `form:"secondary_cost" json:"secondary_cost"`

	// ShippingCarrierId The unique ID of a supported shipping carrier, which is used to calculate an Estimated Delivery Date. **Required with `mail_class`** if `min_delivery_days` and `max_delivery_days` are null.
	ShippingCarrierId *int `form:"shipping_carrier_id,omitempty" json:"shipping_carrier_id,omitempty"`
}

// CreateShopShippingProfileDestinationFormdataBodyDestinationRegion defines parameters for CreateShopShippingProfileDestination.
type CreateShopShippingProfileDestinationFormdataBodyDestinationRegion string

// UpdateShopShippingProfileDestinationFormdataBody defines parameters for UpdateShopShippingProfileDestination.
type UpdateShopShippingProfileDestinationFormdataBody struct {
	// DestinationCountryIso The ISO code of the country to which the listing ships. If null, request sets destination to destination_region. Required if destination_region is null or not provided.
	DestinationCountryIso *string `form:"destination_country_iso,omitempty" json:"destination_country_iso,omitempty"`

	// DestinationRegion The code of the region to which the listing ships. A region represents a set of countries. Supported regions are Europe Union and Non-Europe Union (countries in Europe not in EU). If `none`, request sets destination to destination_country_iso. Required if destination_country_iso is null or not provided.
	DestinationRegion *UpdateShopShippingProfileDestinationFormdataBodyDestinationRegion `form:"destination_region,omitempty" json:"destination_region,omitempty"`

	// MailClass The unique ID string of a shipping carrier's mail class, which is used to calculate an estimated delivery date. **Required with `shipping_carrier_id`** if `min_delivery_days` and `max_delivery_days` are null.
	MailClass *string `form:"mail_class,omitempty" json:"mail_class,omitempty"`

	// MaxDeliveryDays The maximum number of business days a buyer can expect to wait to receive their purchased item once it has shipped. **Required with `min_delivery_days`** if `mail_class` is null.
	MaxDeliveryDays *int `form:"max_delivery_days,omitempty" json:"max_delivery_days,omitempty"`

	// MinDeliveryDays The minimum number of business days a buyer can expect to wait to receive their purchased item once it has shipped. **Required with `max_delivery_days`** if `mail_class` is null.
	MinDeliveryDays *int `form:"min_delivery_days,omitempty" json:"min_delivery_days,omitempty"`

	// PrimaryCost The cost of shipping to this country/region alone, measured in the store's default currency.
	PrimaryCost *float32 `form:"primary_cost,omitempty" json:"primary_cost,omitempty"`

	// SecondaryCost The cost of shipping to this country/region with another item, measured in the store's default currency.
	SecondaryCost *float32 `form:"secondary_cost,omitempty" json:"secondary_cost,omitempty"`

	// ShippingCarrierId The unique ID of a supported shipping carrier, which is used to calculate an Estimated Delivery Date. **Required with `mail_class`** if `min_delivery_days` and `max_delivery_days` are null.
	ShippingCarrierId *int `form:"shipping_carrier_id,omitempty" json:"shipping_carrier_id,omitempty"`
}

// UpdateShopShippingProfileDestinationFormdataBodyDestinationRegion defines parameters for UpdateShopShippingProfileDestination.
type UpdateShopShippingProfileDestinationFormdataBodyDestinationRegion string

// CreateShopShippingProfileUpgradeFormdataBody defines parameters for CreateShopShippingProfileUpgrade.
type CreateShopShippingProfileUpgradeFormdataBody struct {
	// MailClass The unique ID string of a shipping carrier's mail class, which is used to calculate an estimated delivery date. **Required with `shipping_carrier_id`** if `min_delivery_days` and `max_delivery_days` are null.
	MailClass *string `form:"mail_class,omitempty" json:"mail_class,omitempty"`

	// MaxDeliveryDays The maximum number of business days a buyer can expect to wait to receive their purchased item once it has shipped. **Required with `min_delivery_days`** if `mail_class` is null.
	MaxDeliveryDays *int `form:"max_delivery_days,omitempty" json:"max_delivery_days,omitempty"`

	// MinDeliveryDays The minimum number of business days a buyer can expect to wait to receive their purchased item once it has shipped. **Required with `max_delivery_days`** if `mail_class` is null.
	MinDeliveryDays *int `form:"min_delivery_days,omitempty" json:"min_delivery_days,omitempty"`

	// Price Additional cost of adding the shipping upgrade.
	Price float32 `form:"price" json:"price"`

	// SecondaryPrice Additional cost of adding the shipping upgrade for each additional item.
	SecondaryPrice float32 `form:"secondary_price" json:"secondary_price"`

	// ShippingCarrierId The unique ID of a supported shipping carrier, which is used to calculate an Estimated Delivery Date. **Required with `mail_class`** if `min_delivery_days` and `max_delivery_days` are null.
	ShippingCarrierId *int `form:"shipping_carrier_id,omitempty" json:"shipping_carrier_id,omitempty"`

	// Type The type of the shipping upgrade. Domestic (0) or international (1).
	Type CreateShopShippingProfileUpgradeFormdataBodyType `form:"type" json:"type"`

	// UpgradeName Name for the shipping upgrade shown to shoppers at checkout, e.g. USPS Priority.
	UpgradeName string `form:"upgrade_name" json:"upgrade_name"`
}

// CreateShopShippingProfileUpgradeFormdataBodyType defines parameters for CreateShopShippingProfileUpgrade.
type CreateShopShippingProfileUpgradeFormdataBodyType string

// UpdateShopShippingProfileUpgradeFormdataBody defines parameters for UpdateShopShippingProfileUpgrade.
type UpdateShopShippingProfileUpgradeFormdataBody struct {
	// MailClass The unique ID string of a shipping carrier's mail class, which is used to calculate an estimated delivery date. **Required with `shipping_carrier_id`** if `min_delivery_days` and `max_delivery_days` are null.
	MailClass *string `form:"mail_class,omitempty" json:"mail_class,omitempty"`

	// MaxDeliveryDays The maximum number of business days a buyer can expect to wait to receive their purchased item once it has shipped. **Required with `min_delivery_days`** if `mail_class` is null.
	MaxDeliveryDays *int `form:"max_delivery_days,omitempty" json:"max_delivery_days,omitempty"`

	// MinDeliveryDays The minimum number of business days a buyer can expect to wait to receive their purchased item once it has shipped. **Required with `max_delivery_days`** if `mail_class` is null.
	MinDeliveryDays *int `form:"min_delivery_days,omitempty" json:"min_delivery_days,omitempty"`

	// Price Additional cost of adding the shipping upgrade.
	Price *float32 `form:"price,omitempty" json:"price,omitempty"`

	// SecondaryPrice Additional cost of adding the shipping upgrade for each additional item.
	SecondaryPrice *float32 `form:"secondary_price,omitempty" json:"secondary_price,omitempty"`

	// ShippingCarrierId The unique ID of a supported shipping carrier, which is used to calculate an Estimated Delivery Date. **Required with `mail_class`** if `min_delivery_days` and `max_delivery_days` are null.
	ShippingCarrierId *int `form:"shipping_carrier_id,omitempty" json:"shipping_carrier_id,omitempty"`

	// Type The type of the shipping upgrade. Domestic (0) or international (1).
	Type *UpdateShopShippingProfileUpgradeFormdataBodyType `form:"type,omitempty" json:"type,omitempty"`

	// UpgradeName Name for the shipping upgrade shown to shoppers at checkout, e.g. USPS Priority.
	UpgradeName *string `form:"upgrade_name,omitempty" json:"upgrade_name,omitempty"`
}

// UpdateShopShippingProfileUpgradeFormdataBodyType defines parameters for UpdateShopShippingProfileUpgrade.
type UpdateShopShippingProfileUpgradeFormdataBodyType string

// GetListingsByShopSectionIdParams defines parameters for GetListingsByShopSectionId.
type GetListingsByShopSectionIdParams struct {
	// ShopSectionIds A list of numeric IDS for all sections in a specific Etsy shop.
	ShopSectionIds []int `form:"shop_section_ids" json:"shop_section_ids"`

	// Limit The maximum number of results to return.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The number of records to skip before selecting the first result.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// SortOn The value to sort a search result of listings on. NOTES: a) `sort_on` only works when combined with one of the search options (keywords, region, etc.). b) when using `score` the returned results will always be in _descending_ order, regardless of the `sort_order` parameter.
	SortOn *GetListingsByShopSectionIdParamsSortOn `form:"sort_on,omitempty" json:"sort_on,omitempty"`

	// SortOrder The ascending(up) or descending(down) order to sort listings by. NOTE: sort_order only works when combined with one of the search options (keywords, region, etc.).
	SortOrder *GetListingsByShopSectionIdParamsSortOrder `form:"sort_order,omitempty" json:"sort_order,omitempty"`
}

// GetListingsByShopSectionIdParamsSortOn defines parameters for GetListingsByShopSectionId.
type GetListingsByShopSectionIdParamsSortOn string

// GetListingsByShopSectionIdParamsSortOrder defines parameters for GetListingsByShopSectionId.
type GetListingsByShopSectionIdParamsSortOrder string

// GetShopReceiptTransactionsByShopParams defines parameters for GetShopReceiptTransactionsByShop.
type GetShopReceiptTransactionsByShopParams struct {
	// Limit The maximum number of results to return.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The number of records to skip before selecting the first result.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetUserAddressesParams defines parameters for GetUserAddresses.
type GetUserAddressesParams struct {
	// Limit The maximum number of results to return.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The number of records to skip before selecting the first result.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// UpdateListingInventoryJSONRequestBody defines body for UpdateListingInventory for application/json ContentType.
type UpdateListingInventoryJSONRequestBody UpdateListingInventoryJSONBody

// TokenScopesFormdataRequestBody defines body for TokenScopes for application/x-www-form-urlencoded ContentType.
type TokenScopesFormdataRequestBody TokenScopesFormdataBody

// UpdateShopFormdataRequestBody defines body for UpdateShop for application/x-www-form-urlencoded ContentType.
type UpdateShopFormdataRequestBody UpdateShopFormdataBody

// CreateDraftListingFormdataRequestBody defines body for CreateDraftListing for application/x-www-form-urlencoded ContentType.
type CreateDraftListingFormdataRequestBody CreateDraftListingFormdataBody

// UpdateListingFormdataRequestBody defines body for UpdateListing for application/x-www-form-urlencoded ContentType.
type UpdateListingFormdataRequestBody UpdateListingFormdataBody

// UpdateListingDeprecatedFormdataRequestBody defines body for UpdateListingDeprecated for application/x-www-form-urlencoded ContentType.
type UpdateListingDeprecatedFormdataRequestBody UpdateListingDeprecatedFormdataBody

// UploadListingFileMultipartRequestBody defines body for UploadListingFile for multipart/form-data ContentType.
type UploadListingFileMultipartRequestBody UploadListingFileMultipartBody

// UploadListingImageMultipartRequestBody defines body for UploadListingImage for multipart/form-data ContentType.
type UploadListingImageMultipartRequestBody UploadListingImageMultipartBody

// UpdateListingPropertyFormdataRequestBody defines body for UpdateListingProperty for application/x-www-form-urlencoded ContentType.
type UpdateListingPropertyFormdataRequestBody UpdateListingPropertyFormdataBody

// CreateListingTranslationFormdataRequestBody defines body for CreateListingTranslation for application/x-www-form-urlencoded ContentType.
type CreateListingTranslationFormdataRequestBody CreateListingTranslationFormdataBody

// UpdateListingTranslationFormdataRequestBody defines body for UpdateListingTranslation for application/x-www-form-urlencoded ContentType.
type UpdateListingTranslationFormdataRequestBody UpdateListingTranslationFormdataBody

// UpdateVariationImagesJSONRequestBody defines body for UpdateVariationImages for application/json ContentType.
type UpdateVariationImagesJSONRequestBody UpdateVariationImagesJSONBody

// UploadListingVideoMultipartRequestBody defines body for UploadListingVideo for multipart/form-data ContentType.
type UploadListingVideoMultipartRequestBody UploadListingVideoMultipartBody

// CreateShopReturnPolicyFormdataRequestBody defines body for CreateShopReturnPolicy for application/x-www-form-urlencoded ContentType.
type CreateShopReturnPolicyFormdataRequestBody CreateShopReturnPolicyFormdataBody

// ConsolidateShopReturnPoliciesFormdataRequestBody defines body for ConsolidateShopReturnPolicies for application/x-www-form-urlencoded ContentType.
type ConsolidateShopReturnPoliciesFormdataRequestBody ConsolidateShopReturnPoliciesFormdataBody

// UpdateShopReturnPolicyFormdataRequestBody defines body for UpdateShopReturnPolicy for application/x-www-form-urlencoded ContentType.
type UpdateShopReturnPolicyFormdataRequestBody UpdateShopReturnPolicyFormdataBody

// UpdateShopReceiptFormdataRequestBody defines body for UpdateShopReceipt for application/x-www-form-urlencoded ContentType.
type UpdateShopReceiptFormdataRequestBody UpdateShopReceiptFormdataBody

// CreateReceiptShipmentFormdataRequestBody defines body for CreateReceiptShipment for application/x-www-form-urlencoded ContentType.
type CreateReceiptShipmentFormdataRequestBody CreateReceiptShipmentFormdataBody

// CreateShopSectionFormdataRequestBody defines body for CreateShopSection for application/x-www-form-urlencoded ContentType.
type CreateShopSectionFormdataRequestBody CreateShopSectionFormdataBody

// UpdateShopSectionFormdataRequestBody defines body for UpdateShopSection for application/x-www-form-urlencoded ContentType.
type UpdateShopSectionFormdataRequestBody UpdateShopSectionFormdataBody

// CreateShopShippingProfileFormdataRequestBody defines body for CreateShopShippingProfile for application/x-www-form-urlencoded ContentType.
type CreateShopShippingProfileFormdataRequestBody CreateShopShippingProfileFormdataBody

// UpdateShopShippingProfileFormdataRequestBody defines body for UpdateShopShippingProfile for application/x-www-form-urlencoded ContentType.
type UpdateShopShippingProfileFormdataRequestBody UpdateShopShippingProfileFormdataBody

// CreateShopShippingProfileDestinationFormdataRequestBody defines body for CreateShopShippingProfileDestination for application/x-www-form-urlencoded ContentType.
type CreateShopShippingProfileDestinationFormdataRequestBody CreateShopShippingProfileDestinationFormdataBody

// UpdateShopShippingProfileDestinationFormdataRequestBody defines body for UpdateShopShippingProfileDestination for application/x-www-form-urlencoded ContentType.
type UpdateShopShippingProfileDestinationFormdataRequestBody UpdateShopShippingProfileDestinationFormdataBody

// CreateShopShippingProfileUpgradeFormdataRequestBody defines body for CreateShopShippingProfileUpgrade for application/x-www-form-urlencoded ContentType.
type CreateShopShippingProfileUpgradeFormdataRequestBody CreateShopShippingProfileUpgradeFormdataBody

// UpdateShopShippingProfileUpgradeFormdataRequestBody defines body for UpdateShopShippingProfileUpgrade for application/x-www-form-urlencoded ContentType.
type UpdateShopShippingProfileUpgradeFormdataRequestBody UpdateShopShippingProfileUpgradeFormdataBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetBuyerTaxonomyNodes request
	GetBuyerTaxonomyNodes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPropertiesByBuyerTaxonomyId request
	GetPropertiesByBuyerTaxonomyId(ctx context.Context, taxonomyId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindAllListingsActive request
	FindAllListingsActive(ctx context.Context, params *FindAllListingsActiveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetListingsByListingIds request
	GetListingsByListingIds(ctx context.Context, params *GetListingsByListingIdsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteListing request
	DeleteListing(ctx context.Context, listingId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetListing request
	GetListing(ctx context.Context, listingId int, params *GetListingParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetListingImages request
	GetListingImages(ctx context.Context, listingId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetListingImage request
	GetListingImage(ctx context.Context, listingId int, listingImageId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetListingInventory request
	GetListingInventory(ctx context.Context, listingId int, params *GetListingInventoryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateListingInventoryWithBody request with any body
	UpdateListingInventoryWithBody(ctx context.Context, listingId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateListingInventory(ctx context.Context, listingId int, body UpdateListingInventoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetListingProduct request
	GetListingProduct(ctx context.Context, listingId int, productId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetListingOffering request
	GetListingOffering(ctx context.Context, listingId int, productId int, productOfferingId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetListingProperty request
	GetListingProperty(ctx context.Context, listingId int, propertyId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetReviewsByListing request
	GetReviewsByListing(ctx context.Context, listingId int, params *GetReviewsByListingParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetListingVideos request
	GetListingVideos(ctx context.Context, listingId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetListingVideo request
	GetListingVideo(ctx context.Context, listingId int, videoId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Ping request
	Ping(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TokenScopesWithBody request with any body
	TokenScopesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TokenScopesWithFormdataBody(ctx context.Context, body TokenScopesFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSellerTaxonomyNodes request
	GetSellerTaxonomyNodes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPropertiesByTaxonomyId request
	GetPropertiesByTaxonomyId(ctx context.Context, taxonomyId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetShippingCarriers request
	GetShippingCarriers(ctx context.Context, params *GetShippingCarriersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindShops request
	FindShops(ctx context.Context, params *FindShopsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetShop request
	GetShop(ctx context.Context, shopId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateShopWithBody request with any body
	UpdateShopWithBody(ctx context.Context, shopId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateShopWithFormdataBody(ctx context.Context, shopId int, body UpdateShopFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetListingsByShop request
	GetListingsByShop(ctx context.Context, shopId int, params *GetListingsByShopParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateDraftListingWithBody request with any body
	CreateDraftListingWithBody(ctx context.Context, shopId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateDraftListingWithFormdataBody(ctx context.Context, shopId int, body CreateDraftListingFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindAllActiveListingsByShop request
	FindAllActiveListingsByShop(ctx context.Context, shopId int, params *FindAllActiveListingsByShopParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFeaturedListingsByShop request
	GetFeaturedListingsByShop(ctx context.Context, shopId int, params *GetFeaturedListingsByShopParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateListingWithBody request with any body
	UpdateListingWithBody(ctx context.Context, shopId int, listingId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateListingWithFormdataBody(ctx context.Context, shopId int, listingId int, body UpdateListingFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateListingDeprecatedWithBody request with any body
	UpdateListingDeprecatedWithBody(ctx context.Context, shopId int, listingId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateListingDeprecatedWithFormdataBody(ctx context.Context, shopId int, listingId int, body UpdateListingDeprecatedFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllListingFiles request
	GetAllListingFiles(ctx context.Context, shopId int, listingId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UploadListingFileWithBody request with any body
	UploadListingFileWithBody(ctx context.Context, shopId int, listingId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteListingFile request
	DeleteListingFile(ctx context.Context, shopId int, listingId int, listingFileId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetListingFile request
	GetListingFile(ctx context.Context, shopId int, listingId int, listingFileId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetListingImagesDeprecated request
	GetListingImagesDeprecated(ctx context.Context, shopId int, listingId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UploadListingImageWithBody request with any body
	UploadListingImageWithBody(ctx context.Context, shopId int, listingId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteListingImage request
	DeleteListingImage(ctx context.Context, shopId int, listingId int, listingImageId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetListingImageDeprecated request
	GetListingImageDeprecated(ctx context.Context, shopId int, listingId int, listingImageId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetListingProperties request
	GetListingProperties(ctx context.Context, shopId int, listingId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteListingProperty request
	DeleteListingProperty(ctx context.Context, shopId int, listingId int, propertyId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateListingPropertyWithBody request with any body
	UpdateListingPropertyWithBody(ctx context.Context, shopId int, listingId int, propertyId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateListingPropertyWithFormdataBody(ctx context.Context, shopId int, listingId int, propertyId int, body UpdateListingPropertyFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetShopReceiptTransactionsByListing request
	GetShopReceiptTransactionsByListing(ctx context.Context, shopId int, listingId int, params *GetShopReceiptTransactionsByListingParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetListingTranslation request
	GetListingTranslation(ctx context.Context, shopId int, listingId int, language string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateListingTranslationWithBody request with any body
	CreateListingTranslationWithBody(ctx context.Context, shopId int, listingId int, language string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateListingTranslationWithFormdataBody(ctx context.Context, shopId int, listingId int, language string, body CreateListingTranslationFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateListingTranslationWithBody request with any body
	UpdateListingTranslationWithBody(ctx context.Context, shopId int, listingId int, language string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateListingTranslationWithFormdataBody(ctx context.Context, shopId int, listingId int, language string, body UpdateListingTranslationFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetListingVariationImages request
	GetListingVariationImages(ctx context.Context, shopId int, listingId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateVariationImagesWithBody request with any body
	UpdateVariationImagesWithBody(ctx context.Context, shopId int, listingId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateVariationImages(ctx context.Context, shopId int, listingId int, body UpdateVariationImagesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UploadListingVideoWithBody request with any body
	UploadListingVideoWithBody(ctx context.Context, shopId int, listingId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteListingVideo request
	DeleteListingVideo(ctx context.Context, shopId int, listingId int, videoId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetShopPaymentAccountLedgerEntries request
	GetShopPaymentAccountLedgerEntries(ctx context.Context, shopId int, params *GetShopPaymentAccountLedgerEntriesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPaymentAccountLedgerEntryPayments request
	GetPaymentAccountLedgerEntryPayments(ctx context.Context, shopId int, params *GetPaymentAccountLedgerEntryPaymentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetShopPaymentAccountLedgerEntry request
	GetShopPaymentAccountLedgerEntry(ctx context.Context, shopId int, ledgerEntryId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPayments request
	GetPayments(ctx context.Context, shopId int, params *GetPaymentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetShopReturnPolicies request
	GetShopReturnPolicies(ctx context.Context, shopId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateShopReturnPolicyWithBody request with any body
	CreateShopReturnPolicyWithBody(ctx context.Context, shopId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateShopReturnPolicyWithFormdataBody(ctx context.Context, shopId int, body CreateShopReturnPolicyFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ConsolidateShopReturnPoliciesWithBody request with any body
	ConsolidateShopReturnPoliciesWithBody(ctx context.Context, shopId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ConsolidateShopReturnPoliciesWithFormdataBody(ctx context.Context, shopId int, body ConsolidateShopReturnPoliciesFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteShopReturnPolicy request
	DeleteShopReturnPolicy(ctx context.Context, shopId int, returnPolicyId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetShopReturnPolicy request
	GetShopReturnPolicy(ctx context.Context, shopId int, returnPolicyId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateShopReturnPolicyWithBody request with any body
	UpdateShopReturnPolicyWithBody(ctx context.Context, shopId int, returnPolicyId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateShopReturnPolicyWithFormdataBody(ctx context.Context, shopId int, returnPolicyId int, body UpdateShopReturnPolicyFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetListingsByShopReturnPolicy request
	GetListingsByShopReturnPolicy(ctx context.Context, shopId int, returnPolicyId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetShopProductionPartners request
	GetShopProductionPartners(ctx context.Context, shopId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetShopReceipts request
	GetShopReceipts(ctx context.Context, shopId int, params *GetShopReceiptsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetShopReceipt request
	GetShopReceipt(ctx context.Context, shopId int, receiptId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateShopReceiptWithBody request with any body
	UpdateShopReceiptWithBody(ctx context.Context, shopId int, receiptId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateShopReceiptWithFormdataBody(ctx context.Context, shopId int, receiptId int, body UpdateShopReceiptFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetListingsByShopReceipt request
	GetListingsByShopReceipt(ctx context.Context, shopId int, receiptId int, params *GetListingsByShopReceiptParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetShopPaymentByReceiptId request
	GetShopPaymentByReceiptId(ctx context.Context, shopId int, receiptId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateReceiptShipmentWithBody request with any body
	CreateReceiptShipmentWithBody(ctx context.Context, shopId int, receiptId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateReceiptShipmentWithFormdataBody(ctx context.Context, shopId int, receiptId int, body CreateReceiptShipmentFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetShopReceiptTransactionsByReceipt request
	GetShopReceiptTransactionsByReceipt(ctx context.Context, shopId int, receiptId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetReviewsByShop request
	GetReviewsByShop(ctx context.Context, shopId int, params *GetReviewsByShopParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetShopSections request
	GetShopSections(ctx context.Context, shopId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateShopSectionWithBody request with any body
	CreateShopSectionWithBody(ctx context.Context, shopId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateShopSectionWithFormdataBody(ctx context.Context, shopId int, body CreateShopSectionFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteShopSection request
	DeleteShopSection(ctx context.Context, shopId int, shopSectionId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetShopSection request
	GetShopSection(ctx context.Context, shopId int, shopSectionId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateShopSectionWithBody request with any body
	UpdateShopSectionWithBody(ctx context.Context, shopId int, shopSectionId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateShopSectionWithFormdataBody(ctx context.Context, shopId int, shopSectionId int, body UpdateShopSectionFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetShopShippingProfiles request
	GetShopShippingProfiles(ctx context.Context, shopId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateShopShippingProfileWithBody request with any body
	CreateShopShippingProfileWithBody(ctx context.Context, shopId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateShopShippingProfileWithFormdataBody(ctx context.Context, shopId int, body CreateShopShippingProfileFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteShopShippingProfile request
	DeleteShopShippingProfile(ctx context.Context, shopId int, shippingProfileId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetShopShippingProfile request
	GetShopShippingProfile(ctx context.Context, shopId int, shippingProfileId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateShopShippingProfileWithBody request with any body
	UpdateShopShippingProfileWithBody(ctx context.Context, shopId int, shippingProfileId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateShopShippingProfileWithFormdataBody(ctx context.Context, shopId int, shippingProfileId int, body UpdateShopShippingProfileFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetShopShippingProfileDestinationsByShippingProfile request
	GetShopShippingProfileDestinationsByShippingProfile(ctx context.Context, shopId int, shippingProfileId int, params *GetShopShippingProfileDestinationsByShippingProfileParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateShopShippingProfileDestinationWithBody request with any body
	CreateShopShippingProfileDestinationWithBody(ctx context.Context, shopId int, shippingProfileId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateShopShippingProfileDestinationWithFormdataBody(ctx context.Context, shopId int, shippingProfileId int, body CreateShopShippingProfileDestinationFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteShopShippingProfileDestination request
	DeleteShopShippingProfileDestination(ctx context.Context, shopId int, shippingProfileId int, shippingProfileDestinationId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateShopShippingProfileDestinationWithBody request with any body
	UpdateShopShippingProfileDestinationWithBody(ctx context.Context, shopId int, shippingProfileId int, shippingProfileDestinationId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateShopShippingProfileDestinationWithFormdataBody(ctx context.Context, shopId int, shippingProfileId int, shippingProfileDestinationId int, body UpdateShopShippingProfileDestinationFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetShopShippingProfileUpgrades request
	GetShopShippingProfileUpgrades(ctx context.Context, shopId int, shippingProfileId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateShopShippingProfileUpgradeWithBody request with any body
	CreateShopShippingProfileUpgradeWithBody(ctx context.Context, shopId int, shippingProfileId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateShopShippingProfileUpgradeWithFormdataBody(ctx context.Context, shopId int, shippingProfileId int, body CreateShopShippingProfileUpgradeFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteShopShippingProfileUpgrade request
	DeleteShopShippingProfileUpgrade(ctx context.Context, shopId int, shippingProfileId int, upgradeId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateShopShippingProfileUpgradeWithBody request with any body
	UpdateShopShippingProfileUpgradeWithBody(ctx context.Context, shopId int, shippingProfileId int, upgradeId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateShopShippingProfileUpgradeWithFormdataBody(ctx context.Context, shopId int, shippingProfileId int, upgradeId int, body UpdateShopShippingProfileUpgradeFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetListingsByShopSectionId request
	GetListingsByShopSectionId(ctx context.Context, shopId int, params *GetListingsByShopSectionIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetShopReceiptTransactionsByShop request
	GetShopReceiptTransactionsByShop(ctx context.Context, shopId int, params *GetShopReceiptTransactionsByShopParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetShopReceiptTransaction request
	GetShopReceiptTransaction(ctx context.Context, shopId int, transactionId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserAddresses request
	GetUserAddresses(ctx context.Context, params *GetUserAddressesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteUserAddress request
	DeleteUserAddress(ctx context.Context, userAddressId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserAddress request
	GetUserAddress(ctx context.Context, userAddressId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMe request
	GetMe(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUser request
	GetUser(ctx context.Context, userId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetShopByOwnerUserId request
	GetShopByOwnerUserId(ctx context.Context, userId int, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetBuyerTaxonomyNodes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBuyerTaxonomyNodesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPropertiesByBuyerTaxonomyId(ctx context.Context, taxonomyId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPropertiesByBuyerTaxonomyIdRequest(c.Server, taxonomyId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindAllListingsActive(ctx context.Context, params *FindAllListingsActiveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindAllListingsActiveRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetListingsByListingIds(ctx context.Context, params *GetListingsByListingIdsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetListingsByListingIdsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteListing(ctx context.Context, listingId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteListingRequest(c.Server, listingId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetListing(ctx context.Context, listingId int, params *GetListingParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetListingRequest(c.Server, listingId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetListingImages(ctx context.Context, listingId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetListingImagesRequest(c.Server, listingId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetListingImage(ctx context.Context, listingId int, listingImageId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetListingImageRequest(c.Server, listingId, listingImageId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetListingInventory(ctx context.Context, listingId int, params *GetListingInventoryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetListingInventoryRequest(c.Server, listingId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateListingInventoryWithBody(ctx context.Context, listingId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateListingInventoryRequestWithBody(c.Server, listingId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateListingInventory(ctx context.Context, listingId int, body UpdateListingInventoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateListingInventoryRequest(c.Server, listingId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetListingProduct(ctx context.Context, listingId int, productId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetListingProductRequest(c.Server, listingId, productId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetListingOffering(ctx context.Context, listingId int, productId int, productOfferingId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetListingOfferingRequest(c.Server, listingId, productId, productOfferingId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetListingProperty(ctx context.Context, listingId int, propertyId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetListingPropertyRequest(c.Server, listingId, propertyId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetReviewsByListing(ctx context.Context, listingId int, params *GetReviewsByListingParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetReviewsByListingRequest(c.Server, listingId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetListingVideos(ctx context.Context, listingId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetListingVideosRequest(c.Server, listingId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetListingVideo(ctx context.Context, listingId int, videoId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetListingVideoRequest(c.Server, listingId, videoId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Ping(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPingRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TokenScopesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTokenScopesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TokenScopesWithFormdataBody(ctx context.Context, body TokenScopesFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTokenScopesRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSellerTaxonomyNodes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSellerTaxonomyNodesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPropertiesByTaxonomyId(ctx context.Context, taxonomyId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPropertiesByTaxonomyIdRequest(c.Server, taxonomyId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetShippingCarriers(ctx context.Context, params *GetShippingCarriersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetShippingCarriersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindShops(ctx context.Context, params *FindShopsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindShopsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetShop(ctx context.Context, shopId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetShopRequest(c.Server, shopId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateShopWithBody(ctx context.Context, shopId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateShopRequestWithBody(c.Server, shopId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateShopWithFormdataBody(ctx context.Context, shopId int, body UpdateShopFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateShopRequestWithFormdataBody(c.Server, shopId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetListingsByShop(ctx context.Context, shopId int, params *GetListingsByShopParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetListingsByShopRequest(c.Server, shopId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateDraftListingWithBody(ctx context.Context, shopId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateDraftListingRequestWithBody(c.Server, shopId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateDraftListingWithFormdataBody(ctx context.Context, shopId int, body CreateDraftListingFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateDraftListingRequestWithFormdataBody(c.Server, shopId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindAllActiveListingsByShop(ctx context.Context, shopId int, params *FindAllActiveListingsByShopParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindAllActiveListingsByShopRequest(c.Server, shopId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFeaturedListingsByShop(ctx context.Context, shopId int, params *GetFeaturedListingsByShopParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFeaturedListingsByShopRequest(c.Server, shopId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateListingWithBody(ctx context.Context, shopId int, listingId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateListingRequestWithBody(c.Server, shopId, listingId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateListingWithFormdataBody(ctx context.Context, shopId int, listingId int, body UpdateListingFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateListingRequestWithFormdataBody(c.Server, shopId, listingId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateListingDeprecatedWithBody(ctx context.Context, shopId int, listingId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateListingDeprecatedRequestWithBody(c.Server, shopId, listingId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateListingDeprecatedWithFormdataBody(ctx context.Context, shopId int, listingId int, body UpdateListingDeprecatedFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateListingDeprecatedRequestWithFormdataBody(c.Server, shopId, listingId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllListingFiles(ctx context.Context, shopId int, listingId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllListingFilesRequest(c.Server, shopId, listingId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UploadListingFileWithBody(ctx context.Context, shopId int, listingId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUploadListingFileRequestWithBody(c.Server, shopId, listingId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteListingFile(ctx context.Context, shopId int, listingId int, listingFileId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteListingFileRequest(c.Server, shopId, listingId, listingFileId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetListingFile(ctx context.Context, shopId int, listingId int, listingFileId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetListingFileRequest(c.Server, shopId, listingId, listingFileId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetListingImagesDeprecated(ctx context.Context, shopId int, listingId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetListingImagesDeprecatedRequest(c.Server, shopId, listingId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UploadListingImageWithBody(ctx context.Context, shopId int, listingId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUploadListingImageRequestWithBody(c.Server, shopId, listingId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteListingImage(ctx context.Context, shopId int, listingId int, listingImageId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteListingImageRequest(c.Server, shopId, listingId, listingImageId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetListingImageDeprecated(ctx context.Context, shopId int, listingId int, listingImageId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetListingImageDeprecatedRequest(c.Server, shopId, listingId, listingImageId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetListingProperties(ctx context.Context, shopId int, listingId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetListingPropertiesRequest(c.Server, shopId, listingId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteListingProperty(ctx context.Context, shopId int, listingId int, propertyId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteListingPropertyRequest(c.Server, shopId, listingId, propertyId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateListingPropertyWithBody(ctx context.Context, shopId int, listingId int, propertyId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateListingPropertyRequestWithBody(c.Server, shopId, listingId, propertyId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateListingPropertyWithFormdataBody(ctx context.Context, shopId int, listingId int, propertyId int, body UpdateListingPropertyFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateListingPropertyRequestWithFormdataBody(c.Server, shopId, listingId, propertyId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetShopReceiptTransactionsByListing(ctx context.Context, shopId int, listingId int, params *GetShopReceiptTransactionsByListingParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetShopReceiptTransactionsByListingRequest(c.Server, shopId, listingId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetListingTranslation(ctx context.Context, shopId int, listingId int, language string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetListingTranslationRequest(c.Server, shopId, listingId, language)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateListingTranslationWithBody(ctx context.Context, shopId int, listingId int, language string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateListingTranslationRequestWithBody(c.Server, shopId, listingId, language, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateListingTranslationWithFormdataBody(ctx context.Context, shopId int, listingId int, language string, body CreateListingTranslationFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateListingTranslationRequestWithFormdataBody(c.Server, shopId, listingId, language, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateListingTranslationWithBody(ctx context.Context, shopId int, listingId int, language string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateListingTranslationRequestWithBody(c.Server, shopId, listingId, language, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateListingTranslationWithFormdataBody(ctx context.Context, shopId int, listingId int, language string, body UpdateListingTranslationFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateListingTranslationRequestWithFormdataBody(c.Server, shopId, listingId, language, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetListingVariationImages(ctx context.Context, shopId int, listingId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetListingVariationImagesRequest(c.Server, shopId, listingId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateVariationImagesWithBody(ctx context.Context, shopId int, listingId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateVariationImagesRequestWithBody(c.Server, shopId, listingId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateVariationImages(ctx context.Context, shopId int, listingId int, body UpdateVariationImagesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateVariationImagesRequest(c.Server, shopId, listingId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UploadListingVideoWithBody(ctx context.Context, shopId int, listingId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUploadListingVideoRequestWithBody(c.Server, shopId, listingId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteListingVideo(ctx context.Context, shopId int, listingId int, videoId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteListingVideoRequest(c.Server, shopId, listingId, videoId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetShopPaymentAccountLedgerEntries(ctx context.Context, shopId int, params *GetShopPaymentAccountLedgerEntriesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetShopPaymentAccountLedgerEntriesRequest(c.Server, shopId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPaymentAccountLedgerEntryPayments(ctx context.Context, shopId int, params *GetPaymentAccountLedgerEntryPaymentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPaymentAccountLedgerEntryPaymentsRequest(c.Server, shopId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetShopPaymentAccountLedgerEntry(ctx context.Context, shopId int, ledgerEntryId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetShopPaymentAccountLedgerEntryRequest(c.Server, shopId, ledgerEntryId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPayments(ctx context.Context, shopId int, params *GetPaymentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPaymentsRequest(c.Server, shopId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetShopReturnPolicies(ctx context.Context, shopId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetShopReturnPoliciesRequest(c.Server, shopId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateShopReturnPolicyWithBody(ctx context.Context, shopId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateShopReturnPolicyRequestWithBody(c.Server, shopId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateShopReturnPolicyWithFormdataBody(ctx context.Context, shopId int, body CreateShopReturnPolicyFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateShopReturnPolicyRequestWithFormdataBody(c.Server, shopId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ConsolidateShopReturnPoliciesWithBody(ctx context.Context, shopId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewConsolidateShopReturnPoliciesRequestWithBody(c.Server, shopId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ConsolidateShopReturnPoliciesWithFormdataBody(ctx context.Context, shopId int, body ConsolidateShopReturnPoliciesFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewConsolidateShopReturnPoliciesRequestWithFormdataBody(c.Server, shopId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteShopReturnPolicy(ctx context.Context, shopId int, returnPolicyId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteShopReturnPolicyRequest(c.Server, shopId, returnPolicyId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetShopReturnPolicy(ctx context.Context, shopId int, returnPolicyId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetShopReturnPolicyRequest(c.Server, shopId, returnPolicyId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateShopReturnPolicyWithBody(ctx context.Context, shopId int, returnPolicyId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateShopReturnPolicyRequestWithBody(c.Server, shopId, returnPolicyId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateShopReturnPolicyWithFormdataBody(ctx context.Context, shopId int, returnPolicyId int, body UpdateShopReturnPolicyFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateShopReturnPolicyRequestWithFormdataBody(c.Server, shopId, returnPolicyId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetListingsByShopReturnPolicy(ctx context.Context, shopId int, returnPolicyId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetListingsByShopReturnPolicyRequest(c.Server, shopId, returnPolicyId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetShopProductionPartners(ctx context.Context, shopId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetShopProductionPartnersRequest(c.Server, shopId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetShopReceipts(ctx context.Context, shopId int, params *GetShopReceiptsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetShopReceiptsRequest(c.Server, shopId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetShopReceipt(ctx context.Context, shopId int, receiptId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetShopReceiptRequest(c.Server, shopId, receiptId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateShopReceiptWithBody(ctx context.Context, shopId int, receiptId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateShopReceiptRequestWithBody(c.Server, shopId, receiptId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateShopReceiptWithFormdataBody(ctx context.Context, shopId int, receiptId int, body UpdateShopReceiptFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateShopReceiptRequestWithFormdataBody(c.Server, shopId, receiptId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetListingsByShopReceipt(ctx context.Context, shopId int, receiptId int, params *GetListingsByShopReceiptParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetListingsByShopReceiptRequest(c.Server, shopId, receiptId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetShopPaymentByReceiptId(ctx context.Context, shopId int, receiptId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetShopPaymentByReceiptIdRequest(c.Server, shopId, receiptId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateReceiptShipmentWithBody(ctx context.Context, shopId int, receiptId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateReceiptShipmentRequestWithBody(c.Server, shopId, receiptId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateReceiptShipmentWithFormdataBody(ctx context.Context, shopId int, receiptId int, body CreateReceiptShipmentFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateReceiptShipmentRequestWithFormdataBody(c.Server, shopId, receiptId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetShopReceiptTransactionsByReceipt(ctx context.Context, shopId int, receiptId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetShopReceiptTransactionsByReceiptRequest(c.Server, shopId, receiptId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetReviewsByShop(ctx context.Context, shopId int, params *GetReviewsByShopParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetReviewsByShopRequest(c.Server, shopId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetShopSections(ctx context.Context, shopId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetShopSectionsRequest(c.Server, shopId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateShopSectionWithBody(ctx context.Context, shopId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateShopSectionRequestWithBody(c.Server, shopId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateShopSectionWithFormdataBody(ctx context.Context, shopId int, body CreateShopSectionFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateShopSectionRequestWithFormdataBody(c.Server, shopId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteShopSection(ctx context.Context, shopId int, shopSectionId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteShopSectionRequest(c.Server, shopId, shopSectionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetShopSection(ctx context.Context, shopId int, shopSectionId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetShopSectionRequest(c.Server, shopId, shopSectionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateShopSectionWithBody(ctx context.Context, shopId int, shopSectionId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateShopSectionRequestWithBody(c.Server, shopId, shopSectionId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateShopSectionWithFormdataBody(ctx context.Context, shopId int, shopSectionId int, body UpdateShopSectionFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateShopSectionRequestWithFormdataBody(c.Server, shopId, shopSectionId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetShopShippingProfiles(ctx context.Context, shopId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetShopShippingProfilesRequest(c.Server, shopId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateShopShippingProfileWithBody(ctx context.Context, shopId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateShopShippingProfileRequestWithBody(c.Server, shopId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateShopShippingProfileWithFormdataBody(ctx context.Context, shopId int, body CreateShopShippingProfileFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateShopShippingProfileRequestWithFormdataBody(c.Server, shopId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteShopShippingProfile(ctx context.Context, shopId int, shippingProfileId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteShopShippingProfileRequest(c.Server, shopId, shippingProfileId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetShopShippingProfile(ctx context.Context, shopId int, shippingProfileId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetShopShippingProfileRequest(c.Server, shopId, shippingProfileId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateShopShippingProfileWithBody(ctx context.Context, shopId int, shippingProfileId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateShopShippingProfileRequestWithBody(c.Server, shopId, shippingProfileId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateShopShippingProfileWithFormdataBody(ctx context.Context, shopId int, shippingProfileId int, body UpdateShopShippingProfileFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateShopShippingProfileRequestWithFormdataBody(c.Server, shopId, shippingProfileId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetShopShippingProfileDestinationsByShippingProfile(ctx context.Context, shopId int, shippingProfileId int, params *GetShopShippingProfileDestinationsByShippingProfileParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetShopShippingProfileDestinationsByShippingProfileRequest(c.Server, shopId, shippingProfileId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateShopShippingProfileDestinationWithBody(ctx context.Context, shopId int, shippingProfileId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateShopShippingProfileDestinationRequestWithBody(c.Server, shopId, shippingProfileId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateShopShippingProfileDestinationWithFormdataBody(ctx context.Context, shopId int, shippingProfileId int, body CreateShopShippingProfileDestinationFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateShopShippingProfileDestinationRequestWithFormdataBody(c.Server, shopId, shippingProfileId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteShopShippingProfileDestination(ctx context.Context, shopId int, shippingProfileId int, shippingProfileDestinationId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteShopShippingProfileDestinationRequest(c.Server, shopId, shippingProfileId, shippingProfileDestinationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateShopShippingProfileDestinationWithBody(ctx context.Context, shopId int, shippingProfileId int, shippingProfileDestinationId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateShopShippingProfileDestinationRequestWithBody(c.Server, shopId, shippingProfileId, shippingProfileDestinationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateShopShippingProfileDestinationWithFormdataBody(ctx context.Context, shopId int, shippingProfileId int, shippingProfileDestinationId int, body UpdateShopShippingProfileDestinationFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateShopShippingProfileDestinationRequestWithFormdataBody(c.Server, shopId, shippingProfileId, shippingProfileDestinationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetShopShippingProfileUpgrades(ctx context.Context, shopId int, shippingProfileId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetShopShippingProfileUpgradesRequest(c.Server, shopId, shippingProfileId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateShopShippingProfileUpgradeWithBody(ctx context.Context, shopId int, shippingProfileId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateShopShippingProfileUpgradeRequestWithBody(c.Server, shopId, shippingProfileId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateShopShippingProfileUpgradeWithFormdataBody(ctx context.Context, shopId int, shippingProfileId int, body CreateShopShippingProfileUpgradeFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateShopShippingProfileUpgradeRequestWithFormdataBody(c.Server, shopId, shippingProfileId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteShopShippingProfileUpgrade(ctx context.Context, shopId int, shippingProfileId int, upgradeId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteShopShippingProfileUpgradeRequest(c.Server, shopId, shippingProfileId, upgradeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateShopShippingProfileUpgradeWithBody(ctx context.Context, shopId int, shippingProfileId int, upgradeId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateShopShippingProfileUpgradeRequestWithBody(c.Server, shopId, shippingProfileId, upgradeId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateShopShippingProfileUpgradeWithFormdataBody(ctx context.Context, shopId int, shippingProfileId int, upgradeId int, body UpdateShopShippingProfileUpgradeFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateShopShippingProfileUpgradeRequestWithFormdataBody(c.Server, shopId, shippingProfileId, upgradeId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetListingsByShopSectionId(ctx context.Context, shopId int, params *GetListingsByShopSectionIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetListingsByShopSectionIdRequest(c.Server, shopId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetShopReceiptTransactionsByShop(ctx context.Context, shopId int, params *GetShopReceiptTransactionsByShopParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetShopReceiptTransactionsByShopRequest(c.Server, shopId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetShopReceiptTransaction(ctx context.Context, shopId int, transactionId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetShopReceiptTransactionRequest(c.Server, shopId, transactionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserAddresses(ctx context.Context, params *GetUserAddressesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserAddressesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteUserAddress(ctx context.Context, userAddressId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteUserAddressRequest(c.Server, userAddressId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserAddress(ctx context.Context, userAddressId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserAddressRequest(c.Server, userAddressId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMe(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMeRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUser(ctx context.Context, userId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserRequest(c.Server, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetShopByOwnerUserId(ctx context.Context, userId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetShopByOwnerUserIdRequest(c.Server, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetBuyerTaxonomyNodesRequest generates requests for GetBuyerTaxonomyNodes
func NewGetBuyerTaxonomyNodesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/application/buyer-taxonomy/nodes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPropertiesByBuyerTaxonomyIdRequest generates requests for GetPropertiesByBuyerTaxonomyId
func NewGetPropertiesByBuyerTaxonomyIdRequest(server string, taxonomyId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "taxonomy_id", runtime.ParamLocationPath, taxonomyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/application/buyer-taxonomy/nodes/%s/properties", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFindAllListingsActiveRequest generates requests for FindAllListingsActive
func NewFindAllListingsActiveRequest(server string, params *FindAllListingsActiveParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/application/listings/active")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Keywords != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "keywords", runtime.ParamLocationQuery, *params.Keywords); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortOn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort_on", runtime.ParamLocationQuery, *params.SortOn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortOrder != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort_order", runtime.ParamLocationQuery, *params.SortOrder); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MinPrice != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "min_price", runtime.ParamLocationQuery, *params.MinPrice); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MaxPrice != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "max_price", runtime.ParamLocationQuery, *params.MaxPrice); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TaxonomyId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "taxonomy_id", runtime.ParamLocationQuery, *params.TaxonomyId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ShopLocation != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "shop_location", runtime.ParamLocationQuery, *params.ShopLocation); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetListingsByListingIdsRequest generates requests for GetListingsByListingIds
func NewGetListingsByListingIdsRequest(server string, params *GetListingsByListingIdsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/application/listings/batch")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "listing_ids", runtime.ParamLocationQuery, params.ListingIds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Includes != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includes", runtime.ParamLocationQuery, *params.Includes); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteListingRequest generates requests for DeleteListing
func NewDeleteListingRequest(server string, listingId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "listing_id", runtime.ParamLocationPath, listingId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/application/listings/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetListingRequest generates requests for GetListing
func NewGetListingRequest(server string, listingId int, params *GetListingParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "listing_id", runtime.ParamLocationPath, listingId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/application/listings/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Includes != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includes", runtime.ParamLocationQuery, *params.Includes); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Language != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "language", runtime.ParamLocationQuery, *params.Language); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetListingImagesRequest generates requests for GetListingImages
func NewGetListingImagesRequest(server string, listingId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "listing_id", runtime.ParamLocationPath, listingId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/application/listings/%s/images", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetListingImageRequest generates requests for GetListingImage
func NewGetListingImageRequest(server string, listingId int, listingImageId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "listing_id", runtime.ParamLocationPath, listingId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "listing_image_id", runtime.ParamLocationPath, listingImageId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/application/listings/%s/images/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetListingInventoryRequest generates requests for GetListingInventory
func NewGetListingInventoryRequest(server string, listingId int, params *GetListingInventoryParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "listing_id", runtime.ParamLocationPath, listingId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/application/listings/%s/inventory", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ShowDeleted != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "show_deleted", runtime.ParamLocationQuery, *params.ShowDeleted); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Includes != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includes", runtime.ParamLocationQuery, *params.Includes); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateListingInventoryRequest calls the generic UpdateListingInventory builder with application/json body
func NewUpdateListingInventoryRequest(server string, listingId int, body UpdateListingInventoryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateListingInventoryRequestWithBody(server, listingId, "application/json", bodyReader)
}

// NewUpdateListingInventoryRequestWithBody generates requests for UpdateListingInventory with any type of body
func NewUpdateListingInventoryRequestWithBody(server string, listingId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "listing_id", runtime.ParamLocationPath, listingId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/application/listings/%s/inventory", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetListingProductRequest generates requests for GetListingProduct
func NewGetListingProductRequest(server string, listingId int, productId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "listing_id", runtime.ParamLocationPath, listingId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "product_id", runtime.ParamLocationPath, productId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/application/listings/%s/inventory/products/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetListingOfferingRequest generates requests for GetListingOffering
func NewGetListingOfferingRequest(server string, listingId int, productId int, productOfferingId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "listing_id", runtime.ParamLocationPath, listingId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "product_id", runtime.ParamLocationPath, productId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "product_offering_id", runtime.ParamLocationPath, productOfferingId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/application/listings/%s/products/%s/offerings/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetListingPropertyRequest generates requests for GetListingProperty
func NewGetListingPropertyRequest(server string, listingId int, propertyId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "listing_id", runtime.ParamLocationPath, listingId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "property_id", runtime.ParamLocationPath, propertyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/application/listings/%s/properties/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetReviewsByListingRequest generates requests for GetReviewsByListing
func NewGetReviewsByListingRequest(server string, listingId int, params *GetReviewsByListingParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "listing_id", runtime.ParamLocationPath, listingId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/application/listings/%s/reviews", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MinCreated != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "min_created", runtime.ParamLocationQuery, *params.MinCreated); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MaxCreated != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "max_created", runtime.ParamLocationQuery, *params.MaxCreated); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetListingVideosRequest generates requests for GetListingVideos
func NewGetListingVideosRequest(server string, listingId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "listing_id", runtime.ParamLocationPath, listingId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/application/listings/%s/videos", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetListingVideoRequest generates requests for GetListingVideo
func NewGetListingVideoRequest(server string, listingId int, videoId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "listing_id", runtime.ParamLocationPath, listingId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "video_id", runtime.ParamLocationPath, videoId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/application/listings/%s/videos/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPingRequest generates requests for Ping
func NewPingRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/application/openapi-ping")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTokenScopesRequestWithFormdataBody calls the generic TokenScopes builder with application/x-www-form-urlencoded body
func NewTokenScopesRequestWithFormdataBody(server string, body TokenScopesFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewTokenScopesRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewTokenScopesRequestWithBody generates requests for TokenScopes with any type of body
func NewTokenScopesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/application/scopes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSellerTaxonomyNodesRequest generates requests for GetSellerTaxonomyNodes
func NewGetSellerTaxonomyNodesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/application/seller-taxonomy/nodes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPropertiesByTaxonomyIdRequest generates requests for GetPropertiesByTaxonomyId
func NewGetPropertiesByTaxonomyIdRequest(server string, taxonomyId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "taxonomy_id", runtime.ParamLocationPath, taxonomyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/application/seller-taxonomy/nodes/%s/properties", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetShippingCarriersRequest generates requests for GetShippingCarriers
func NewGetShippingCarriersRequest(server string, params *GetShippingCarriersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/application/shipping-carriers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "origin_country_iso", runtime.ParamLocationQuery, params.OriginCountryIso); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFindShopsRequest generates requests for FindShops
func NewFindShopsRequest(server string, params *FindShopsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/application/shops")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "shop_name", runtime.ParamLocationQuery, params.ShopName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetShopRequest generates requests for GetShop
func NewGetShopRequest(server string, shopId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shop_id", runtime.ParamLocationPath, shopId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/application/shops/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateShopRequestWithFormdataBody calls the generic UpdateShop builder with application/x-www-form-urlencoded body
func NewUpdateShopRequestWithFormdataBody(server string, shopId int, body UpdateShopFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewUpdateShopRequestWithBody(server, shopId, "application/x-www-form-urlencoded", bodyReader)
}

// NewUpdateShopRequestWithBody generates requests for UpdateShop with any type of body
func NewUpdateShopRequestWithBody(server string, shopId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shop_id", runtime.ParamLocationPath, shopId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/application/shops/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetListingsByShopRequest generates requests for GetListingsByShop
func NewGetListingsByShopRequest(server string, shopId int, params *GetListingsByShopParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shop_id", runtime.ParamLocationPath, shopId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/application/shops/%s/listings", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.State != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "state", runtime.ParamLocationQuery, *params.State); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortOn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort_on", runtime.ParamLocationQuery, *params.SortOn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortOrder != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort_order", runtime.ParamLocationQuery, *params.SortOrder); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Includes != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includes", runtime.ParamLocationQuery, *params.Includes); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateDraftListingRequestWithFormdataBody calls the generic CreateDraftListing builder with application/x-www-form-urlencoded body
func NewCreateDraftListingRequestWithFormdataBody(server string, shopId int, body CreateDraftListingFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewCreateDraftListingRequestWithBody(server, shopId, "application/x-www-form-urlencoded", bodyReader)
}

// NewCreateDraftListingRequestWithBody generates requests for CreateDraftListing with any type of body
func NewCreateDraftListingRequestWithBody(server string, shopId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shop_id", runtime.ParamLocationPath, shopId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/application/shops/%s/listings", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewFindAllActiveListingsByShopRequest generates requests for FindAllActiveListingsByShop
func NewFindAllActiveListingsByShopRequest(server string, shopId int, params *FindAllActiveListingsByShopParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shop_id", runtime.ParamLocationPath, shopId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/application/shops/%s/listings/active", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortOn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort_on", runtime.ParamLocationQuery, *params.SortOn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortOrder != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort_order", runtime.ParamLocationQuery, *params.SortOrder); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Keywords != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "keywords", runtime.ParamLocationQuery, *params.Keywords); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFeaturedListingsByShopRequest generates requests for GetFeaturedListingsByShop
func NewGetFeaturedListingsByShopRequest(server string, shopId int, params *GetFeaturedListingsByShopParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shop_id", runtime.ParamLocationPath, shopId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/application/shops/%s/listings/featured", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateListingRequestWithFormdataBody calls the generic UpdateListing builder with application/x-www-form-urlencoded body
func NewUpdateListingRequestWithFormdataBody(server string, shopId int, listingId int, body UpdateListingFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewUpdateListingRequestWithBody(server, shopId, listingId, "application/x-www-form-urlencoded", bodyReader)
}

// NewUpdateListingRequestWithBody generates requests for UpdateListing with any type of body
func NewUpdateListingRequestWithBody(server string, shopId int, listingId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shop_id", runtime.ParamLocationPath, shopId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "listing_id", runtime.ParamLocationPath, listingId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/application/shops/%s/listings/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateListingDeprecatedRequestWithFormdataBody calls the generic UpdateListingDeprecated builder with application/x-www-form-urlencoded body
func NewUpdateListingDeprecatedRequestWithFormdataBody(server string, shopId int, listingId int, body UpdateListingDeprecatedFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewUpdateListingDeprecatedRequestWithBody(server, shopId, listingId, "application/x-www-form-urlencoded", bodyReader)
}

// NewUpdateListingDeprecatedRequestWithBody generates requests for UpdateListingDeprecated with any type of body
func NewUpdateListingDeprecatedRequestWithBody(server string, shopId int, listingId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shop_id", runtime.ParamLocationPath, shopId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "listing_id", runtime.ParamLocationPath, listingId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/application/shops/%s/listings/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAllListingFilesRequest generates requests for GetAllListingFiles
func NewGetAllListingFilesRequest(server string, shopId int, listingId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shop_id", runtime.ParamLocationPath, shopId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "listing_id", runtime.ParamLocationPath, listingId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/application/shops/%s/listings/%s/files", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUploadListingFileRequestWithBody generates requests for UploadListingFile with any type of body
func NewUploadListingFileRequestWithBody(server string, shopId int, listingId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shop_id", runtime.ParamLocationPath, shopId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "listing_id", runtime.ParamLocationPath, listingId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/application/shops/%s/listings/%s/files", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteListingFileRequest generates requests for DeleteListingFile
func NewDeleteListingFileRequest(server string, shopId int, listingId int, listingFileId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shop_id", runtime.ParamLocationPath, shopId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "listing_id", runtime.ParamLocationPath, listingId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "listing_file_id", runtime.ParamLocationPath, listingFileId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/application/shops/%s/listings/%s/files/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetListingFileRequest generates requests for GetListingFile
func NewGetListingFileRequest(server string, shopId int, listingId int, listingFileId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shop_id", runtime.ParamLocationPath, shopId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "listing_id", runtime.ParamLocationPath, listingId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "listing_file_id", runtime.ParamLocationPath, listingFileId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/application/shops/%s/listings/%s/files/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetListingImagesDeprecatedRequest generates requests for GetListingImagesDeprecated
func NewGetListingImagesDeprecatedRequest(server string, shopId int, listingId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shop_id", runtime.ParamLocationPath, shopId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "listing_id", runtime.ParamLocationPath, listingId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/application/shops/%s/listings/%s/images", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUploadListingImageRequestWithBody generates requests for UploadListingImage with any type of body
func NewUploadListingImageRequestWithBody(server string, shopId int, listingId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shop_id", runtime.ParamLocationPath, shopId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "listing_id", runtime.ParamLocationPath, listingId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/application/shops/%s/listings/%s/images", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteListingImageRequest generates requests for DeleteListingImage
func NewDeleteListingImageRequest(server string, shopId int, listingId int, listingImageId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shop_id", runtime.ParamLocationPath, shopId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "listing_id", runtime.ParamLocationPath, listingId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "listing_image_id", runtime.ParamLocationPath, listingImageId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/application/shops/%s/listings/%s/images/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetListingImageDeprecatedRequest generates requests for GetListingImageDeprecated
func NewGetListingImageDeprecatedRequest(server string, shopId int, listingId int, listingImageId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shop_id", runtime.ParamLocationPath, shopId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "listing_id", runtime.ParamLocationPath, listingId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "listing_image_id", runtime.ParamLocationPath, listingImageId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/application/shops/%s/listings/%s/images/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetListingPropertiesRequest generates requests for GetListingProperties
func NewGetListingPropertiesRequest(server string, shopId int, listingId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shop_id", runtime.ParamLocationPath, shopId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "listing_id", runtime.ParamLocationPath, listingId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/application/shops/%s/listings/%s/properties", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteListingPropertyRequest generates requests for DeleteListingProperty
func NewDeleteListingPropertyRequest(server string, shopId int, listingId int, propertyId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shop_id", runtime.ParamLocationPath, shopId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "listing_id", runtime.ParamLocationPath, listingId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "property_id", runtime.ParamLocationPath, propertyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/application/shops/%s/listings/%s/properties/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateListingPropertyRequestWithFormdataBody calls the generic UpdateListingProperty builder with application/x-www-form-urlencoded body
func NewUpdateListingPropertyRequestWithFormdataBody(server string, shopId int, listingId int, propertyId int, body UpdateListingPropertyFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewUpdateListingPropertyRequestWithBody(server, shopId, listingId, propertyId, "application/x-www-form-urlencoded", bodyReader)
}

// NewUpdateListingPropertyRequestWithBody generates requests for UpdateListingProperty with any type of body
func NewUpdateListingPropertyRequestWithBody(server string, shopId int, listingId int, propertyId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shop_id", runtime.ParamLocationPath, shopId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "listing_id", runtime.ParamLocationPath, listingId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "property_id", runtime.ParamLocationPath, propertyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/application/shops/%s/listings/%s/properties/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetShopReceiptTransactionsByListingRequest generates requests for GetShopReceiptTransactionsByListing
func NewGetShopReceiptTransactionsByListingRequest(server string, shopId int, listingId int, params *GetShopReceiptTransactionsByListingParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shop_id", runtime.ParamLocationPath, shopId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "listing_id", runtime.ParamLocationPath, listingId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/application/shops/%s/listings/%s/transactions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetListingTranslationRequest generates requests for GetListingTranslation
func NewGetListingTranslationRequest(server string, shopId int, listingId int, language string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shop_id", runtime.ParamLocationPath, shopId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "listing_id", runtime.ParamLocationPath, listingId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "language", runtime.ParamLocationPath, language)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/application/shops/%s/listings/%s/translations/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateListingTranslationRequestWithFormdataBody calls the generic CreateListingTranslation builder with application/x-www-form-urlencoded body
func NewCreateListingTranslationRequestWithFormdataBody(server string, shopId int, listingId int, language string, body CreateListingTranslationFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewCreateListingTranslationRequestWithBody(server, shopId, listingId, language, "application/x-www-form-urlencoded", bodyReader)
}

// NewCreateListingTranslationRequestWithBody generates requests for CreateListingTranslation with any type of body
func NewCreateListingTranslationRequestWithBody(server string, shopId int, listingId int, language string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shop_id", runtime.ParamLocationPath, shopId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "listing_id", runtime.ParamLocationPath, listingId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "language", runtime.ParamLocationPath, language)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/application/shops/%s/listings/%s/translations/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateListingTranslationRequestWithFormdataBody calls the generic UpdateListingTranslation builder with application/x-www-form-urlencoded body
func NewUpdateListingTranslationRequestWithFormdataBody(server string, shopId int, listingId int, language string, body UpdateListingTranslationFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewUpdateListingTranslationRequestWithBody(server, shopId, listingId, language, "application/x-www-form-urlencoded", bodyReader)
}

// NewUpdateListingTranslationRequestWithBody generates requests for UpdateListingTranslation with any type of body
func NewUpdateListingTranslationRequestWithBody(server string, shopId int, listingId int, language string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shop_id", runtime.ParamLocationPath, shopId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "listing_id", runtime.ParamLocationPath, listingId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "language", runtime.ParamLocationPath, language)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/application/shops/%s/listings/%s/translations/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetListingVariationImagesRequest generates requests for GetListingVariationImages
func NewGetListingVariationImagesRequest(server string, shopId int, listingId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shop_id", runtime.ParamLocationPath, shopId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "listing_id", runtime.ParamLocationPath, listingId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/application/shops/%s/listings/%s/variation-images", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateVariationImagesRequest calls the generic UpdateVariationImages builder with application/json body
func NewUpdateVariationImagesRequest(server string, shopId int, listingId int, body UpdateVariationImagesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateVariationImagesRequestWithBody(server, shopId, listingId, "application/json", bodyReader)
}

// NewUpdateVariationImagesRequestWithBody generates requests for UpdateVariationImages with any type of body
func NewUpdateVariationImagesRequestWithBody(server string, shopId int, listingId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shop_id", runtime.ParamLocationPath, shopId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "listing_id", runtime.ParamLocationPath, listingId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/application/shops/%s/listings/%s/variation-images", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUploadListingVideoRequestWithBody generates requests for UploadListingVideo with any type of body
func NewUploadListingVideoRequestWithBody(server string, shopId int, listingId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shop_id", runtime.ParamLocationPath, shopId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "listing_id", runtime.ParamLocationPath, listingId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/application/shops/%s/listings/%s/videos", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteListingVideoRequest generates requests for DeleteListingVideo
func NewDeleteListingVideoRequest(server string, shopId int, listingId int, videoId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shop_id", runtime.ParamLocationPath, shopId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "listing_id", runtime.ParamLocationPath, listingId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "video_id", runtime.ParamLocationPath, videoId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/application/shops/%s/listings/%s/videos/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetShopPaymentAccountLedgerEntriesRequest generates requests for GetShopPaymentAccountLedgerEntries
func NewGetShopPaymentAccountLedgerEntriesRequest(server string, shopId int, params *GetShopPaymentAccountLedgerEntriesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shop_id", runtime.ParamLocationPath, shopId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/application/shops/%s/payment-account/ledger-entries", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "min_created", runtime.ParamLocationQuery, params.MinCreated); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "max_created", runtime.ParamLocationQuery, params.MaxCreated); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPaymentAccountLedgerEntryPaymentsRequest generates requests for GetPaymentAccountLedgerEntryPayments
func NewGetPaymentAccountLedgerEntryPaymentsRequest(server string, shopId int, params *GetPaymentAccountLedgerEntryPaymentsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shop_id", runtime.ParamLocationPath, shopId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/application/shops/%s/payment-account/ledger-entries/payments", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ledger_entry_ids", runtime.ParamLocationQuery, params.LedgerEntryIds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetShopPaymentAccountLedgerEntryRequest generates requests for GetShopPaymentAccountLedgerEntry
func NewGetShopPaymentAccountLedgerEntryRequest(server string, shopId int, ledgerEntryId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shop_id", runtime.ParamLocationPath, shopId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "ledger_entry_id", runtime.ParamLocationPath, ledgerEntryId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/application/shops/%s/payment-account/ledger-entries/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPaymentsRequest generates requests for GetPayments
func NewGetPaymentsRequest(server string, shopId int, params *GetPaymentsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shop_id", runtime.ParamLocationPath, shopId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/application/shops/%s/payments", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "payment_ids", runtime.ParamLocationQuery, params.PaymentIds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetShopReturnPoliciesRequest generates requests for GetShopReturnPolicies
func NewGetShopReturnPoliciesRequest(server string, shopId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shop_id", runtime.ParamLocationPath, shopId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/application/shops/%s/policies/return", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateShopReturnPolicyRequestWithFormdataBody calls the generic CreateShopReturnPolicy builder with application/x-www-form-urlencoded body
func NewCreateShopReturnPolicyRequestWithFormdataBody(server string, shopId int, body CreateShopReturnPolicyFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewCreateShopReturnPolicyRequestWithBody(server, shopId, "application/x-www-form-urlencoded", bodyReader)
}

// NewCreateShopReturnPolicyRequestWithBody generates requests for CreateShopReturnPolicy with any type of body
func NewCreateShopReturnPolicyRequestWithBody(server string, shopId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shop_id", runtime.ParamLocationPath, shopId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/application/shops/%s/policies/return", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewConsolidateShopReturnPoliciesRequestWithFormdataBody calls the generic ConsolidateShopReturnPolicies builder with application/x-www-form-urlencoded body
func NewConsolidateShopReturnPoliciesRequestWithFormdataBody(server string, shopId int, body ConsolidateShopReturnPoliciesFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewConsolidateShopReturnPoliciesRequestWithBody(server, shopId, "application/x-www-form-urlencoded", bodyReader)
}

// NewConsolidateShopReturnPoliciesRequestWithBody generates requests for ConsolidateShopReturnPolicies with any type of body
func NewConsolidateShopReturnPoliciesRequestWithBody(server string, shopId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shop_id", runtime.ParamLocationPath, shopId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/application/shops/%s/policies/return/consolidate", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteShopReturnPolicyRequest generates requests for DeleteShopReturnPolicy
func NewDeleteShopReturnPolicyRequest(server string, shopId int, returnPolicyId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shop_id", runtime.ParamLocationPath, shopId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "return_policy_id", runtime.ParamLocationPath, returnPolicyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/application/shops/%s/policies/return/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetShopReturnPolicyRequest generates requests for GetShopReturnPolicy
func NewGetShopReturnPolicyRequest(server string, shopId int, returnPolicyId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shop_id", runtime.ParamLocationPath, shopId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "return_policy_id", runtime.ParamLocationPath, returnPolicyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/application/shops/%s/policies/return/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateShopReturnPolicyRequestWithFormdataBody calls the generic UpdateShopReturnPolicy builder with application/x-www-form-urlencoded body
func NewUpdateShopReturnPolicyRequestWithFormdataBody(server string, shopId int, returnPolicyId int, body UpdateShopReturnPolicyFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewUpdateShopReturnPolicyRequestWithBody(server, shopId, returnPolicyId, "application/x-www-form-urlencoded", bodyReader)
}

// NewUpdateShopReturnPolicyRequestWithBody generates requests for UpdateShopReturnPolicy with any type of body
func NewUpdateShopReturnPolicyRequestWithBody(server string, shopId int, returnPolicyId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shop_id", runtime.ParamLocationPath, shopId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "return_policy_id", runtime.ParamLocationPath, returnPolicyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/application/shops/%s/policies/return/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetListingsByShopReturnPolicyRequest generates requests for GetListingsByShopReturnPolicy
func NewGetListingsByShopReturnPolicyRequest(server string, shopId int, returnPolicyId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shop_id", runtime.ParamLocationPath, shopId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "return_policy_id", runtime.ParamLocationPath, returnPolicyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/application/shops/%s/policies/return/%s/listings", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetShopProductionPartnersRequest generates requests for GetShopProductionPartners
func NewGetShopProductionPartnersRequest(server string, shopId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shop_id", runtime.ParamLocationPath, shopId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/application/shops/%s/production-partners", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetShopReceiptsRequest generates requests for GetShopReceipts
func NewGetShopReceiptsRequest(server string, shopId int, params *GetShopReceiptsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shop_id", runtime.ParamLocationPath, shopId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/application/shops/%s/receipts", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.MinCreated != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "min_created", runtime.ParamLocationQuery, *params.MinCreated); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MaxCreated != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "max_created", runtime.ParamLocationQuery, *params.MaxCreated); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MinLastModified != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "min_last_modified", runtime.ParamLocationQuery, *params.MinLastModified); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MaxLastModified != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "max_last_modified", runtime.ParamLocationQuery, *params.MaxLastModified); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortOn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort_on", runtime.ParamLocationQuery, *params.SortOn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortOrder != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort_order", runtime.ParamLocationQuery, *params.SortOrder); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WasPaid != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "was_paid", runtime.ParamLocationQuery, *params.WasPaid); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WasShipped != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "was_shipped", runtime.ParamLocationQuery, *params.WasShipped); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WasDelivered != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "was_delivered", runtime.ParamLocationQuery, *params.WasDelivered); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WasCanceled != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "was_canceled", runtime.ParamLocationQuery, *params.WasCanceled); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetShopReceiptRequest generates requests for GetShopReceipt
func NewGetShopReceiptRequest(server string, shopId int, receiptId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shop_id", runtime.ParamLocationPath, shopId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "receipt_id", runtime.ParamLocationPath, receiptId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/application/shops/%s/receipts/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateShopReceiptRequestWithFormdataBody calls the generic UpdateShopReceipt builder with application/x-www-form-urlencoded body
func NewUpdateShopReceiptRequestWithFormdataBody(server string, shopId int, receiptId int, body UpdateShopReceiptFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewUpdateShopReceiptRequestWithBody(server, shopId, receiptId, "application/x-www-form-urlencoded", bodyReader)
}

// NewUpdateShopReceiptRequestWithBody generates requests for UpdateShopReceipt with any type of body
func NewUpdateShopReceiptRequestWithBody(server string, shopId int, receiptId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shop_id", runtime.ParamLocationPath, shopId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "receipt_id", runtime.ParamLocationPath, receiptId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/application/shops/%s/receipts/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetListingsByShopReceiptRequest generates requests for GetListingsByShopReceipt
func NewGetListingsByShopReceiptRequest(server string, shopId int, receiptId int, params *GetListingsByShopReceiptParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shop_id", runtime.ParamLocationPath, shopId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "receipt_id", runtime.ParamLocationPath, receiptId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/application/shops/%s/receipts/%s/listings", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetShopPaymentByReceiptIdRequest generates requests for GetShopPaymentByReceiptId
func NewGetShopPaymentByReceiptIdRequest(server string, shopId int, receiptId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shop_id", runtime.ParamLocationPath, shopId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "receipt_id", runtime.ParamLocationPath, receiptId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/application/shops/%s/receipts/%s/payments", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateReceiptShipmentRequestWithFormdataBody calls the generic CreateReceiptShipment builder with application/x-www-form-urlencoded body
func NewCreateReceiptShipmentRequestWithFormdataBody(server string, shopId int, receiptId int, body CreateReceiptShipmentFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewCreateReceiptShipmentRequestWithBody(server, shopId, receiptId, "application/x-www-form-urlencoded", bodyReader)
}

// NewCreateReceiptShipmentRequestWithBody generates requests for CreateReceiptShipment with any type of body
func NewCreateReceiptShipmentRequestWithBody(server string, shopId int, receiptId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shop_id", runtime.ParamLocationPath, shopId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "receipt_id", runtime.ParamLocationPath, receiptId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/application/shops/%s/receipts/%s/tracking", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetShopReceiptTransactionsByReceiptRequest generates requests for GetShopReceiptTransactionsByReceipt
func NewGetShopReceiptTransactionsByReceiptRequest(server string, shopId int, receiptId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shop_id", runtime.ParamLocationPath, shopId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "receipt_id", runtime.ParamLocationPath, receiptId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/application/shops/%s/receipts/%s/transactions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetReviewsByShopRequest generates requests for GetReviewsByShop
func NewGetReviewsByShopRequest(server string, shopId int, params *GetReviewsByShopParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shop_id", runtime.ParamLocationPath, shopId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/application/shops/%s/reviews", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MinCreated != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "min_created", runtime.ParamLocationQuery, *params.MinCreated); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MaxCreated != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "max_created", runtime.ParamLocationQuery, *params.MaxCreated); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetShopSectionsRequest generates requests for GetShopSections
func NewGetShopSectionsRequest(server string, shopId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shop_id", runtime.ParamLocationPath, shopId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/application/shops/%s/sections", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateShopSectionRequestWithFormdataBody calls the generic CreateShopSection builder with application/x-www-form-urlencoded body
func NewCreateShopSectionRequestWithFormdataBody(server string, shopId int, body CreateShopSectionFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewCreateShopSectionRequestWithBody(server, shopId, "application/x-www-form-urlencoded", bodyReader)
}

// NewCreateShopSectionRequestWithBody generates requests for CreateShopSection with any type of body
func NewCreateShopSectionRequestWithBody(server string, shopId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shop_id", runtime.ParamLocationPath, shopId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/application/shops/%s/sections", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteShopSectionRequest generates requests for DeleteShopSection
func NewDeleteShopSectionRequest(server string, shopId int, shopSectionId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shop_id", runtime.ParamLocationPath, shopId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "shop_section_id", runtime.ParamLocationPath, shopSectionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/application/shops/%s/sections/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetShopSectionRequest generates requests for GetShopSection
func NewGetShopSectionRequest(server string, shopId int, shopSectionId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shop_id", runtime.ParamLocationPath, shopId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "shop_section_id", runtime.ParamLocationPath, shopSectionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/application/shops/%s/sections/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateShopSectionRequestWithFormdataBody calls the generic UpdateShopSection builder with application/x-www-form-urlencoded body
func NewUpdateShopSectionRequestWithFormdataBody(server string, shopId int, shopSectionId int, body UpdateShopSectionFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewUpdateShopSectionRequestWithBody(server, shopId, shopSectionId, "application/x-www-form-urlencoded", bodyReader)
}

// NewUpdateShopSectionRequestWithBody generates requests for UpdateShopSection with any type of body
func NewUpdateShopSectionRequestWithBody(server string, shopId int, shopSectionId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shop_id", runtime.ParamLocationPath, shopId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "shop_section_id", runtime.ParamLocationPath, shopSectionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/application/shops/%s/sections/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetShopShippingProfilesRequest generates requests for GetShopShippingProfiles
func NewGetShopShippingProfilesRequest(server string, shopId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shop_id", runtime.ParamLocationPath, shopId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/application/shops/%s/shipping-profiles", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateShopShippingProfileRequestWithFormdataBody calls the generic CreateShopShippingProfile builder with application/x-www-form-urlencoded body
func NewCreateShopShippingProfileRequestWithFormdataBody(server string, shopId int, body CreateShopShippingProfileFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewCreateShopShippingProfileRequestWithBody(server, shopId, "application/x-www-form-urlencoded", bodyReader)
}

// NewCreateShopShippingProfileRequestWithBody generates requests for CreateShopShippingProfile with any type of body
func NewCreateShopShippingProfileRequestWithBody(server string, shopId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shop_id", runtime.ParamLocationPath, shopId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/application/shops/%s/shipping-profiles", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteShopShippingProfileRequest generates requests for DeleteShopShippingProfile
func NewDeleteShopShippingProfileRequest(server string, shopId int, shippingProfileId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shop_id", runtime.ParamLocationPath, shopId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "shipping_profile_id", runtime.ParamLocationPath, shippingProfileId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/application/shops/%s/shipping-profiles/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetShopShippingProfileRequest generates requests for GetShopShippingProfile
func NewGetShopShippingProfileRequest(server string, shopId int, shippingProfileId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shop_id", runtime.ParamLocationPath, shopId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "shipping_profile_id", runtime.ParamLocationPath, shippingProfileId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/application/shops/%s/shipping-profiles/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateShopShippingProfileRequestWithFormdataBody calls the generic UpdateShopShippingProfile builder with application/x-www-form-urlencoded body
func NewUpdateShopShippingProfileRequestWithFormdataBody(server string, shopId int, shippingProfileId int, body UpdateShopShippingProfileFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewUpdateShopShippingProfileRequestWithBody(server, shopId, shippingProfileId, "application/x-www-form-urlencoded", bodyReader)
}

// NewUpdateShopShippingProfileRequestWithBody generates requests for UpdateShopShippingProfile with any type of body
func NewUpdateShopShippingProfileRequestWithBody(server string, shopId int, shippingProfileId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shop_id", runtime.ParamLocationPath, shopId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "shipping_profile_id", runtime.ParamLocationPath, shippingProfileId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/application/shops/%s/shipping-profiles/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetShopShippingProfileDestinationsByShippingProfileRequest generates requests for GetShopShippingProfileDestinationsByShippingProfile
func NewGetShopShippingProfileDestinationsByShippingProfileRequest(server string, shopId int, shippingProfileId int, params *GetShopShippingProfileDestinationsByShippingProfileParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shop_id", runtime.ParamLocationPath, shopId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "shipping_profile_id", runtime.ParamLocationPath, shippingProfileId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/application/shops/%s/shipping-profiles/%s/destinations", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateShopShippingProfileDestinationRequestWithFormdataBody calls the generic CreateShopShippingProfileDestination builder with application/x-www-form-urlencoded body
func NewCreateShopShippingProfileDestinationRequestWithFormdataBody(server string, shopId int, shippingProfileId int, body CreateShopShippingProfileDestinationFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewCreateShopShippingProfileDestinationRequestWithBody(server, shopId, shippingProfileId, "application/x-www-form-urlencoded", bodyReader)
}

// NewCreateShopShippingProfileDestinationRequestWithBody generates requests for CreateShopShippingProfileDestination with any type of body
func NewCreateShopShippingProfileDestinationRequestWithBody(server string, shopId int, shippingProfileId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shop_id", runtime.ParamLocationPath, shopId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "shipping_profile_id", runtime.ParamLocationPath, shippingProfileId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/application/shops/%s/shipping-profiles/%s/destinations", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteShopShippingProfileDestinationRequest generates requests for DeleteShopShippingProfileDestination
func NewDeleteShopShippingProfileDestinationRequest(server string, shopId int, shippingProfileId int, shippingProfileDestinationId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shop_id", runtime.ParamLocationPath, shopId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "shipping_profile_id", runtime.ParamLocationPath, shippingProfileId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "shipping_profile_destination_id", runtime.ParamLocationPath, shippingProfileDestinationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/application/shops/%s/shipping-profiles/%s/destinations/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateShopShippingProfileDestinationRequestWithFormdataBody calls the generic UpdateShopShippingProfileDestination builder with application/x-www-form-urlencoded body
func NewUpdateShopShippingProfileDestinationRequestWithFormdataBody(server string, shopId int, shippingProfileId int, shippingProfileDestinationId int, body UpdateShopShippingProfileDestinationFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewUpdateShopShippingProfileDestinationRequestWithBody(server, shopId, shippingProfileId, shippingProfileDestinationId, "application/x-www-form-urlencoded", bodyReader)
}

// NewUpdateShopShippingProfileDestinationRequestWithBody generates requests for UpdateShopShippingProfileDestination with any type of body
func NewUpdateShopShippingProfileDestinationRequestWithBody(server string, shopId int, shippingProfileId int, shippingProfileDestinationId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shop_id", runtime.ParamLocationPath, shopId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "shipping_profile_id", runtime.ParamLocationPath, shippingProfileId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "shipping_profile_destination_id", runtime.ParamLocationPath, shippingProfileDestinationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/application/shops/%s/shipping-profiles/%s/destinations/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetShopShippingProfileUpgradesRequest generates requests for GetShopShippingProfileUpgrades
func NewGetShopShippingProfileUpgradesRequest(server string, shopId int, shippingProfileId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shop_id", runtime.ParamLocationPath, shopId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "shipping_profile_id", runtime.ParamLocationPath, shippingProfileId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/application/shops/%s/shipping-profiles/%s/upgrades", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateShopShippingProfileUpgradeRequestWithFormdataBody calls the generic CreateShopShippingProfileUpgrade builder with application/x-www-form-urlencoded body
func NewCreateShopShippingProfileUpgradeRequestWithFormdataBody(server string, shopId int, shippingProfileId int, body CreateShopShippingProfileUpgradeFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewCreateShopShippingProfileUpgradeRequestWithBody(server, shopId, shippingProfileId, "application/x-www-form-urlencoded", bodyReader)
}

// NewCreateShopShippingProfileUpgradeRequestWithBody generates requests for CreateShopShippingProfileUpgrade with any type of body
func NewCreateShopShippingProfileUpgradeRequestWithBody(server string, shopId int, shippingProfileId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shop_id", runtime.ParamLocationPath, shopId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "shipping_profile_id", runtime.ParamLocationPath, shippingProfileId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/application/shops/%s/shipping-profiles/%s/upgrades", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteShopShippingProfileUpgradeRequest generates requests for DeleteShopShippingProfileUpgrade
func NewDeleteShopShippingProfileUpgradeRequest(server string, shopId int, shippingProfileId int, upgradeId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shop_id", runtime.ParamLocationPath, shopId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "shipping_profile_id", runtime.ParamLocationPath, shippingProfileId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "upgrade_id", runtime.ParamLocationPath, upgradeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/application/shops/%s/shipping-profiles/%s/upgrades/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateShopShippingProfileUpgradeRequestWithFormdataBody calls the generic UpdateShopShippingProfileUpgrade builder with application/x-www-form-urlencoded body
func NewUpdateShopShippingProfileUpgradeRequestWithFormdataBody(server string, shopId int, shippingProfileId int, upgradeId int, body UpdateShopShippingProfileUpgradeFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewUpdateShopShippingProfileUpgradeRequestWithBody(server, shopId, shippingProfileId, upgradeId, "application/x-www-form-urlencoded", bodyReader)
}

// NewUpdateShopShippingProfileUpgradeRequestWithBody generates requests for UpdateShopShippingProfileUpgrade with any type of body
func NewUpdateShopShippingProfileUpgradeRequestWithBody(server string, shopId int, shippingProfileId int, upgradeId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shop_id", runtime.ParamLocationPath, shopId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "shipping_profile_id", runtime.ParamLocationPath, shippingProfileId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "upgrade_id", runtime.ParamLocationPath, upgradeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/application/shops/%s/shipping-profiles/%s/upgrades/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetListingsByShopSectionIdRequest generates requests for GetListingsByShopSectionId
func NewGetListingsByShopSectionIdRequest(server string, shopId int, params *GetListingsByShopSectionIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shop_id", runtime.ParamLocationPath, shopId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/application/shops/%s/shop-sections/listings", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "shop_section_ids", runtime.ParamLocationQuery, params.ShopSectionIds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortOn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort_on", runtime.ParamLocationQuery, *params.SortOn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortOrder != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort_order", runtime.ParamLocationQuery, *params.SortOrder); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetShopReceiptTransactionsByShopRequest generates requests for GetShopReceiptTransactionsByShop
func NewGetShopReceiptTransactionsByShopRequest(server string, shopId int, params *GetShopReceiptTransactionsByShopParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shop_id", runtime.ParamLocationPath, shopId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/application/shops/%s/transactions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetShopReceiptTransactionRequest generates requests for GetShopReceiptTransaction
func NewGetShopReceiptTransactionRequest(server string, shopId int, transactionId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shop_id", runtime.ParamLocationPath, shopId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "transaction_id", runtime.ParamLocationPath, transactionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/application/shops/%s/transactions/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserAddressesRequest generates requests for GetUserAddresses
func NewGetUserAddressesRequest(server string, params *GetUserAddressesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/application/user/addresses")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteUserAddressRequest generates requests for DeleteUserAddress
func NewDeleteUserAddressRequest(server string, userAddressId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user_address_id", runtime.ParamLocationPath, userAddressId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/application/user/addresses/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserAddressRequest generates requests for GetUserAddress
func NewGetUserAddressRequest(server string, userAddressId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user_address_id", runtime.ParamLocationPath, userAddressId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/application/user/addresses/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMeRequest generates requests for GetMe
func NewGetMeRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/application/users/me")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserRequest generates requests for GetUser
func NewGetUserRequest(server string, userId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user_id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/application/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetShopByOwnerUserIdRequest generates requests for GetShopByOwnerUserId
func NewGetShopByOwnerUserIdRequest(server string, userId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user_id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/application/users/%s/shops", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetBuyerTaxonomyNodesWithResponse request
	GetBuyerTaxonomyNodesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetBuyerTaxonomyNodesResponse, error)

	// GetPropertiesByBuyerTaxonomyIdWithResponse request
	GetPropertiesByBuyerTaxonomyIdWithResponse(ctx context.Context, taxonomyId int, reqEditors ...RequestEditorFn) (*GetPropertiesByBuyerTaxonomyIdResponse, error)

	// FindAllListingsActiveWithResponse request
	FindAllListingsActiveWithResponse(ctx context.Context, params *FindAllListingsActiveParams, reqEditors ...RequestEditorFn) (*FindAllListingsActiveResponse, error)

	// GetListingsByListingIdsWithResponse request
	GetListingsByListingIdsWithResponse(ctx context.Context, params *GetListingsByListingIdsParams, reqEditors ...RequestEditorFn) (*GetListingsByListingIdsResponse, error)

	// DeleteListingWithResponse request
	DeleteListingWithResponse(ctx context.Context, listingId int, reqEditors ...RequestEditorFn) (*DeleteListingResponse, error)

	// GetListingWithResponse request
	GetListingWithResponse(ctx context.Context, listingId int, params *GetListingParams, reqEditors ...RequestEditorFn) (*GetListingResponse, error)

	// GetListingImagesWithResponse request
	GetListingImagesWithResponse(ctx context.Context, listingId int, reqEditors ...RequestEditorFn) (*GetListingImagesResponse, error)

	// GetListingImageWithResponse request
	GetListingImageWithResponse(ctx context.Context, listingId int, listingImageId int, reqEditors ...RequestEditorFn) (*GetListingImageResponse, error)

	// GetListingInventoryWithResponse request
	GetListingInventoryWithResponse(ctx context.Context, listingId int, params *GetListingInventoryParams, reqEditors ...RequestEditorFn) (*GetListingInventoryResponse, error)

	// UpdateListingInventoryWithBodyWithResponse request with any body
	UpdateListingInventoryWithBodyWithResponse(ctx context.Context, listingId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateListingInventoryResponse, error)

	UpdateListingInventoryWithResponse(ctx context.Context, listingId int, body UpdateListingInventoryJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateListingInventoryResponse, error)

	// GetListingProductWithResponse request
	GetListingProductWithResponse(ctx context.Context, listingId int, productId int, reqEditors ...RequestEditorFn) (*GetListingProductResponse, error)

	// GetListingOfferingWithResponse request
	GetListingOfferingWithResponse(ctx context.Context, listingId int, productId int, productOfferingId int, reqEditors ...RequestEditorFn) (*GetListingOfferingResponse, error)

	// GetListingPropertyWithResponse request
	GetListingPropertyWithResponse(ctx context.Context, listingId int, propertyId int, reqEditors ...RequestEditorFn) (*GetListingPropertyResponse, error)

	// GetReviewsByListingWithResponse request
	GetReviewsByListingWithResponse(ctx context.Context, listingId int, params *GetReviewsByListingParams, reqEditors ...RequestEditorFn) (*GetReviewsByListingResponse, error)

	// GetListingVideosWithResponse request
	GetListingVideosWithResponse(ctx context.Context, listingId int, reqEditors ...RequestEditorFn) (*GetListingVideosResponse, error)

	// GetListingVideoWithResponse request
	GetListingVideoWithResponse(ctx context.Context, listingId int, videoId int, reqEditors ...RequestEditorFn) (*GetListingVideoResponse, error)

	// PingWithResponse request
	PingWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PingResponse, error)

	// TokenScopesWithBodyWithResponse request with any body
	TokenScopesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TokenScopesResponse, error)

	TokenScopesWithFormdataBodyWithResponse(ctx context.Context, body TokenScopesFormdataRequestBody, reqEditors ...RequestEditorFn) (*TokenScopesResponse, error)

	// GetSellerTaxonomyNodesWithResponse request
	GetSellerTaxonomyNodesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSellerTaxonomyNodesResponse, error)

	// GetPropertiesByTaxonomyIdWithResponse request
	GetPropertiesByTaxonomyIdWithResponse(ctx context.Context, taxonomyId int, reqEditors ...RequestEditorFn) (*GetPropertiesByTaxonomyIdResponse, error)

	// GetShippingCarriersWithResponse request
	GetShippingCarriersWithResponse(ctx context.Context, params *GetShippingCarriersParams, reqEditors ...RequestEditorFn) (*GetShippingCarriersResponse, error)

	// FindShopsWithResponse request
	FindShopsWithResponse(ctx context.Context, params *FindShopsParams, reqEditors ...RequestEditorFn) (*FindShopsResponse, error)

	// GetShopWithResponse request
	GetShopWithResponse(ctx context.Context, shopId int, reqEditors ...RequestEditorFn) (*GetShopResponse, error)

	// UpdateShopWithBodyWithResponse request with any body
	UpdateShopWithBodyWithResponse(ctx context.Context, shopId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateShopResponse, error)

	UpdateShopWithFormdataBodyWithResponse(ctx context.Context, shopId int, body UpdateShopFormdataRequestBody, reqEditors ...RequestEditorFn) (*UpdateShopResponse, error)

	// GetListingsByShopWithResponse request
	GetListingsByShopWithResponse(ctx context.Context, shopId int, params *GetListingsByShopParams, reqEditors ...RequestEditorFn) (*GetListingsByShopResponse, error)

	// CreateDraftListingWithBodyWithResponse request with any body
	CreateDraftListingWithBodyWithResponse(ctx context.Context, shopId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateDraftListingResponse, error)

	CreateDraftListingWithFormdataBodyWithResponse(ctx context.Context, shopId int, body CreateDraftListingFormdataRequestBody, reqEditors ...RequestEditorFn) (*CreateDraftListingResponse, error)

	// FindAllActiveListingsByShopWithResponse request
	FindAllActiveListingsByShopWithResponse(ctx context.Context, shopId int, params *FindAllActiveListingsByShopParams, reqEditors ...RequestEditorFn) (*FindAllActiveListingsByShopResponse, error)

	// GetFeaturedListingsByShopWithResponse request
	GetFeaturedListingsByShopWithResponse(ctx context.Context, shopId int, params *GetFeaturedListingsByShopParams, reqEditors ...RequestEditorFn) (*GetFeaturedListingsByShopResponse, error)

	// UpdateListingWithBodyWithResponse request with any body
	UpdateListingWithBodyWithResponse(ctx context.Context, shopId int, listingId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateListingResponse, error)

	UpdateListingWithFormdataBodyWithResponse(ctx context.Context, shopId int, listingId int, body UpdateListingFormdataRequestBody, reqEditors ...RequestEditorFn) (*UpdateListingResponse, error)

	// UpdateListingDeprecatedWithBodyWithResponse request with any body
	UpdateListingDeprecatedWithBodyWithResponse(ctx context.Context, shopId int, listingId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateListingDeprecatedResponse, error)

	UpdateListingDeprecatedWithFormdataBodyWithResponse(ctx context.Context, shopId int, listingId int, body UpdateListingDeprecatedFormdataRequestBody, reqEditors ...RequestEditorFn) (*UpdateListingDeprecatedResponse, error)

	// GetAllListingFilesWithResponse request
	GetAllListingFilesWithResponse(ctx context.Context, shopId int, listingId int, reqEditors ...RequestEditorFn) (*GetAllListingFilesResponse, error)

	// UploadListingFileWithBodyWithResponse request with any body
	UploadListingFileWithBodyWithResponse(ctx context.Context, shopId int, listingId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UploadListingFileResponse, error)

	// DeleteListingFileWithResponse request
	DeleteListingFileWithResponse(ctx context.Context, shopId int, listingId int, listingFileId int, reqEditors ...RequestEditorFn) (*DeleteListingFileResponse, error)

	// GetListingFileWithResponse request
	GetListingFileWithResponse(ctx context.Context, shopId int, listingId int, listingFileId int, reqEditors ...RequestEditorFn) (*GetListingFileResponse, error)

	// GetListingImagesDeprecatedWithResponse request
	GetListingImagesDeprecatedWithResponse(ctx context.Context, shopId int, listingId int, reqEditors ...RequestEditorFn) (*GetListingImagesDeprecatedResponse, error)

	// UploadListingImageWithBodyWithResponse request with any body
	UploadListingImageWithBodyWithResponse(ctx context.Context, shopId int, listingId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UploadListingImageResponse, error)

	// DeleteListingImageWithResponse request
	DeleteListingImageWithResponse(ctx context.Context, shopId int, listingId int, listingImageId int, reqEditors ...RequestEditorFn) (*DeleteListingImageResponse, error)

	// GetListingImageDeprecatedWithResponse request
	GetListingImageDeprecatedWithResponse(ctx context.Context, shopId int, listingId int, listingImageId int, reqEditors ...RequestEditorFn) (*GetListingImageDeprecatedResponse, error)

	// GetListingPropertiesWithResponse request
	GetListingPropertiesWithResponse(ctx context.Context, shopId int, listingId int, reqEditors ...RequestEditorFn) (*GetListingPropertiesResponse, error)

	// DeleteListingPropertyWithResponse request
	DeleteListingPropertyWithResponse(ctx context.Context, shopId int, listingId int, propertyId int, reqEditors ...RequestEditorFn) (*DeleteListingPropertyResponse, error)

	// UpdateListingPropertyWithBodyWithResponse request with any body
	UpdateListingPropertyWithBodyWithResponse(ctx context.Context, shopId int, listingId int, propertyId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateListingPropertyResponse, error)

	UpdateListingPropertyWithFormdataBodyWithResponse(ctx context.Context, shopId int, listingId int, propertyId int, body UpdateListingPropertyFormdataRequestBody, reqEditors ...RequestEditorFn) (*UpdateListingPropertyResponse, error)

	// GetShopReceiptTransactionsByListingWithResponse request
	GetShopReceiptTransactionsByListingWithResponse(ctx context.Context, shopId int, listingId int, params *GetShopReceiptTransactionsByListingParams, reqEditors ...RequestEditorFn) (*GetShopReceiptTransactionsByListingResponse, error)

	// GetListingTranslationWithResponse request
	GetListingTranslationWithResponse(ctx context.Context, shopId int, listingId int, language string, reqEditors ...RequestEditorFn) (*GetListingTranslationResponse, error)

	// CreateListingTranslationWithBodyWithResponse request with any body
	CreateListingTranslationWithBodyWithResponse(ctx context.Context, shopId int, listingId int, language string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateListingTranslationResponse, error)

	CreateListingTranslationWithFormdataBodyWithResponse(ctx context.Context, shopId int, listingId int, language string, body CreateListingTranslationFormdataRequestBody, reqEditors ...RequestEditorFn) (*CreateListingTranslationResponse, error)

	// UpdateListingTranslationWithBodyWithResponse request with any body
	UpdateListingTranslationWithBodyWithResponse(ctx context.Context, shopId int, listingId int, language string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateListingTranslationResponse, error)

	UpdateListingTranslationWithFormdataBodyWithResponse(ctx context.Context, shopId int, listingId int, language string, body UpdateListingTranslationFormdataRequestBody, reqEditors ...RequestEditorFn) (*UpdateListingTranslationResponse, error)

	// GetListingVariationImagesWithResponse request
	GetListingVariationImagesWithResponse(ctx context.Context, shopId int, listingId int, reqEditors ...RequestEditorFn) (*GetListingVariationImagesResponse, error)

	// UpdateVariationImagesWithBodyWithResponse request with any body
	UpdateVariationImagesWithBodyWithResponse(ctx context.Context, shopId int, listingId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateVariationImagesResponse, error)

	UpdateVariationImagesWithResponse(ctx context.Context, shopId int, listingId int, body UpdateVariationImagesJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateVariationImagesResponse, error)

	// UploadListingVideoWithBodyWithResponse request with any body
	UploadListingVideoWithBodyWithResponse(ctx context.Context, shopId int, listingId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UploadListingVideoResponse, error)

	// DeleteListingVideoWithResponse request
	DeleteListingVideoWithResponse(ctx context.Context, shopId int, listingId int, videoId int, reqEditors ...RequestEditorFn) (*DeleteListingVideoResponse, error)

	// GetShopPaymentAccountLedgerEntriesWithResponse request
	GetShopPaymentAccountLedgerEntriesWithResponse(ctx context.Context, shopId int, params *GetShopPaymentAccountLedgerEntriesParams, reqEditors ...RequestEditorFn) (*GetShopPaymentAccountLedgerEntriesResponse, error)

	// GetPaymentAccountLedgerEntryPaymentsWithResponse request
	GetPaymentAccountLedgerEntryPaymentsWithResponse(ctx context.Context, shopId int, params *GetPaymentAccountLedgerEntryPaymentsParams, reqEditors ...RequestEditorFn) (*GetPaymentAccountLedgerEntryPaymentsResponse, error)

	// GetShopPaymentAccountLedgerEntryWithResponse request
	GetShopPaymentAccountLedgerEntryWithResponse(ctx context.Context, shopId int, ledgerEntryId int, reqEditors ...RequestEditorFn) (*GetShopPaymentAccountLedgerEntryResponse, error)

	// GetPaymentsWithResponse request
	GetPaymentsWithResponse(ctx context.Context, shopId int, params *GetPaymentsParams, reqEditors ...RequestEditorFn) (*GetPaymentsResponse, error)

	// GetShopReturnPoliciesWithResponse request
	GetShopReturnPoliciesWithResponse(ctx context.Context, shopId int, reqEditors ...RequestEditorFn) (*GetShopReturnPoliciesResponse, error)

	// CreateShopReturnPolicyWithBodyWithResponse request with any body
	CreateShopReturnPolicyWithBodyWithResponse(ctx context.Context, shopId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateShopReturnPolicyResponse, error)

	CreateShopReturnPolicyWithFormdataBodyWithResponse(ctx context.Context, shopId int, body CreateShopReturnPolicyFormdataRequestBody, reqEditors ...RequestEditorFn) (*CreateShopReturnPolicyResponse, error)

	// ConsolidateShopReturnPoliciesWithBodyWithResponse request with any body
	ConsolidateShopReturnPoliciesWithBodyWithResponse(ctx context.Context, shopId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ConsolidateShopReturnPoliciesResponse, error)

	ConsolidateShopReturnPoliciesWithFormdataBodyWithResponse(ctx context.Context, shopId int, body ConsolidateShopReturnPoliciesFormdataRequestBody, reqEditors ...RequestEditorFn) (*ConsolidateShopReturnPoliciesResponse, error)

	// DeleteShopReturnPolicyWithResponse request
	DeleteShopReturnPolicyWithResponse(ctx context.Context, shopId int, returnPolicyId int, reqEditors ...RequestEditorFn) (*DeleteShopReturnPolicyResponse, error)

	// GetShopReturnPolicyWithResponse request
	GetShopReturnPolicyWithResponse(ctx context.Context, shopId int, returnPolicyId int, reqEditors ...RequestEditorFn) (*GetShopReturnPolicyResponse, error)

	// UpdateShopReturnPolicyWithBodyWithResponse request with any body
	UpdateShopReturnPolicyWithBodyWithResponse(ctx context.Context, shopId int, returnPolicyId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateShopReturnPolicyResponse, error)

	UpdateShopReturnPolicyWithFormdataBodyWithResponse(ctx context.Context, shopId int, returnPolicyId int, body UpdateShopReturnPolicyFormdataRequestBody, reqEditors ...RequestEditorFn) (*UpdateShopReturnPolicyResponse, error)

	// GetListingsByShopReturnPolicyWithResponse request
	GetListingsByShopReturnPolicyWithResponse(ctx context.Context, shopId int, returnPolicyId int, reqEditors ...RequestEditorFn) (*GetListingsByShopReturnPolicyResponse, error)

	// GetShopProductionPartnersWithResponse request
	GetShopProductionPartnersWithResponse(ctx context.Context, shopId int, reqEditors ...RequestEditorFn) (*GetShopProductionPartnersResponse, error)

	// GetShopReceiptsWithResponse request
	GetShopReceiptsWithResponse(ctx context.Context, shopId int, params *GetShopReceiptsParams, reqEditors ...RequestEditorFn) (*GetShopReceiptsResponse, error)

	// GetShopReceiptWithResponse request
	GetShopReceiptWithResponse(ctx context.Context, shopId int, receiptId int, reqEditors ...RequestEditorFn) (*GetShopReceiptResponse, error)

	// UpdateShopReceiptWithBodyWithResponse request with any body
	UpdateShopReceiptWithBodyWithResponse(ctx context.Context, shopId int, receiptId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateShopReceiptResponse, error)

	UpdateShopReceiptWithFormdataBodyWithResponse(ctx context.Context, shopId int, receiptId int, body UpdateShopReceiptFormdataRequestBody, reqEditors ...RequestEditorFn) (*UpdateShopReceiptResponse, error)

	// GetListingsByShopReceiptWithResponse request
	GetListingsByShopReceiptWithResponse(ctx context.Context, shopId int, receiptId int, params *GetListingsByShopReceiptParams, reqEditors ...RequestEditorFn) (*GetListingsByShopReceiptResponse, error)

	// GetShopPaymentByReceiptIdWithResponse request
	GetShopPaymentByReceiptIdWithResponse(ctx context.Context, shopId int, receiptId int, reqEditors ...RequestEditorFn) (*GetShopPaymentByReceiptIdResponse, error)

	// CreateReceiptShipmentWithBodyWithResponse request with any body
	CreateReceiptShipmentWithBodyWithResponse(ctx context.Context, shopId int, receiptId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateReceiptShipmentResponse, error)

	CreateReceiptShipmentWithFormdataBodyWithResponse(ctx context.Context, shopId int, receiptId int, body CreateReceiptShipmentFormdataRequestBody, reqEditors ...RequestEditorFn) (*CreateReceiptShipmentResponse, error)

	// GetShopReceiptTransactionsByReceiptWithResponse request
	GetShopReceiptTransactionsByReceiptWithResponse(ctx context.Context, shopId int, receiptId int, reqEditors ...RequestEditorFn) (*GetShopReceiptTransactionsByReceiptResponse, error)

	// GetReviewsByShopWithResponse request
	GetReviewsByShopWithResponse(ctx context.Context, shopId int, params *GetReviewsByShopParams, reqEditors ...RequestEditorFn) (*GetReviewsByShopResponse, error)

	// GetShopSectionsWithResponse request
	GetShopSectionsWithResponse(ctx context.Context, shopId int, reqEditors ...RequestEditorFn) (*GetShopSectionsResponse, error)

	// CreateShopSectionWithBodyWithResponse request with any body
	CreateShopSectionWithBodyWithResponse(ctx context.Context, shopId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateShopSectionResponse, error)

	CreateShopSectionWithFormdataBodyWithResponse(ctx context.Context, shopId int, body CreateShopSectionFormdataRequestBody, reqEditors ...RequestEditorFn) (*CreateShopSectionResponse, error)

	// DeleteShopSectionWithResponse request
	DeleteShopSectionWithResponse(ctx context.Context, shopId int, shopSectionId int, reqEditors ...RequestEditorFn) (*DeleteShopSectionResponse, error)

	// GetShopSectionWithResponse request
	GetShopSectionWithResponse(ctx context.Context, shopId int, shopSectionId int, reqEditors ...RequestEditorFn) (*GetShopSectionResponse, error)

	// UpdateShopSectionWithBodyWithResponse request with any body
	UpdateShopSectionWithBodyWithResponse(ctx context.Context, shopId int, shopSectionId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateShopSectionResponse, error)

	UpdateShopSectionWithFormdataBodyWithResponse(ctx context.Context, shopId int, shopSectionId int, body UpdateShopSectionFormdataRequestBody, reqEditors ...RequestEditorFn) (*UpdateShopSectionResponse, error)

	// GetShopShippingProfilesWithResponse request
	GetShopShippingProfilesWithResponse(ctx context.Context, shopId int, reqEditors ...RequestEditorFn) (*GetShopShippingProfilesResponse, error)

	// CreateShopShippingProfileWithBodyWithResponse request with any body
	CreateShopShippingProfileWithBodyWithResponse(ctx context.Context, shopId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateShopShippingProfileResponse, error)

	CreateShopShippingProfileWithFormdataBodyWithResponse(ctx context.Context, shopId int, body CreateShopShippingProfileFormdataRequestBody, reqEditors ...RequestEditorFn) (*CreateShopShippingProfileResponse, error)

	// DeleteShopShippingProfileWithResponse request
	DeleteShopShippingProfileWithResponse(ctx context.Context, shopId int, shippingProfileId int, reqEditors ...RequestEditorFn) (*DeleteShopShippingProfileResponse, error)

	// GetShopShippingProfileWithResponse request
	GetShopShippingProfileWithResponse(ctx context.Context, shopId int, shippingProfileId int, reqEditors ...RequestEditorFn) (*GetShopShippingProfileResponse, error)

	// UpdateShopShippingProfileWithBodyWithResponse request with any body
	UpdateShopShippingProfileWithBodyWithResponse(ctx context.Context, shopId int, shippingProfileId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateShopShippingProfileResponse, error)

	UpdateShopShippingProfileWithFormdataBodyWithResponse(ctx context.Context, shopId int, shippingProfileId int, body UpdateShopShippingProfileFormdataRequestBody, reqEditors ...RequestEditorFn) (*UpdateShopShippingProfileResponse, error)

	// GetShopShippingProfileDestinationsByShippingProfileWithResponse request
	GetShopShippingProfileDestinationsByShippingProfileWithResponse(ctx context.Context, shopId int, shippingProfileId int, params *GetShopShippingProfileDestinationsByShippingProfileParams, reqEditors ...RequestEditorFn) (*GetShopShippingProfileDestinationsByShippingProfileResponse, error)

	// CreateShopShippingProfileDestinationWithBodyWithResponse request with any body
	CreateShopShippingProfileDestinationWithBodyWithResponse(ctx context.Context, shopId int, shippingProfileId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateShopShippingProfileDestinationResponse, error)

	CreateShopShippingProfileDestinationWithFormdataBodyWithResponse(ctx context.Context, shopId int, shippingProfileId int, body CreateShopShippingProfileDestinationFormdataRequestBody, reqEditors ...RequestEditorFn) (*CreateShopShippingProfileDestinationResponse, error)

	// DeleteShopShippingProfileDestinationWithResponse request
	DeleteShopShippingProfileDestinationWithResponse(ctx context.Context, shopId int, shippingProfileId int, shippingProfileDestinationId int, reqEditors ...RequestEditorFn) (*DeleteShopShippingProfileDestinationResponse, error)

	// UpdateShopShippingProfileDestinationWithBodyWithResponse request with any body
	UpdateShopShippingProfileDestinationWithBodyWithResponse(ctx context.Context, shopId int, shippingProfileId int, shippingProfileDestinationId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateShopShippingProfileDestinationResponse, error)

	UpdateShopShippingProfileDestinationWithFormdataBodyWithResponse(ctx context.Context, shopId int, shippingProfileId int, shippingProfileDestinationId int, body UpdateShopShippingProfileDestinationFormdataRequestBody, reqEditors ...RequestEditorFn) (*UpdateShopShippingProfileDestinationResponse, error)

	// GetShopShippingProfileUpgradesWithResponse request
	GetShopShippingProfileUpgradesWithResponse(ctx context.Context, shopId int, shippingProfileId int, reqEditors ...RequestEditorFn) (*GetShopShippingProfileUpgradesResponse, error)

	// CreateShopShippingProfileUpgradeWithBodyWithResponse request with any body
	CreateShopShippingProfileUpgradeWithBodyWithResponse(ctx context.Context, shopId int, shippingProfileId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateShopShippingProfileUpgradeResponse, error)

	CreateShopShippingProfileUpgradeWithFormdataBodyWithResponse(ctx context.Context, shopId int, shippingProfileId int, body CreateShopShippingProfileUpgradeFormdataRequestBody, reqEditors ...RequestEditorFn) (*CreateShopShippingProfileUpgradeResponse, error)

	// DeleteShopShippingProfileUpgradeWithResponse request
	DeleteShopShippingProfileUpgradeWithResponse(ctx context.Context, shopId int, shippingProfileId int, upgradeId int, reqEditors ...RequestEditorFn) (*DeleteShopShippingProfileUpgradeResponse, error)

	// UpdateShopShippingProfileUpgradeWithBodyWithResponse request with any body
	UpdateShopShippingProfileUpgradeWithBodyWithResponse(ctx context.Context, shopId int, shippingProfileId int, upgradeId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateShopShippingProfileUpgradeResponse, error)

	UpdateShopShippingProfileUpgradeWithFormdataBodyWithResponse(ctx context.Context, shopId int, shippingProfileId int, upgradeId int, body UpdateShopShippingProfileUpgradeFormdataRequestBody, reqEditors ...RequestEditorFn) (*UpdateShopShippingProfileUpgradeResponse, error)

	// GetListingsByShopSectionIdWithResponse request
	GetListingsByShopSectionIdWithResponse(ctx context.Context, shopId int, params *GetListingsByShopSectionIdParams, reqEditors ...RequestEditorFn) (*GetListingsByShopSectionIdResponse, error)

	// GetShopReceiptTransactionsByShopWithResponse request
	GetShopReceiptTransactionsByShopWithResponse(ctx context.Context, shopId int, params *GetShopReceiptTransactionsByShopParams, reqEditors ...RequestEditorFn) (*GetShopReceiptTransactionsByShopResponse, error)

	// GetShopReceiptTransactionWithResponse request
	GetShopReceiptTransactionWithResponse(ctx context.Context, shopId int, transactionId int, reqEditors ...RequestEditorFn) (*GetShopReceiptTransactionResponse, error)

	// GetUserAddressesWithResponse request
	GetUserAddressesWithResponse(ctx context.Context, params *GetUserAddressesParams, reqEditors ...RequestEditorFn) (*GetUserAddressesResponse, error)

	// DeleteUserAddressWithResponse request
	DeleteUserAddressWithResponse(ctx context.Context, userAddressId int, reqEditors ...RequestEditorFn) (*DeleteUserAddressResponse, error)

	// GetUserAddressWithResponse request
	GetUserAddressWithResponse(ctx context.Context, userAddressId int, reqEditors ...RequestEditorFn) (*GetUserAddressResponse, error)

	// GetMeWithResponse request
	GetMeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMeResponse, error)

	// GetUserWithResponse request
	GetUserWithResponse(ctx context.Context, userId int, reqEditors ...RequestEditorFn) (*GetUserResponse, error)

	// GetShopByOwnerUserIdWithResponse request
	GetShopByOwnerUserIdWithResponse(ctx context.Context, userId int, reqEditors ...RequestEditorFn) (*GetShopByOwnerUserIdResponse, error)
}

type GetBuyerTaxonomyNodesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BuyerTaxonomyNodes
	JSON500      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r GetBuyerTaxonomyNodesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBuyerTaxonomyNodesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPropertiesByBuyerTaxonomyIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BuyerTaxonomyNodeProperties
	JSON400      *ErrorSchema
	JSON404      *ErrorSchema
	JSON500      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r GetPropertiesByBuyerTaxonomyIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPropertiesByBuyerTaxonomyIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindAllListingsActiveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ShopListings
	JSON404      *ErrorSchema
	JSON500      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r FindAllListingsActiveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindAllListingsActiveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetListingsByListingIdsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ShopListingsWithAssociations
	JSON400      *ErrorSchema
	JSON404      *ErrorSchema
	JSON500      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r GetListingsByListingIdsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetListingsByListingIdsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteListingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorSchema
	JSON401      *ErrorSchema
	JSON403      *ErrorSchema
	JSON404      *ErrorSchema
	JSON409      *ErrorSchema
	JSON500      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r DeleteListingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteListingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetListingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ShopListingWithAssociations
	JSON400      *ErrorSchema
	JSON404      *ErrorSchema
	JSON500      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r GetListingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetListingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetListingImagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListingImages
	JSON400      *ErrorSchema
	JSON403      *ErrorSchema
	JSON404      *ErrorSchema
	JSON500      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r GetListingImagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetListingImagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetListingImageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListingImage
	JSON400      *ErrorSchema
	JSON403      *ErrorSchema
	JSON404      *ErrorSchema
	JSON500      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r GetListingImageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetListingImageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetListingInventoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListingInventoryWithAssociations
	JSON400      *ErrorSchema
	JSON401      *ErrorSchema
	JSON404      *ErrorSchema
	JSON422      *ErrorSchema
	JSON500      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r GetListingInventoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetListingInventoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateListingInventoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListingInventory
	JSON400      *ErrorSchema
	JSON401      *ErrorSchema
	JSON403      *ErrorSchema
	JSON404      *ErrorSchema
	JSON500      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r UpdateListingInventoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateListingInventoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetListingProductResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListingInventoryProduct
	JSON400      *ErrorSchema
	JSON401      *ErrorSchema
	JSON404      *ErrorSchema
	JSON500      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r GetListingProductResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetListingProductResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetListingOfferingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListingInventoryProductOffering
	JSON400      *ErrorSchema
	JSON404      *ErrorSchema
	JSON500      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r GetListingOfferingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetListingOfferingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetListingPropertyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListingPropertyValue
	JSON400      *ErrorSchema
	JSON404      *ErrorSchema
	JSON500      *ErrorSchema
	JSON501      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r GetListingPropertyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetListingPropertyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetReviewsByListingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListingReviews
	JSON400      *ErrorSchema
	JSON404      *ErrorSchema
	JSON500      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r GetReviewsByListingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetReviewsByListingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetListingVideosResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListingVideos
	JSON400      *ErrorSchema
	JSON403      *ErrorSchema
	JSON404      *ErrorSchema
	JSON500      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r GetListingVideosResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetListingVideosResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetListingVideoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListingVideo
	JSON400      *ErrorSchema
	JSON401      *ErrorSchema
	JSON403      *ErrorSchema
	JSON404      *ErrorSchema
	JSON500      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r GetListingVideoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetListingVideoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Pong
	JSON401      *ErrorSchema
	JSON404      *ErrorSchema
	JSON500      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r PingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TokenScopesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Scopes
	JSON401      *ErrorSchema
	JSON500      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r TokenScopesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TokenScopesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSellerTaxonomyNodesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SellerTaxonomyNodes
	JSON500      *ErrorSchema
	JSON503      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r GetSellerTaxonomyNodesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSellerTaxonomyNodesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPropertiesByTaxonomyIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TaxonomyNodeProperties
	JSON400      *ErrorSchema
	JSON404      *ErrorSchema
	JSON500      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r GetPropertiesByTaxonomyIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPropertiesByTaxonomyIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetShippingCarriersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ShippingCarriers
	JSON400      *ErrorSchema
	JSON500      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r GetShippingCarriersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetShippingCarriersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindShopsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Shops
	JSON500      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r FindShopsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindShopsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetShopResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Shop
	JSON400      *ErrorSchema
	JSON404      *ErrorSchema
	JSON500      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r GetShopResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetShopResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateShopResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Shop
	JSON400      *ErrorSchema
	JSON401      *ErrorSchema
	JSON403      *ErrorSchema
	JSON404      *ErrorSchema
	JSON500      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r UpdateShopResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateShopResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetListingsByShopResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ShopListingsWithAssociations
	JSON400      *ErrorSchema
	JSON401      *ErrorSchema
	JSON403      *ErrorSchema
	JSON500      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r GetListingsByShopResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetListingsByShopResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateDraftListingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ShopListing
	JSON400      *ErrorSchema
	JSON401      *ErrorSchema
	JSON403      *ErrorSchema
	JSON404      *ErrorSchema
	JSON500      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r CreateDraftListingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateDraftListingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindAllActiveListingsByShopResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ShopListings
	JSON400      *ErrorSchema
	JSON404      *ErrorSchema
	JSON500      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r FindAllActiveListingsByShopResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindAllActiveListingsByShopResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFeaturedListingsByShopResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ShopListings
	JSON400      *ErrorSchema
	JSON403      *ErrorSchema
	JSON500      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r GetFeaturedListingsByShopResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFeaturedListingsByShopResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateListingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ShopListing
	JSON400      *ErrorSchema
	JSON401      *ErrorSchema
	JSON403      *ErrorSchema
	JSON404      *ErrorSchema
	JSON409      *ErrorSchema
	JSON500      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r UpdateListingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateListingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateListingDeprecatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ShopListing
	JSON400      *ErrorSchema
	JSON401      *ErrorSchema
	JSON403      *ErrorSchema
	JSON404      *ErrorSchema
	JSON409      *ErrorSchema
	JSON500      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r UpdateListingDeprecatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateListingDeprecatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllListingFilesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ShopListingFiles
	JSON400      *ErrorSchema
	JSON401      *ErrorSchema
	JSON404      *ErrorSchema
	JSON500      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r GetAllListingFilesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllListingFilesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UploadListingFileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ShopListingFile
	JSON400      *ErrorSchema
	JSON401      *ErrorSchema
	JSON403      *ErrorSchema
	JSON404      *ErrorSchema
	JSON500      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r UploadListingFileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UploadListingFileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteListingFileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorSchema
	JSON401      *ErrorSchema
	JSON403      *ErrorSchema
	JSON404      *ErrorSchema
	JSON409      *ErrorSchema
	JSON500      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r DeleteListingFileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteListingFileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetListingFileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ShopListingFile
	JSON400      *ErrorSchema
	JSON401      *ErrorSchema
	JSON403      *ErrorSchema
	JSON404      *ErrorSchema
	JSON500      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r GetListingFileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetListingFileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetListingImagesDeprecatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListingImages
	JSON400      *ErrorSchema
	JSON403      *ErrorSchema
	JSON404      *ErrorSchema
	JSON500      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r GetListingImagesDeprecatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetListingImagesDeprecatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UploadListingImageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ListingImage
	JSON400      *ErrorSchema
	JSON401      *ErrorSchema
	JSON403      *ErrorSchema
	JSON404      *ErrorSchema
	JSON409      *ErrorSchema
	JSON500      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r UploadListingImageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UploadListingImageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteListingImageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorSchema
	JSON401      *ErrorSchema
	JSON403      *ErrorSchema
	JSON404      *ErrorSchema
	JSON500      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r DeleteListingImageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteListingImageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetListingImageDeprecatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListingImage
	JSON400      *ErrorSchema
	JSON403      *ErrorSchema
	JSON404      *ErrorSchema
	JSON500      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r GetListingImageDeprecatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetListingImageDeprecatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetListingPropertiesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListingPropertyValues
	JSON400      *ErrorSchema
	JSON404      *ErrorSchema
	JSON500      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r GetListingPropertiesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetListingPropertiesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteListingPropertyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorSchema
	JSON401      *ErrorSchema
	JSON403      *ErrorSchema
	JSON404      *ErrorSchema
	JSON500      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r DeleteListingPropertyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteListingPropertyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateListingPropertyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListingPropertyValue
	JSON400      *ErrorSchema
	JSON401      *ErrorSchema
	JSON403      *ErrorSchema
	JSON404      *ErrorSchema
	JSON500      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r UpdateListingPropertyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateListingPropertyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetShopReceiptTransactionsByListingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ShopReceiptTransactions
	JSON400      *ErrorSchema
	JSON401      *ErrorSchema
	JSON403      *ErrorSchema
	JSON404      *ErrorSchema
	JSON500      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r GetShopReceiptTransactionsByListingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetShopReceiptTransactionsByListingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetListingTranslationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListingTranslation
	JSON400      *ErrorSchema
	JSON404      *ErrorSchema
	JSON500      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r GetListingTranslationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetListingTranslationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateListingTranslationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListingTranslation
	JSON400      *ErrorSchema
	JSON401      *ErrorSchema
	JSON403      *ErrorSchema
	JSON404      *ErrorSchema
	JSON500      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r CreateListingTranslationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateListingTranslationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateListingTranslationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListingTranslation
	JSON400      *ErrorSchema
	JSON401      *ErrorSchema
	JSON403      *ErrorSchema
	JSON404      *ErrorSchema
	JSON500      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r UpdateListingTranslationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateListingTranslationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetListingVariationImagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListingVariationImages
	JSON400      *ErrorSchema
	JSON403      *ErrorSchema
	JSON404      *ErrorSchema
	JSON500      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r GetListingVariationImagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetListingVariationImagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateVariationImagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListingVariationImages
	JSON400      *ErrorSchema
	JSON401      *ErrorSchema
	JSON403      *ErrorSchema
	JSON404      *ErrorSchema
	JSON409      *ErrorSchema
	JSON500      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r UpdateVariationImagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateVariationImagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UploadListingVideoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ListingVideo
	JSON400      *ErrorSchema
	JSON401      *ErrorSchema
	JSON403      *ErrorSchema
	JSON404      *ErrorSchema
	JSON500      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r UploadListingVideoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UploadListingVideoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteListingVideoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorSchema
	JSON401      *ErrorSchema
	JSON403      *ErrorSchema
	JSON404      *ErrorSchema
	JSON500      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r DeleteListingVideoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteListingVideoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetShopPaymentAccountLedgerEntriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaymentAccountLedgerEntries
	JSON400      *ErrorSchema
	JSON401      *ErrorSchema
	JSON403      *ErrorSchema
	JSON500      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r GetShopPaymentAccountLedgerEntriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetShopPaymentAccountLedgerEntriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPaymentAccountLedgerEntryPaymentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Payments
	JSON400      *ErrorSchema
	JSON401      *ErrorSchema
	JSON403      *ErrorSchema
	JSON500      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r GetPaymentAccountLedgerEntryPaymentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPaymentAccountLedgerEntryPaymentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetShopPaymentAccountLedgerEntryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaymentAccountLedgerEntry
	JSON400      *ErrorSchema
	JSON401      *ErrorSchema
	JSON403      *ErrorSchema
	JSON500      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r GetShopPaymentAccountLedgerEntryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetShopPaymentAccountLedgerEntryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPaymentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Payments
	JSON400      *ErrorSchema
	JSON401      *ErrorSchema
	JSON403      *ErrorSchema
	JSON404      *ErrorSchema
	JSON500      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r GetPaymentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPaymentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetShopReturnPoliciesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ShopReturnPolicies
	JSON400      *ErrorSchema
	JSON401      *ErrorSchema
	JSON404      *ErrorSchema
	JSON500      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r GetShopReturnPoliciesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetShopReturnPoliciesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateShopReturnPolicyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ShopReturnPolicy
	JSON400      *ErrorSchema
	JSON401      *ErrorSchema
	JSON403      *ErrorSchema
	JSON500      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r CreateShopReturnPolicyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateShopReturnPolicyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ConsolidateShopReturnPoliciesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ShopReturnPolicy
	JSON400      *ErrorSchema
	JSON401      *ErrorSchema
	JSON403      *ErrorSchema
	JSON404      *ErrorSchema
	JSON500      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r ConsolidateShopReturnPoliciesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ConsolidateShopReturnPoliciesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteShopReturnPolicyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorSchema
	JSON401      *ErrorSchema
	JSON403      *ErrorSchema
	JSON500      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r DeleteShopReturnPolicyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteShopReturnPolicyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetShopReturnPolicyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ShopReturnPolicy
	JSON400      *ErrorSchema
	JSON401      *ErrorSchema
	JSON404      *ErrorSchema
	JSON500      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r GetShopReturnPolicyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetShopReturnPolicyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateShopReturnPolicyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ShopReturnPolicy
	JSON400      *ErrorSchema
	JSON401      *ErrorSchema
	JSON403      *ErrorSchema
	JSON404      *ErrorSchema
	JSON409      *ErrorSchema
	JSON500      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r UpdateShopReturnPolicyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateShopReturnPolicyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetListingsByShopReturnPolicyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ShopListings
	JSON400      *ErrorSchema
	JSON401      *ErrorSchema
	JSON403      *ErrorSchema
	JSON404      *ErrorSchema
	JSON500      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r GetListingsByShopReturnPolicyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetListingsByShopReturnPolicyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetShopProductionPartnersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ShopProductionPartners
	JSON400      *ErrorSchema
	JSON403      *ErrorSchema
	JSON500      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r GetShopProductionPartnersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetShopProductionPartnersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetShopReceiptsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ShopReceipts
	JSON400      *ErrorSchema
	JSON401      *ErrorSchema
	JSON403      *ErrorSchema
	JSON404      *ErrorSchema
	JSON500      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r GetShopReceiptsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetShopReceiptsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetShopReceiptResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ShopReceipt
	JSON400      *ErrorSchema
	JSON401      *ErrorSchema
	JSON403      *ErrorSchema
	JSON404      *ErrorSchema
	JSON500      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r GetShopReceiptResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetShopReceiptResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateShopReceiptResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ShopReceipt
	JSON400      *ErrorSchema
	JSON401      *ErrorSchema
	JSON403      *ErrorSchema
	JSON404      *ErrorSchema
	JSON500      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r UpdateShopReceiptResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateShopReceiptResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetListingsByShopReceiptResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ShopListings
	JSON400      *ErrorSchema
	JSON401      *ErrorSchema
	JSON403      *ErrorSchema
	JSON404      *ErrorSchema
	JSON500      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r GetListingsByShopReceiptResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetListingsByShopReceiptResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetShopPaymentByReceiptIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Payments
	JSON400      *ErrorSchema
	JSON401      *ErrorSchema
	JSON403      *ErrorSchema
	JSON404      *ErrorSchema
	JSON500      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r GetShopPaymentByReceiptIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetShopPaymentByReceiptIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateReceiptShipmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ShopReceipt
	JSON400      *ErrorSchema
	JSON401      *ErrorSchema
	JSON403      *ErrorSchema
	JSON404      *ErrorSchema
	JSON409      *ErrorSchema
	JSON500      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r CreateReceiptShipmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateReceiptShipmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetShopReceiptTransactionsByReceiptResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ShopReceiptTransactions
	JSON400      *ErrorSchema
	JSON401      *ErrorSchema
	JSON403      *ErrorSchema
	JSON404      *ErrorSchema
	JSON500      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r GetShopReceiptTransactionsByReceiptResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetShopReceiptTransactionsByReceiptResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetReviewsByShopResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TransactionReviews
	JSON400      *ErrorSchema
	JSON404      *ErrorSchema
	JSON500      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r GetReviewsByShopResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetReviewsByShopResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetShopSectionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ShopSections
	JSON400      *ErrorSchema
	JSON404      *ErrorSchema
	JSON500      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r GetShopSectionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetShopSectionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateShopSectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ShopSection
	JSON400      *ErrorSchema
	JSON401      *ErrorSchema
	JSON403      *ErrorSchema
	JSON500      *ErrorSchema
	JSON503      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r CreateShopSectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateShopSectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteShopSectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorSchema
	JSON401      *ErrorSchema
	JSON403      *ErrorSchema
	JSON500      *ErrorSchema
	JSON503      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r DeleteShopSectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteShopSectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetShopSectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ShopSection
	JSON400      *ErrorSchema
	JSON404      *ErrorSchema
	JSON500      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r GetShopSectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetShopSectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateShopSectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ShopSection
	JSON400      *ErrorSchema
	JSON401      *ErrorSchema
	JSON403      *ErrorSchema
	JSON500      *ErrorSchema
	JSON503      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r UpdateShopSectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateShopSectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetShopShippingProfilesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ShopShippingProfiles
	JSON400      *ErrorSchema
	JSON403      *ErrorSchema
	JSON500      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r GetShopShippingProfilesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetShopShippingProfilesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateShopShippingProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ShopShippingProfile
	JSON400      *ErrorSchema
	JSON401      *ErrorSchema
	JSON403      *ErrorSchema
	JSON500      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r CreateShopShippingProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateShopShippingProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteShopShippingProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorSchema
	JSON401      *ErrorSchema
	JSON403      *ErrorSchema
	JSON404      *ErrorSchema
	JSON500      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r DeleteShopShippingProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteShopShippingProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetShopShippingProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ShopShippingProfile
	JSON400      *ErrorSchema
	JSON401      *ErrorSchema
	JSON403      *ErrorSchema
	JSON404      *ErrorSchema
	JSON500      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r GetShopShippingProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetShopShippingProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateShopShippingProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ShopShippingProfile
	JSON400      *ErrorSchema
	JSON401      *ErrorSchema
	JSON403      *ErrorSchema
	JSON404      *ErrorSchema
	JSON500      *ErrorSchema
	JSON503      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r UpdateShopShippingProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateShopShippingProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetShopShippingProfileDestinationsByShippingProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ShopShippingProfileDestinations
	JSON400      *ErrorSchema
	JSON401      *ErrorSchema
	JSON403      *ErrorSchema
	JSON404      *ErrorSchema
	JSON500      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r GetShopShippingProfileDestinationsByShippingProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetShopShippingProfileDestinationsByShippingProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateShopShippingProfileDestinationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ShopShippingProfileDestination
	JSON400      *ErrorSchema
	JSON401      *ErrorSchema
	JSON403      *ErrorSchema
	JSON500      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r CreateShopShippingProfileDestinationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateShopShippingProfileDestinationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteShopShippingProfileDestinationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorSchema
	JSON401      *ErrorSchema
	JSON403      *ErrorSchema
	JSON404      *ErrorSchema
	JSON500      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r DeleteShopShippingProfileDestinationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteShopShippingProfileDestinationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateShopShippingProfileDestinationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ShopShippingProfileDestination
	JSON400      *ErrorSchema
	JSON401      *ErrorSchema
	JSON403      *ErrorSchema
	JSON404      *ErrorSchema
	JSON500      *ErrorSchema
	JSON503      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r UpdateShopShippingProfileDestinationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateShopShippingProfileDestinationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetShopShippingProfileUpgradesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ShopShippingProfileUpgrades
	JSON400      *ErrorSchema
	JSON401      *ErrorSchema
	JSON403      *ErrorSchema
	JSON404      *ErrorSchema
	JSON500      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r GetShopShippingProfileUpgradesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetShopShippingProfileUpgradesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateShopShippingProfileUpgradeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ShopShippingProfileUpgrade
	JSON400      *ErrorSchema
	JSON401      *ErrorSchema
	JSON403      *ErrorSchema
	JSON404      *ErrorSchema
	JSON500      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r CreateShopShippingProfileUpgradeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateShopShippingProfileUpgradeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteShopShippingProfileUpgradeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorSchema
	JSON401      *ErrorSchema
	JSON403      *ErrorSchema
	JSON404      *ErrorSchema
	JSON500      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r DeleteShopShippingProfileUpgradeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteShopShippingProfileUpgradeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateShopShippingProfileUpgradeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ShopShippingProfileUpgrade
	JSON400      *ErrorSchema
	JSON401      *ErrorSchema
	JSON403      *ErrorSchema
	JSON404      *ErrorSchema
	JSON500      *ErrorSchema
	JSON503      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r UpdateShopShippingProfileUpgradeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateShopShippingProfileUpgradeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetListingsByShopSectionIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ShopListings
	JSON400      *ErrorSchema
	JSON500      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r GetListingsByShopSectionIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetListingsByShopSectionIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetShopReceiptTransactionsByShopResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ShopReceiptTransactions
	JSON401      *ErrorSchema
	JSON403      *ErrorSchema
	JSON404      *ErrorSchema
	JSON500      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r GetShopReceiptTransactionsByShopResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetShopReceiptTransactionsByShopResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetShopReceiptTransactionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ShopReceiptTransaction
	JSON400      *ErrorSchema
	JSON401      *ErrorSchema
	JSON403      *ErrorSchema
	JSON404      *ErrorSchema
	JSON500      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r GetShopReceiptTransactionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetShopReceiptTransactionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserAddressesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserAddresses
	JSON401      *ErrorSchema
	JSON404      *ErrorSchema
	JSON500      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r GetUserAddressesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserAddressesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteUserAddressResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorSchema
	JSON401      *ErrorSchema
	JSON500      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r DeleteUserAddressResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteUserAddressResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserAddressResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserAddress
	JSON400      *ErrorSchema
	JSON401      *ErrorSchema
	JSON404      *ErrorSchema
	JSON500      *ErrorSchema
	JSON501      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r GetUserAddressResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserAddressResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Self
	JSON400      *ErrorSchema
	JSON401      *ErrorSchema
	JSON404      *ErrorSchema
	JSON500      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r GetMeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
	JSON400      *ErrorSchema
	JSON401      *ErrorSchema
	JSON404      *ErrorSchema
	JSON500      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r GetUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetShopByOwnerUserIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Shop
	JSON400      *ErrorSchema
	JSON403      *ErrorSchema
	JSON404      *ErrorSchema
	JSON500      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r GetShopByOwnerUserIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetShopByOwnerUserIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetBuyerTaxonomyNodesWithResponse request returning *GetBuyerTaxonomyNodesResponse
func (c *ClientWithResponses) GetBuyerTaxonomyNodesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetBuyerTaxonomyNodesResponse, error) {
	rsp, err := c.GetBuyerTaxonomyNodes(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBuyerTaxonomyNodesResponse(rsp)
}

// GetPropertiesByBuyerTaxonomyIdWithResponse request returning *GetPropertiesByBuyerTaxonomyIdResponse
func (c *ClientWithResponses) GetPropertiesByBuyerTaxonomyIdWithResponse(ctx context.Context, taxonomyId int, reqEditors ...RequestEditorFn) (*GetPropertiesByBuyerTaxonomyIdResponse, error) {
	rsp, err := c.GetPropertiesByBuyerTaxonomyId(ctx, taxonomyId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPropertiesByBuyerTaxonomyIdResponse(rsp)
}

// FindAllListingsActiveWithResponse request returning *FindAllListingsActiveResponse
func (c *ClientWithResponses) FindAllListingsActiveWithResponse(ctx context.Context, params *FindAllListingsActiveParams, reqEditors ...RequestEditorFn) (*FindAllListingsActiveResponse, error) {
	rsp, err := c.FindAllListingsActive(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindAllListingsActiveResponse(rsp)
}

// GetListingsByListingIdsWithResponse request returning *GetListingsByListingIdsResponse
func (c *ClientWithResponses) GetListingsByListingIdsWithResponse(ctx context.Context, params *GetListingsByListingIdsParams, reqEditors ...RequestEditorFn) (*GetListingsByListingIdsResponse, error) {
	rsp, err := c.GetListingsByListingIds(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetListingsByListingIdsResponse(rsp)
}

// DeleteListingWithResponse request returning *DeleteListingResponse
func (c *ClientWithResponses) DeleteListingWithResponse(ctx context.Context, listingId int, reqEditors ...RequestEditorFn) (*DeleteListingResponse, error) {
	rsp, err := c.DeleteListing(ctx, listingId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteListingResponse(rsp)
}

// GetListingWithResponse request returning *GetListingResponse
func (c *ClientWithResponses) GetListingWithResponse(ctx context.Context, listingId int, params *GetListingParams, reqEditors ...RequestEditorFn) (*GetListingResponse, error) {
	rsp, err := c.GetListing(ctx, listingId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetListingResponse(rsp)
}

// GetListingImagesWithResponse request returning *GetListingImagesResponse
func (c *ClientWithResponses) GetListingImagesWithResponse(ctx context.Context, listingId int, reqEditors ...RequestEditorFn) (*GetListingImagesResponse, error) {
	rsp, err := c.GetListingImages(ctx, listingId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetListingImagesResponse(rsp)
}

// GetListingImageWithResponse request returning *GetListingImageResponse
func (c *ClientWithResponses) GetListingImageWithResponse(ctx context.Context, listingId int, listingImageId int, reqEditors ...RequestEditorFn) (*GetListingImageResponse, error) {
	rsp, err := c.GetListingImage(ctx, listingId, listingImageId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetListingImageResponse(rsp)
}

// GetListingInventoryWithResponse request returning *GetListingInventoryResponse
func (c *ClientWithResponses) GetListingInventoryWithResponse(ctx context.Context, listingId int, params *GetListingInventoryParams, reqEditors ...RequestEditorFn) (*GetListingInventoryResponse, error) {
	rsp, err := c.GetListingInventory(ctx, listingId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetListingInventoryResponse(rsp)
}

// UpdateListingInventoryWithBodyWithResponse request with arbitrary body returning *UpdateListingInventoryResponse
func (c *ClientWithResponses) UpdateListingInventoryWithBodyWithResponse(ctx context.Context, listingId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateListingInventoryResponse, error) {
	rsp, err := c.UpdateListingInventoryWithBody(ctx, listingId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateListingInventoryResponse(rsp)
}

func (c *ClientWithResponses) UpdateListingInventoryWithResponse(ctx context.Context, listingId int, body UpdateListingInventoryJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateListingInventoryResponse, error) {
	rsp, err := c.UpdateListingInventory(ctx, listingId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateListingInventoryResponse(rsp)
}

// GetListingProductWithResponse request returning *GetListingProductResponse
func (c *ClientWithResponses) GetListingProductWithResponse(ctx context.Context, listingId int, productId int, reqEditors ...RequestEditorFn) (*GetListingProductResponse, error) {
	rsp, err := c.GetListingProduct(ctx, listingId, productId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetListingProductResponse(rsp)
}

// GetListingOfferingWithResponse request returning *GetListingOfferingResponse
func (c *ClientWithResponses) GetListingOfferingWithResponse(ctx context.Context, listingId int, productId int, productOfferingId int, reqEditors ...RequestEditorFn) (*GetListingOfferingResponse, error) {
	rsp, err := c.GetListingOffering(ctx, listingId, productId, productOfferingId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetListingOfferingResponse(rsp)
}

// GetListingPropertyWithResponse request returning *GetListingPropertyResponse
func (c *ClientWithResponses) GetListingPropertyWithResponse(ctx context.Context, listingId int, propertyId int, reqEditors ...RequestEditorFn) (*GetListingPropertyResponse, error) {
	rsp, err := c.GetListingProperty(ctx, listingId, propertyId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetListingPropertyResponse(rsp)
}

// GetReviewsByListingWithResponse request returning *GetReviewsByListingResponse
func (c *ClientWithResponses) GetReviewsByListingWithResponse(ctx context.Context, listingId int, params *GetReviewsByListingParams, reqEditors ...RequestEditorFn) (*GetReviewsByListingResponse, error) {
	rsp, err := c.GetReviewsByListing(ctx, listingId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetReviewsByListingResponse(rsp)
}

// GetListingVideosWithResponse request returning *GetListingVideosResponse
func (c *ClientWithResponses) GetListingVideosWithResponse(ctx context.Context, listingId int, reqEditors ...RequestEditorFn) (*GetListingVideosResponse, error) {
	rsp, err := c.GetListingVideos(ctx, listingId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetListingVideosResponse(rsp)
}

// GetListingVideoWithResponse request returning *GetListingVideoResponse
func (c *ClientWithResponses) GetListingVideoWithResponse(ctx context.Context, listingId int, videoId int, reqEditors ...RequestEditorFn) (*GetListingVideoResponse, error) {
	rsp, err := c.GetListingVideo(ctx, listingId, videoId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetListingVideoResponse(rsp)
}

// PingWithResponse request returning *PingResponse
func (c *ClientWithResponses) PingWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PingResponse, error) {
	rsp, err := c.Ping(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePingResponse(rsp)
}

// TokenScopesWithBodyWithResponse request with arbitrary body returning *TokenScopesResponse
func (c *ClientWithResponses) TokenScopesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TokenScopesResponse, error) {
	rsp, err := c.TokenScopesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTokenScopesResponse(rsp)
}

func (c *ClientWithResponses) TokenScopesWithFormdataBodyWithResponse(ctx context.Context, body TokenScopesFormdataRequestBody, reqEditors ...RequestEditorFn) (*TokenScopesResponse, error) {
	rsp, err := c.TokenScopesWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTokenScopesResponse(rsp)
}

// GetSellerTaxonomyNodesWithResponse request returning *GetSellerTaxonomyNodesResponse
func (c *ClientWithResponses) GetSellerTaxonomyNodesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSellerTaxonomyNodesResponse, error) {
	rsp, err := c.GetSellerTaxonomyNodes(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSellerTaxonomyNodesResponse(rsp)
}

// GetPropertiesByTaxonomyIdWithResponse request returning *GetPropertiesByTaxonomyIdResponse
func (c *ClientWithResponses) GetPropertiesByTaxonomyIdWithResponse(ctx context.Context, taxonomyId int, reqEditors ...RequestEditorFn) (*GetPropertiesByTaxonomyIdResponse, error) {
	rsp, err := c.GetPropertiesByTaxonomyId(ctx, taxonomyId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPropertiesByTaxonomyIdResponse(rsp)
}

// GetShippingCarriersWithResponse request returning *GetShippingCarriersResponse
func (c *ClientWithResponses) GetShippingCarriersWithResponse(ctx context.Context, params *GetShippingCarriersParams, reqEditors ...RequestEditorFn) (*GetShippingCarriersResponse, error) {
	rsp, err := c.GetShippingCarriers(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetShippingCarriersResponse(rsp)
}

// FindShopsWithResponse request returning *FindShopsResponse
func (c *ClientWithResponses) FindShopsWithResponse(ctx context.Context, params *FindShopsParams, reqEditors ...RequestEditorFn) (*FindShopsResponse, error) {
	rsp, err := c.FindShops(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindShopsResponse(rsp)
}

// GetShopWithResponse request returning *GetShopResponse
func (c *ClientWithResponses) GetShopWithResponse(ctx context.Context, shopId int, reqEditors ...RequestEditorFn) (*GetShopResponse, error) {
	rsp, err := c.GetShop(ctx, shopId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetShopResponse(rsp)
}

// UpdateShopWithBodyWithResponse request with arbitrary body returning *UpdateShopResponse
func (c *ClientWithResponses) UpdateShopWithBodyWithResponse(ctx context.Context, shopId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateShopResponse, error) {
	rsp, err := c.UpdateShopWithBody(ctx, shopId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateShopResponse(rsp)
}

func (c *ClientWithResponses) UpdateShopWithFormdataBodyWithResponse(ctx context.Context, shopId int, body UpdateShopFormdataRequestBody, reqEditors ...RequestEditorFn) (*UpdateShopResponse, error) {
	rsp, err := c.UpdateShopWithFormdataBody(ctx, shopId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateShopResponse(rsp)
}

// GetListingsByShopWithResponse request returning *GetListingsByShopResponse
func (c *ClientWithResponses) GetListingsByShopWithResponse(ctx context.Context, shopId int, params *GetListingsByShopParams, reqEditors ...RequestEditorFn) (*GetListingsByShopResponse, error) {
	rsp, err := c.GetListingsByShop(ctx, shopId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetListingsByShopResponse(rsp)
}

// CreateDraftListingWithBodyWithResponse request with arbitrary body returning *CreateDraftListingResponse
func (c *ClientWithResponses) CreateDraftListingWithBodyWithResponse(ctx context.Context, shopId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateDraftListingResponse, error) {
	rsp, err := c.CreateDraftListingWithBody(ctx, shopId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateDraftListingResponse(rsp)
}

func (c *ClientWithResponses) CreateDraftListingWithFormdataBodyWithResponse(ctx context.Context, shopId int, body CreateDraftListingFormdataRequestBody, reqEditors ...RequestEditorFn) (*CreateDraftListingResponse, error) {
	rsp, err := c.CreateDraftListingWithFormdataBody(ctx, shopId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateDraftListingResponse(rsp)
}

// FindAllActiveListingsByShopWithResponse request returning *FindAllActiveListingsByShopResponse
func (c *ClientWithResponses) FindAllActiveListingsByShopWithResponse(ctx context.Context, shopId int, params *FindAllActiveListingsByShopParams, reqEditors ...RequestEditorFn) (*FindAllActiveListingsByShopResponse, error) {
	rsp, err := c.FindAllActiveListingsByShop(ctx, shopId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindAllActiveListingsByShopResponse(rsp)
}

// GetFeaturedListingsByShopWithResponse request returning *GetFeaturedListingsByShopResponse
func (c *ClientWithResponses) GetFeaturedListingsByShopWithResponse(ctx context.Context, shopId int, params *GetFeaturedListingsByShopParams, reqEditors ...RequestEditorFn) (*GetFeaturedListingsByShopResponse, error) {
	rsp, err := c.GetFeaturedListingsByShop(ctx, shopId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFeaturedListingsByShopResponse(rsp)
}

// UpdateListingWithBodyWithResponse request with arbitrary body returning *UpdateListingResponse
func (c *ClientWithResponses) UpdateListingWithBodyWithResponse(ctx context.Context, shopId int, listingId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateListingResponse, error) {
	rsp, err := c.UpdateListingWithBody(ctx, shopId, listingId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateListingResponse(rsp)
}

func (c *ClientWithResponses) UpdateListingWithFormdataBodyWithResponse(ctx context.Context, shopId int, listingId int, body UpdateListingFormdataRequestBody, reqEditors ...RequestEditorFn) (*UpdateListingResponse, error) {
	rsp, err := c.UpdateListingWithFormdataBody(ctx, shopId, listingId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateListingResponse(rsp)
}

// UpdateListingDeprecatedWithBodyWithResponse request with arbitrary body returning *UpdateListingDeprecatedResponse
func (c *ClientWithResponses) UpdateListingDeprecatedWithBodyWithResponse(ctx context.Context, shopId int, listingId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateListingDeprecatedResponse, error) {
	rsp, err := c.UpdateListingDeprecatedWithBody(ctx, shopId, listingId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateListingDeprecatedResponse(rsp)
}

func (c *ClientWithResponses) UpdateListingDeprecatedWithFormdataBodyWithResponse(ctx context.Context, shopId int, listingId int, body UpdateListingDeprecatedFormdataRequestBody, reqEditors ...RequestEditorFn) (*UpdateListingDeprecatedResponse, error) {
	rsp, err := c.UpdateListingDeprecatedWithFormdataBody(ctx, shopId, listingId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateListingDeprecatedResponse(rsp)
}

// GetAllListingFilesWithResponse request returning *GetAllListingFilesResponse
func (c *ClientWithResponses) GetAllListingFilesWithResponse(ctx context.Context, shopId int, listingId int, reqEditors ...RequestEditorFn) (*GetAllListingFilesResponse, error) {
	rsp, err := c.GetAllListingFiles(ctx, shopId, listingId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllListingFilesResponse(rsp)
}

// UploadListingFileWithBodyWithResponse request with arbitrary body returning *UploadListingFileResponse
func (c *ClientWithResponses) UploadListingFileWithBodyWithResponse(ctx context.Context, shopId int, listingId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UploadListingFileResponse, error) {
	rsp, err := c.UploadListingFileWithBody(ctx, shopId, listingId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUploadListingFileResponse(rsp)
}

// DeleteListingFileWithResponse request returning *DeleteListingFileResponse
func (c *ClientWithResponses) DeleteListingFileWithResponse(ctx context.Context, shopId int, listingId int, listingFileId int, reqEditors ...RequestEditorFn) (*DeleteListingFileResponse, error) {
	rsp, err := c.DeleteListingFile(ctx, shopId, listingId, listingFileId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteListingFileResponse(rsp)
}

// GetListingFileWithResponse request returning *GetListingFileResponse
func (c *ClientWithResponses) GetListingFileWithResponse(ctx context.Context, shopId int, listingId int, listingFileId int, reqEditors ...RequestEditorFn) (*GetListingFileResponse, error) {
	rsp, err := c.GetListingFile(ctx, shopId, listingId, listingFileId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetListingFileResponse(rsp)
}

// GetListingImagesDeprecatedWithResponse request returning *GetListingImagesDeprecatedResponse
func (c *ClientWithResponses) GetListingImagesDeprecatedWithResponse(ctx context.Context, shopId int, listingId int, reqEditors ...RequestEditorFn) (*GetListingImagesDeprecatedResponse, error) {
	rsp, err := c.GetListingImagesDeprecated(ctx, shopId, listingId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetListingImagesDeprecatedResponse(rsp)
}

// UploadListingImageWithBodyWithResponse request with arbitrary body returning *UploadListingImageResponse
func (c *ClientWithResponses) UploadListingImageWithBodyWithResponse(ctx context.Context, shopId int, listingId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UploadListingImageResponse, error) {
	rsp, err := c.UploadListingImageWithBody(ctx, shopId, listingId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUploadListingImageResponse(rsp)
}

// DeleteListingImageWithResponse request returning *DeleteListingImageResponse
func (c *ClientWithResponses) DeleteListingImageWithResponse(ctx context.Context, shopId int, listingId int, listingImageId int, reqEditors ...RequestEditorFn) (*DeleteListingImageResponse, error) {
	rsp, err := c.DeleteListingImage(ctx, shopId, listingId, listingImageId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteListingImageResponse(rsp)
}

// GetListingImageDeprecatedWithResponse request returning *GetListingImageDeprecatedResponse
func (c *ClientWithResponses) GetListingImageDeprecatedWithResponse(ctx context.Context, shopId int, listingId int, listingImageId int, reqEditors ...RequestEditorFn) (*GetListingImageDeprecatedResponse, error) {
	rsp, err := c.GetListingImageDeprecated(ctx, shopId, listingId, listingImageId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetListingImageDeprecatedResponse(rsp)
}

// GetListingPropertiesWithResponse request returning *GetListingPropertiesResponse
func (c *ClientWithResponses) GetListingPropertiesWithResponse(ctx context.Context, shopId int, listingId int, reqEditors ...RequestEditorFn) (*GetListingPropertiesResponse, error) {
	rsp, err := c.GetListingProperties(ctx, shopId, listingId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetListingPropertiesResponse(rsp)
}

// DeleteListingPropertyWithResponse request returning *DeleteListingPropertyResponse
func (c *ClientWithResponses) DeleteListingPropertyWithResponse(ctx context.Context, shopId int, listingId int, propertyId int, reqEditors ...RequestEditorFn) (*DeleteListingPropertyResponse, error) {
	rsp, err := c.DeleteListingProperty(ctx, shopId, listingId, propertyId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteListingPropertyResponse(rsp)
}

// UpdateListingPropertyWithBodyWithResponse request with arbitrary body returning *UpdateListingPropertyResponse
func (c *ClientWithResponses) UpdateListingPropertyWithBodyWithResponse(ctx context.Context, shopId int, listingId int, propertyId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateListingPropertyResponse, error) {
	rsp, err := c.UpdateListingPropertyWithBody(ctx, shopId, listingId, propertyId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateListingPropertyResponse(rsp)
}

func (c *ClientWithResponses) UpdateListingPropertyWithFormdataBodyWithResponse(ctx context.Context, shopId int, listingId int, propertyId int, body UpdateListingPropertyFormdataRequestBody, reqEditors ...RequestEditorFn) (*UpdateListingPropertyResponse, error) {
	rsp, err := c.UpdateListingPropertyWithFormdataBody(ctx, shopId, listingId, propertyId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateListingPropertyResponse(rsp)
}

// GetShopReceiptTransactionsByListingWithResponse request returning *GetShopReceiptTransactionsByListingResponse
func (c *ClientWithResponses) GetShopReceiptTransactionsByListingWithResponse(ctx context.Context, shopId int, listingId int, params *GetShopReceiptTransactionsByListingParams, reqEditors ...RequestEditorFn) (*GetShopReceiptTransactionsByListingResponse, error) {
	rsp, err := c.GetShopReceiptTransactionsByListing(ctx, shopId, listingId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetShopReceiptTransactionsByListingResponse(rsp)
}

// GetListingTranslationWithResponse request returning *GetListingTranslationResponse
func (c *ClientWithResponses) GetListingTranslationWithResponse(ctx context.Context, shopId int, listingId int, language string, reqEditors ...RequestEditorFn) (*GetListingTranslationResponse, error) {
	rsp, err := c.GetListingTranslation(ctx, shopId, listingId, language, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetListingTranslationResponse(rsp)
}

// CreateListingTranslationWithBodyWithResponse request with arbitrary body returning *CreateListingTranslationResponse
func (c *ClientWithResponses) CreateListingTranslationWithBodyWithResponse(ctx context.Context, shopId int, listingId int, language string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateListingTranslationResponse, error) {
	rsp, err := c.CreateListingTranslationWithBody(ctx, shopId, listingId, language, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateListingTranslationResponse(rsp)
}

func (c *ClientWithResponses) CreateListingTranslationWithFormdataBodyWithResponse(ctx context.Context, shopId int, listingId int, language string, body CreateListingTranslationFormdataRequestBody, reqEditors ...RequestEditorFn) (*CreateListingTranslationResponse, error) {
	rsp, err := c.CreateListingTranslationWithFormdataBody(ctx, shopId, listingId, language, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateListingTranslationResponse(rsp)
}

// UpdateListingTranslationWithBodyWithResponse request with arbitrary body returning *UpdateListingTranslationResponse
func (c *ClientWithResponses) UpdateListingTranslationWithBodyWithResponse(ctx context.Context, shopId int, listingId int, language string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateListingTranslationResponse, error) {
	rsp, err := c.UpdateListingTranslationWithBody(ctx, shopId, listingId, language, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateListingTranslationResponse(rsp)
}

func (c *ClientWithResponses) UpdateListingTranslationWithFormdataBodyWithResponse(ctx context.Context, shopId int, listingId int, language string, body UpdateListingTranslationFormdataRequestBody, reqEditors ...RequestEditorFn) (*UpdateListingTranslationResponse, error) {
	rsp, err := c.UpdateListingTranslationWithFormdataBody(ctx, shopId, listingId, language, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateListingTranslationResponse(rsp)
}

// GetListingVariationImagesWithResponse request returning *GetListingVariationImagesResponse
func (c *ClientWithResponses) GetListingVariationImagesWithResponse(ctx context.Context, shopId int, listingId int, reqEditors ...RequestEditorFn) (*GetListingVariationImagesResponse, error) {
	rsp, err := c.GetListingVariationImages(ctx, shopId, listingId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetListingVariationImagesResponse(rsp)
}

// UpdateVariationImagesWithBodyWithResponse request with arbitrary body returning *UpdateVariationImagesResponse
func (c *ClientWithResponses) UpdateVariationImagesWithBodyWithResponse(ctx context.Context, shopId int, listingId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateVariationImagesResponse, error) {
	rsp, err := c.UpdateVariationImagesWithBody(ctx, shopId, listingId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateVariationImagesResponse(rsp)
}

func (c *ClientWithResponses) UpdateVariationImagesWithResponse(ctx context.Context, shopId int, listingId int, body UpdateVariationImagesJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateVariationImagesResponse, error) {
	rsp, err := c.UpdateVariationImages(ctx, shopId, listingId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateVariationImagesResponse(rsp)
}

// UploadListingVideoWithBodyWithResponse request with arbitrary body returning *UploadListingVideoResponse
func (c *ClientWithResponses) UploadListingVideoWithBodyWithResponse(ctx context.Context, shopId int, listingId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UploadListingVideoResponse, error) {
	rsp, err := c.UploadListingVideoWithBody(ctx, shopId, listingId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUploadListingVideoResponse(rsp)
}

// DeleteListingVideoWithResponse request returning *DeleteListingVideoResponse
func (c *ClientWithResponses) DeleteListingVideoWithResponse(ctx context.Context, shopId int, listingId int, videoId int, reqEditors ...RequestEditorFn) (*DeleteListingVideoResponse, error) {
	rsp, err := c.DeleteListingVideo(ctx, shopId, listingId, videoId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteListingVideoResponse(rsp)
}

// GetShopPaymentAccountLedgerEntriesWithResponse request returning *GetShopPaymentAccountLedgerEntriesResponse
func (c *ClientWithResponses) GetShopPaymentAccountLedgerEntriesWithResponse(ctx context.Context, shopId int, params *GetShopPaymentAccountLedgerEntriesParams, reqEditors ...RequestEditorFn) (*GetShopPaymentAccountLedgerEntriesResponse, error) {
	rsp, err := c.GetShopPaymentAccountLedgerEntries(ctx, shopId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetShopPaymentAccountLedgerEntriesResponse(rsp)
}

// GetPaymentAccountLedgerEntryPaymentsWithResponse request returning *GetPaymentAccountLedgerEntryPaymentsResponse
func (c *ClientWithResponses) GetPaymentAccountLedgerEntryPaymentsWithResponse(ctx context.Context, shopId int, params *GetPaymentAccountLedgerEntryPaymentsParams, reqEditors ...RequestEditorFn) (*GetPaymentAccountLedgerEntryPaymentsResponse, error) {
	rsp, err := c.GetPaymentAccountLedgerEntryPayments(ctx, shopId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPaymentAccountLedgerEntryPaymentsResponse(rsp)
}

// GetShopPaymentAccountLedgerEntryWithResponse request returning *GetShopPaymentAccountLedgerEntryResponse
func (c *ClientWithResponses) GetShopPaymentAccountLedgerEntryWithResponse(ctx context.Context, shopId int, ledgerEntryId int, reqEditors ...RequestEditorFn) (*GetShopPaymentAccountLedgerEntryResponse, error) {
	rsp, err := c.GetShopPaymentAccountLedgerEntry(ctx, shopId, ledgerEntryId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetShopPaymentAccountLedgerEntryResponse(rsp)
}

// GetPaymentsWithResponse request returning *GetPaymentsResponse
func (c *ClientWithResponses) GetPaymentsWithResponse(ctx context.Context, shopId int, params *GetPaymentsParams, reqEditors ...RequestEditorFn) (*GetPaymentsResponse, error) {
	rsp, err := c.GetPayments(ctx, shopId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPaymentsResponse(rsp)
}

// GetShopReturnPoliciesWithResponse request returning *GetShopReturnPoliciesResponse
func (c *ClientWithResponses) GetShopReturnPoliciesWithResponse(ctx context.Context, shopId int, reqEditors ...RequestEditorFn) (*GetShopReturnPoliciesResponse, error) {
	rsp, err := c.GetShopReturnPolicies(ctx, shopId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetShopReturnPoliciesResponse(rsp)
}

// CreateShopReturnPolicyWithBodyWithResponse request with arbitrary body returning *CreateShopReturnPolicyResponse
func (c *ClientWithResponses) CreateShopReturnPolicyWithBodyWithResponse(ctx context.Context, shopId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateShopReturnPolicyResponse, error) {
	rsp, err := c.CreateShopReturnPolicyWithBody(ctx, shopId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateShopReturnPolicyResponse(rsp)
}

func (c *ClientWithResponses) CreateShopReturnPolicyWithFormdataBodyWithResponse(ctx context.Context, shopId int, body CreateShopReturnPolicyFormdataRequestBody, reqEditors ...RequestEditorFn) (*CreateShopReturnPolicyResponse, error) {
	rsp, err := c.CreateShopReturnPolicyWithFormdataBody(ctx, shopId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateShopReturnPolicyResponse(rsp)
}

// ConsolidateShopReturnPoliciesWithBodyWithResponse request with arbitrary body returning *ConsolidateShopReturnPoliciesResponse
func (c *ClientWithResponses) ConsolidateShopReturnPoliciesWithBodyWithResponse(ctx context.Context, shopId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ConsolidateShopReturnPoliciesResponse, error) {
	rsp, err := c.ConsolidateShopReturnPoliciesWithBody(ctx, shopId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseConsolidateShopReturnPoliciesResponse(rsp)
}

func (c *ClientWithResponses) ConsolidateShopReturnPoliciesWithFormdataBodyWithResponse(ctx context.Context, shopId int, body ConsolidateShopReturnPoliciesFormdataRequestBody, reqEditors ...RequestEditorFn) (*ConsolidateShopReturnPoliciesResponse, error) {
	rsp, err := c.ConsolidateShopReturnPoliciesWithFormdataBody(ctx, shopId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseConsolidateShopReturnPoliciesResponse(rsp)
}

// DeleteShopReturnPolicyWithResponse request returning *DeleteShopReturnPolicyResponse
func (c *ClientWithResponses) DeleteShopReturnPolicyWithResponse(ctx context.Context, shopId int, returnPolicyId int, reqEditors ...RequestEditorFn) (*DeleteShopReturnPolicyResponse, error) {
	rsp, err := c.DeleteShopReturnPolicy(ctx, shopId, returnPolicyId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteShopReturnPolicyResponse(rsp)
}

// GetShopReturnPolicyWithResponse request returning *GetShopReturnPolicyResponse
func (c *ClientWithResponses) GetShopReturnPolicyWithResponse(ctx context.Context, shopId int, returnPolicyId int, reqEditors ...RequestEditorFn) (*GetShopReturnPolicyResponse, error) {
	rsp, err := c.GetShopReturnPolicy(ctx, shopId, returnPolicyId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetShopReturnPolicyResponse(rsp)
}

// UpdateShopReturnPolicyWithBodyWithResponse request with arbitrary body returning *UpdateShopReturnPolicyResponse
func (c *ClientWithResponses) UpdateShopReturnPolicyWithBodyWithResponse(ctx context.Context, shopId int, returnPolicyId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateShopReturnPolicyResponse, error) {
	rsp, err := c.UpdateShopReturnPolicyWithBody(ctx, shopId, returnPolicyId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateShopReturnPolicyResponse(rsp)
}

func (c *ClientWithResponses) UpdateShopReturnPolicyWithFormdataBodyWithResponse(ctx context.Context, shopId int, returnPolicyId int, body UpdateShopReturnPolicyFormdataRequestBody, reqEditors ...RequestEditorFn) (*UpdateShopReturnPolicyResponse, error) {
	rsp, err := c.UpdateShopReturnPolicyWithFormdataBody(ctx, shopId, returnPolicyId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateShopReturnPolicyResponse(rsp)
}

// GetListingsByShopReturnPolicyWithResponse request returning *GetListingsByShopReturnPolicyResponse
func (c *ClientWithResponses) GetListingsByShopReturnPolicyWithResponse(ctx context.Context, shopId int, returnPolicyId int, reqEditors ...RequestEditorFn) (*GetListingsByShopReturnPolicyResponse, error) {
	rsp, err := c.GetListingsByShopReturnPolicy(ctx, shopId, returnPolicyId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetListingsByShopReturnPolicyResponse(rsp)
}

// GetShopProductionPartnersWithResponse request returning *GetShopProductionPartnersResponse
func (c *ClientWithResponses) GetShopProductionPartnersWithResponse(ctx context.Context, shopId int, reqEditors ...RequestEditorFn) (*GetShopProductionPartnersResponse, error) {
	rsp, err := c.GetShopProductionPartners(ctx, shopId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetShopProductionPartnersResponse(rsp)
}

// GetShopReceiptsWithResponse request returning *GetShopReceiptsResponse
func (c *ClientWithResponses) GetShopReceiptsWithResponse(ctx context.Context, shopId int, params *GetShopReceiptsParams, reqEditors ...RequestEditorFn) (*GetShopReceiptsResponse, error) {
	rsp, err := c.GetShopReceipts(ctx, shopId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetShopReceiptsResponse(rsp)
}

// GetShopReceiptWithResponse request returning *GetShopReceiptResponse
func (c *ClientWithResponses) GetShopReceiptWithResponse(ctx context.Context, shopId int, receiptId int, reqEditors ...RequestEditorFn) (*GetShopReceiptResponse, error) {
	rsp, err := c.GetShopReceipt(ctx, shopId, receiptId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetShopReceiptResponse(rsp)
}

// UpdateShopReceiptWithBodyWithResponse request with arbitrary body returning *UpdateShopReceiptResponse
func (c *ClientWithResponses) UpdateShopReceiptWithBodyWithResponse(ctx context.Context, shopId int, receiptId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateShopReceiptResponse, error) {
	rsp, err := c.UpdateShopReceiptWithBody(ctx, shopId, receiptId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateShopReceiptResponse(rsp)
}

func (c *ClientWithResponses) UpdateShopReceiptWithFormdataBodyWithResponse(ctx context.Context, shopId int, receiptId int, body UpdateShopReceiptFormdataRequestBody, reqEditors ...RequestEditorFn) (*UpdateShopReceiptResponse, error) {
	rsp, err := c.UpdateShopReceiptWithFormdataBody(ctx, shopId, receiptId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateShopReceiptResponse(rsp)
}

// GetListingsByShopReceiptWithResponse request returning *GetListingsByShopReceiptResponse
func (c *ClientWithResponses) GetListingsByShopReceiptWithResponse(ctx context.Context, shopId int, receiptId int, params *GetListingsByShopReceiptParams, reqEditors ...RequestEditorFn) (*GetListingsByShopReceiptResponse, error) {
	rsp, err := c.GetListingsByShopReceipt(ctx, shopId, receiptId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetListingsByShopReceiptResponse(rsp)
}

// GetShopPaymentByReceiptIdWithResponse request returning *GetShopPaymentByReceiptIdResponse
func (c *ClientWithResponses) GetShopPaymentByReceiptIdWithResponse(ctx context.Context, shopId int, receiptId int, reqEditors ...RequestEditorFn) (*GetShopPaymentByReceiptIdResponse, error) {
	rsp, err := c.GetShopPaymentByReceiptId(ctx, shopId, receiptId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetShopPaymentByReceiptIdResponse(rsp)
}

// CreateReceiptShipmentWithBodyWithResponse request with arbitrary body returning *CreateReceiptShipmentResponse
func (c *ClientWithResponses) CreateReceiptShipmentWithBodyWithResponse(ctx context.Context, shopId int, receiptId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateReceiptShipmentResponse, error) {
	rsp, err := c.CreateReceiptShipmentWithBody(ctx, shopId, receiptId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateReceiptShipmentResponse(rsp)
}

func (c *ClientWithResponses) CreateReceiptShipmentWithFormdataBodyWithResponse(ctx context.Context, shopId int, receiptId int, body CreateReceiptShipmentFormdataRequestBody, reqEditors ...RequestEditorFn) (*CreateReceiptShipmentResponse, error) {
	rsp, err := c.CreateReceiptShipmentWithFormdataBody(ctx, shopId, receiptId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateReceiptShipmentResponse(rsp)
}

// GetShopReceiptTransactionsByReceiptWithResponse request returning *GetShopReceiptTransactionsByReceiptResponse
func (c *ClientWithResponses) GetShopReceiptTransactionsByReceiptWithResponse(ctx context.Context, shopId int, receiptId int, reqEditors ...RequestEditorFn) (*GetShopReceiptTransactionsByReceiptResponse, error) {
	rsp, err := c.GetShopReceiptTransactionsByReceipt(ctx, shopId, receiptId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetShopReceiptTransactionsByReceiptResponse(rsp)
}

// GetReviewsByShopWithResponse request returning *GetReviewsByShopResponse
func (c *ClientWithResponses) GetReviewsByShopWithResponse(ctx context.Context, shopId int, params *GetReviewsByShopParams, reqEditors ...RequestEditorFn) (*GetReviewsByShopResponse, error) {
	rsp, err := c.GetReviewsByShop(ctx, shopId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetReviewsByShopResponse(rsp)
}

// GetShopSectionsWithResponse request returning *GetShopSectionsResponse
func (c *ClientWithResponses) GetShopSectionsWithResponse(ctx context.Context, shopId int, reqEditors ...RequestEditorFn) (*GetShopSectionsResponse, error) {
	rsp, err := c.GetShopSections(ctx, shopId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetShopSectionsResponse(rsp)
}

// CreateShopSectionWithBodyWithResponse request with arbitrary body returning *CreateShopSectionResponse
func (c *ClientWithResponses) CreateShopSectionWithBodyWithResponse(ctx context.Context, shopId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateShopSectionResponse, error) {
	rsp, err := c.CreateShopSectionWithBody(ctx, shopId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateShopSectionResponse(rsp)
}

func (c *ClientWithResponses) CreateShopSectionWithFormdataBodyWithResponse(ctx context.Context, shopId int, body CreateShopSectionFormdataRequestBody, reqEditors ...RequestEditorFn) (*CreateShopSectionResponse, error) {
	rsp, err := c.CreateShopSectionWithFormdataBody(ctx, shopId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateShopSectionResponse(rsp)
}

// DeleteShopSectionWithResponse request returning *DeleteShopSectionResponse
func (c *ClientWithResponses) DeleteShopSectionWithResponse(ctx context.Context, shopId int, shopSectionId int, reqEditors ...RequestEditorFn) (*DeleteShopSectionResponse, error) {
	rsp, err := c.DeleteShopSection(ctx, shopId, shopSectionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteShopSectionResponse(rsp)
}

// GetShopSectionWithResponse request returning *GetShopSectionResponse
func (c *ClientWithResponses) GetShopSectionWithResponse(ctx context.Context, shopId int, shopSectionId int, reqEditors ...RequestEditorFn) (*GetShopSectionResponse, error) {
	rsp, err := c.GetShopSection(ctx, shopId, shopSectionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetShopSectionResponse(rsp)
}

// UpdateShopSectionWithBodyWithResponse request with arbitrary body returning *UpdateShopSectionResponse
func (c *ClientWithResponses) UpdateShopSectionWithBodyWithResponse(ctx context.Context, shopId int, shopSectionId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateShopSectionResponse, error) {
	rsp, err := c.UpdateShopSectionWithBody(ctx, shopId, shopSectionId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateShopSectionResponse(rsp)
}

func (c *ClientWithResponses) UpdateShopSectionWithFormdataBodyWithResponse(ctx context.Context, shopId int, shopSectionId int, body UpdateShopSectionFormdataRequestBody, reqEditors ...RequestEditorFn) (*UpdateShopSectionResponse, error) {
	rsp, err := c.UpdateShopSectionWithFormdataBody(ctx, shopId, shopSectionId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateShopSectionResponse(rsp)
}

// GetShopShippingProfilesWithResponse request returning *GetShopShippingProfilesResponse
func (c *ClientWithResponses) GetShopShippingProfilesWithResponse(ctx context.Context, shopId int, reqEditors ...RequestEditorFn) (*GetShopShippingProfilesResponse, error) {
	rsp, err := c.GetShopShippingProfiles(ctx, shopId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetShopShippingProfilesResponse(rsp)
}

// CreateShopShippingProfileWithBodyWithResponse request with arbitrary body returning *CreateShopShippingProfileResponse
func (c *ClientWithResponses) CreateShopShippingProfileWithBodyWithResponse(ctx context.Context, shopId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateShopShippingProfileResponse, error) {
	rsp, err := c.CreateShopShippingProfileWithBody(ctx, shopId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateShopShippingProfileResponse(rsp)
}

func (c *ClientWithResponses) CreateShopShippingProfileWithFormdataBodyWithResponse(ctx context.Context, shopId int, body CreateShopShippingProfileFormdataRequestBody, reqEditors ...RequestEditorFn) (*CreateShopShippingProfileResponse, error) {
	rsp, err := c.CreateShopShippingProfileWithFormdataBody(ctx, shopId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateShopShippingProfileResponse(rsp)
}

// DeleteShopShippingProfileWithResponse request returning *DeleteShopShippingProfileResponse
func (c *ClientWithResponses) DeleteShopShippingProfileWithResponse(ctx context.Context, shopId int, shippingProfileId int, reqEditors ...RequestEditorFn) (*DeleteShopShippingProfileResponse, error) {
	rsp, err := c.DeleteShopShippingProfile(ctx, shopId, shippingProfileId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteShopShippingProfileResponse(rsp)
}

// GetShopShippingProfileWithResponse request returning *GetShopShippingProfileResponse
func (c *ClientWithResponses) GetShopShippingProfileWithResponse(ctx context.Context, shopId int, shippingProfileId int, reqEditors ...RequestEditorFn) (*GetShopShippingProfileResponse, error) {
	rsp, err := c.GetShopShippingProfile(ctx, shopId, shippingProfileId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetShopShippingProfileResponse(rsp)
}

// UpdateShopShippingProfileWithBodyWithResponse request with arbitrary body returning *UpdateShopShippingProfileResponse
func (c *ClientWithResponses) UpdateShopShippingProfileWithBodyWithResponse(ctx context.Context, shopId int, shippingProfileId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateShopShippingProfileResponse, error) {
	rsp, err := c.UpdateShopShippingProfileWithBody(ctx, shopId, shippingProfileId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateShopShippingProfileResponse(rsp)
}

func (c *ClientWithResponses) UpdateShopShippingProfileWithFormdataBodyWithResponse(ctx context.Context, shopId int, shippingProfileId int, body UpdateShopShippingProfileFormdataRequestBody, reqEditors ...RequestEditorFn) (*UpdateShopShippingProfileResponse, error) {
	rsp, err := c.UpdateShopShippingProfileWithFormdataBody(ctx, shopId, shippingProfileId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateShopShippingProfileResponse(rsp)
}

// GetShopShippingProfileDestinationsByShippingProfileWithResponse request returning *GetShopShippingProfileDestinationsByShippingProfileResponse
func (c *ClientWithResponses) GetShopShippingProfileDestinationsByShippingProfileWithResponse(ctx context.Context, shopId int, shippingProfileId int, params *GetShopShippingProfileDestinationsByShippingProfileParams, reqEditors ...RequestEditorFn) (*GetShopShippingProfileDestinationsByShippingProfileResponse, error) {
	rsp, err := c.GetShopShippingProfileDestinationsByShippingProfile(ctx, shopId, shippingProfileId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetShopShippingProfileDestinationsByShippingProfileResponse(rsp)
}

// CreateShopShippingProfileDestinationWithBodyWithResponse request with arbitrary body returning *CreateShopShippingProfileDestinationResponse
func (c *ClientWithResponses) CreateShopShippingProfileDestinationWithBodyWithResponse(ctx context.Context, shopId int, shippingProfileId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateShopShippingProfileDestinationResponse, error) {
	rsp, err := c.CreateShopShippingProfileDestinationWithBody(ctx, shopId, shippingProfileId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateShopShippingProfileDestinationResponse(rsp)
}

func (c *ClientWithResponses) CreateShopShippingProfileDestinationWithFormdataBodyWithResponse(ctx context.Context, shopId int, shippingProfileId int, body CreateShopShippingProfileDestinationFormdataRequestBody, reqEditors ...RequestEditorFn) (*CreateShopShippingProfileDestinationResponse, error) {
	rsp, err := c.CreateShopShippingProfileDestinationWithFormdataBody(ctx, shopId, shippingProfileId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateShopShippingProfileDestinationResponse(rsp)
}

// DeleteShopShippingProfileDestinationWithResponse request returning *DeleteShopShippingProfileDestinationResponse
func (c *ClientWithResponses) DeleteShopShippingProfileDestinationWithResponse(ctx context.Context, shopId int, shippingProfileId int, shippingProfileDestinationId int, reqEditors ...RequestEditorFn) (*DeleteShopShippingProfileDestinationResponse, error) {
	rsp, err := c.DeleteShopShippingProfileDestination(ctx, shopId, shippingProfileId, shippingProfileDestinationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteShopShippingProfileDestinationResponse(rsp)
}

// UpdateShopShippingProfileDestinationWithBodyWithResponse request with arbitrary body returning *UpdateShopShippingProfileDestinationResponse
func (c *ClientWithResponses) UpdateShopShippingProfileDestinationWithBodyWithResponse(ctx context.Context, shopId int, shippingProfileId int, shippingProfileDestinationId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateShopShippingProfileDestinationResponse, error) {
	rsp, err := c.UpdateShopShippingProfileDestinationWithBody(ctx, shopId, shippingProfileId, shippingProfileDestinationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateShopShippingProfileDestinationResponse(rsp)
}

func (c *ClientWithResponses) UpdateShopShippingProfileDestinationWithFormdataBodyWithResponse(ctx context.Context, shopId int, shippingProfileId int, shippingProfileDestinationId int, body UpdateShopShippingProfileDestinationFormdataRequestBody, reqEditors ...RequestEditorFn) (*UpdateShopShippingProfileDestinationResponse, error) {
	rsp, err := c.UpdateShopShippingProfileDestinationWithFormdataBody(ctx, shopId, shippingProfileId, shippingProfileDestinationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateShopShippingProfileDestinationResponse(rsp)
}

// GetShopShippingProfileUpgradesWithResponse request returning *GetShopShippingProfileUpgradesResponse
func (c *ClientWithResponses) GetShopShippingProfileUpgradesWithResponse(ctx context.Context, shopId int, shippingProfileId int, reqEditors ...RequestEditorFn) (*GetShopShippingProfileUpgradesResponse, error) {
	rsp, err := c.GetShopShippingProfileUpgrades(ctx, shopId, shippingProfileId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetShopShippingProfileUpgradesResponse(rsp)
}

// CreateShopShippingProfileUpgradeWithBodyWithResponse request with arbitrary body returning *CreateShopShippingProfileUpgradeResponse
func (c *ClientWithResponses) CreateShopShippingProfileUpgradeWithBodyWithResponse(ctx context.Context, shopId int, shippingProfileId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateShopShippingProfileUpgradeResponse, error) {
	rsp, err := c.CreateShopShippingProfileUpgradeWithBody(ctx, shopId, shippingProfileId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateShopShippingProfileUpgradeResponse(rsp)
}

func (c *ClientWithResponses) CreateShopShippingProfileUpgradeWithFormdataBodyWithResponse(ctx context.Context, shopId int, shippingProfileId int, body CreateShopShippingProfileUpgradeFormdataRequestBody, reqEditors ...RequestEditorFn) (*CreateShopShippingProfileUpgradeResponse, error) {
	rsp, err := c.CreateShopShippingProfileUpgradeWithFormdataBody(ctx, shopId, shippingProfileId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateShopShippingProfileUpgradeResponse(rsp)
}

// DeleteShopShippingProfileUpgradeWithResponse request returning *DeleteShopShippingProfileUpgradeResponse
func (c *ClientWithResponses) DeleteShopShippingProfileUpgradeWithResponse(ctx context.Context, shopId int, shippingProfileId int, upgradeId int, reqEditors ...RequestEditorFn) (*DeleteShopShippingProfileUpgradeResponse, error) {
	rsp, err := c.DeleteShopShippingProfileUpgrade(ctx, shopId, shippingProfileId, upgradeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteShopShippingProfileUpgradeResponse(rsp)
}

// UpdateShopShippingProfileUpgradeWithBodyWithResponse request with arbitrary body returning *UpdateShopShippingProfileUpgradeResponse
func (c *ClientWithResponses) UpdateShopShippingProfileUpgradeWithBodyWithResponse(ctx context.Context, shopId int, shippingProfileId int, upgradeId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateShopShippingProfileUpgradeResponse, error) {
	rsp, err := c.UpdateShopShippingProfileUpgradeWithBody(ctx, shopId, shippingProfileId, upgradeId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateShopShippingProfileUpgradeResponse(rsp)
}

func (c *ClientWithResponses) UpdateShopShippingProfileUpgradeWithFormdataBodyWithResponse(ctx context.Context, shopId int, shippingProfileId int, upgradeId int, body UpdateShopShippingProfileUpgradeFormdataRequestBody, reqEditors ...RequestEditorFn) (*UpdateShopShippingProfileUpgradeResponse, error) {
	rsp, err := c.UpdateShopShippingProfileUpgradeWithFormdataBody(ctx, shopId, shippingProfileId, upgradeId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateShopShippingProfileUpgradeResponse(rsp)
}

// GetListingsByShopSectionIdWithResponse request returning *GetListingsByShopSectionIdResponse
func (c *ClientWithResponses) GetListingsByShopSectionIdWithResponse(ctx context.Context, shopId int, params *GetListingsByShopSectionIdParams, reqEditors ...RequestEditorFn) (*GetListingsByShopSectionIdResponse, error) {
	rsp, err := c.GetListingsByShopSectionId(ctx, shopId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetListingsByShopSectionIdResponse(rsp)
}

// GetShopReceiptTransactionsByShopWithResponse request returning *GetShopReceiptTransactionsByShopResponse
func (c *ClientWithResponses) GetShopReceiptTransactionsByShopWithResponse(ctx context.Context, shopId int, params *GetShopReceiptTransactionsByShopParams, reqEditors ...RequestEditorFn) (*GetShopReceiptTransactionsByShopResponse, error) {
	rsp, err := c.GetShopReceiptTransactionsByShop(ctx, shopId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetShopReceiptTransactionsByShopResponse(rsp)
}

// GetShopReceiptTransactionWithResponse request returning *GetShopReceiptTransactionResponse
func (c *ClientWithResponses) GetShopReceiptTransactionWithResponse(ctx context.Context, shopId int, transactionId int, reqEditors ...RequestEditorFn) (*GetShopReceiptTransactionResponse, error) {
	rsp, err := c.GetShopReceiptTransaction(ctx, shopId, transactionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetShopReceiptTransactionResponse(rsp)
}

// GetUserAddressesWithResponse request returning *GetUserAddressesResponse
func (c *ClientWithResponses) GetUserAddressesWithResponse(ctx context.Context, params *GetUserAddressesParams, reqEditors ...RequestEditorFn) (*GetUserAddressesResponse, error) {
	rsp, err := c.GetUserAddresses(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserAddressesResponse(rsp)
}

// DeleteUserAddressWithResponse request returning *DeleteUserAddressResponse
func (c *ClientWithResponses) DeleteUserAddressWithResponse(ctx context.Context, userAddressId int, reqEditors ...RequestEditorFn) (*DeleteUserAddressResponse, error) {
	rsp, err := c.DeleteUserAddress(ctx, userAddressId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteUserAddressResponse(rsp)
}

// GetUserAddressWithResponse request returning *GetUserAddressResponse
func (c *ClientWithResponses) GetUserAddressWithResponse(ctx context.Context, userAddressId int, reqEditors ...RequestEditorFn) (*GetUserAddressResponse, error) {
	rsp, err := c.GetUserAddress(ctx, userAddressId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserAddressResponse(rsp)
}

// GetMeWithResponse request returning *GetMeResponse
func (c *ClientWithResponses) GetMeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMeResponse, error) {
	rsp, err := c.GetMe(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMeResponse(rsp)
}

// GetUserWithResponse request returning *GetUserResponse
func (c *ClientWithResponses) GetUserWithResponse(ctx context.Context, userId int, reqEditors ...RequestEditorFn) (*GetUserResponse, error) {
	rsp, err := c.GetUser(ctx, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserResponse(rsp)
}

// GetShopByOwnerUserIdWithResponse request returning *GetShopByOwnerUserIdResponse
func (c *ClientWithResponses) GetShopByOwnerUserIdWithResponse(ctx context.Context, userId int, reqEditors ...RequestEditorFn) (*GetShopByOwnerUserIdResponse, error) {
	rsp, err := c.GetShopByOwnerUserId(ctx, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetShopByOwnerUserIdResponse(rsp)
}

// ParseGetBuyerTaxonomyNodesResponse parses an HTTP response from a GetBuyerTaxonomyNodesWithResponse call
func ParseGetBuyerTaxonomyNodesResponse(rsp *http.Response) (*GetBuyerTaxonomyNodesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBuyerTaxonomyNodesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BuyerTaxonomyNodes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetPropertiesByBuyerTaxonomyIdResponse parses an HTTP response from a GetPropertiesByBuyerTaxonomyIdWithResponse call
func ParseGetPropertiesByBuyerTaxonomyIdResponse(rsp *http.Response) (*GetPropertiesByBuyerTaxonomyIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPropertiesByBuyerTaxonomyIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BuyerTaxonomyNodeProperties
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseFindAllListingsActiveResponse parses an HTTP response from a FindAllListingsActiveWithResponse call
func ParseFindAllListingsActiveResponse(rsp *http.Response) (*FindAllListingsActiveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindAllListingsActiveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ShopListings
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetListingsByListingIdsResponse parses an HTTP response from a GetListingsByListingIdsWithResponse call
func ParseGetListingsByListingIdsResponse(rsp *http.Response) (*GetListingsByListingIdsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetListingsByListingIdsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ShopListingsWithAssociations
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteListingResponse parses an HTTP response from a DeleteListingWithResponse call
func ParseDeleteListingResponse(rsp *http.Response) (*DeleteListingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteListingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetListingResponse parses an HTTP response from a GetListingWithResponse call
func ParseGetListingResponse(rsp *http.Response) (*GetListingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetListingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ShopListingWithAssociations
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetListingImagesResponse parses an HTTP response from a GetListingImagesWithResponse call
func ParseGetListingImagesResponse(rsp *http.Response) (*GetListingImagesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetListingImagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListingImages
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetListingImageResponse parses an HTTP response from a GetListingImageWithResponse call
func ParseGetListingImageResponse(rsp *http.Response) (*GetListingImageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetListingImageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListingImage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetListingInventoryResponse parses an HTTP response from a GetListingInventoryWithResponse call
func ParseGetListingInventoryResponse(rsp *http.Response) (*GetListingInventoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetListingInventoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListingInventoryWithAssociations
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateListingInventoryResponse parses an HTTP response from a UpdateListingInventoryWithResponse call
func ParseUpdateListingInventoryResponse(rsp *http.Response) (*UpdateListingInventoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateListingInventoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListingInventory
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetListingProductResponse parses an HTTP response from a GetListingProductWithResponse call
func ParseGetListingProductResponse(rsp *http.Response) (*GetListingProductResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetListingProductResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListingInventoryProduct
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetListingOfferingResponse parses an HTTP response from a GetListingOfferingWithResponse call
func ParseGetListingOfferingResponse(rsp *http.Response) (*GetListingOfferingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetListingOfferingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListingInventoryProductOffering
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetListingPropertyResponse parses an HTTP response from a GetListingPropertyWithResponse call
func ParseGetListingPropertyResponse(rsp *http.Response) (*GetListingPropertyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetListingPropertyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListingPropertyValue
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	}

	return response, nil
}

// ParseGetReviewsByListingResponse parses an HTTP response from a GetReviewsByListingWithResponse call
func ParseGetReviewsByListingResponse(rsp *http.Response) (*GetReviewsByListingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetReviewsByListingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListingReviews
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetListingVideosResponse parses an HTTP response from a GetListingVideosWithResponse call
func ParseGetListingVideosResponse(rsp *http.Response) (*GetListingVideosResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetListingVideosResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListingVideos
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetListingVideoResponse parses an HTTP response from a GetListingVideoWithResponse call
func ParseGetListingVideoResponse(rsp *http.Response) (*GetListingVideoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetListingVideoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListingVideo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePingResponse parses an HTTP response from a PingWithResponse call
func ParsePingResponse(rsp *http.Response) (*PingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Pong
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseTokenScopesResponse parses an HTTP response from a TokenScopesWithResponse call
func ParseTokenScopesResponse(rsp *http.Response) (*TokenScopesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TokenScopesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Scopes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetSellerTaxonomyNodesResponse parses an HTTP response from a GetSellerTaxonomyNodesWithResponse call
func ParseGetSellerTaxonomyNodesResponse(rsp *http.Response) (*GetSellerTaxonomyNodesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSellerTaxonomyNodesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SellerTaxonomyNodes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetPropertiesByTaxonomyIdResponse parses an HTTP response from a GetPropertiesByTaxonomyIdWithResponse call
func ParseGetPropertiesByTaxonomyIdResponse(rsp *http.Response) (*GetPropertiesByTaxonomyIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPropertiesByTaxonomyIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TaxonomyNodeProperties
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetShippingCarriersResponse parses an HTTP response from a GetShippingCarriersWithResponse call
func ParseGetShippingCarriersResponse(rsp *http.Response) (*GetShippingCarriersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetShippingCarriersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ShippingCarriers
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseFindShopsResponse parses an HTTP response from a FindShopsWithResponse call
func ParseFindShopsResponse(rsp *http.Response) (*FindShopsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindShopsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Shops
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetShopResponse parses an HTTP response from a GetShopWithResponse call
func ParseGetShopResponse(rsp *http.Response) (*GetShopResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetShopResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Shop
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateShopResponse parses an HTTP response from a UpdateShopWithResponse call
func ParseUpdateShopResponse(rsp *http.Response) (*UpdateShopResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateShopResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Shop
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetListingsByShopResponse parses an HTTP response from a GetListingsByShopWithResponse call
func ParseGetListingsByShopResponse(rsp *http.Response) (*GetListingsByShopResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetListingsByShopResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ShopListingsWithAssociations
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateDraftListingResponse parses an HTTP response from a CreateDraftListingWithResponse call
func ParseCreateDraftListingResponse(rsp *http.Response) (*CreateDraftListingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateDraftListingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ShopListing
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseFindAllActiveListingsByShopResponse parses an HTTP response from a FindAllActiveListingsByShopWithResponse call
func ParseFindAllActiveListingsByShopResponse(rsp *http.Response) (*FindAllActiveListingsByShopResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindAllActiveListingsByShopResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ShopListings
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetFeaturedListingsByShopResponse parses an HTTP response from a GetFeaturedListingsByShopWithResponse call
func ParseGetFeaturedListingsByShopResponse(rsp *http.Response) (*GetFeaturedListingsByShopResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFeaturedListingsByShopResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ShopListings
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateListingResponse parses an HTTP response from a UpdateListingWithResponse call
func ParseUpdateListingResponse(rsp *http.Response) (*UpdateListingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateListingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ShopListing
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateListingDeprecatedResponse parses an HTTP response from a UpdateListingDeprecatedWithResponse call
func ParseUpdateListingDeprecatedResponse(rsp *http.Response) (*UpdateListingDeprecatedResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateListingDeprecatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ShopListing
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetAllListingFilesResponse parses an HTTP response from a GetAllListingFilesWithResponse call
func ParseGetAllListingFilesResponse(rsp *http.Response) (*GetAllListingFilesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllListingFilesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ShopListingFiles
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUploadListingFileResponse parses an HTTP response from a UploadListingFileWithResponse call
func ParseUploadListingFileResponse(rsp *http.Response) (*UploadListingFileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UploadListingFileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ShopListingFile
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteListingFileResponse parses an HTTP response from a DeleteListingFileWithResponse call
func ParseDeleteListingFileResponse(rsp *http.Response) (*DeleteListingFileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteListingFileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetListingFileResponse parses an HTTP response from a GetListingFileWithResponse call
func ParseGetListingFileResponse(rsp *http.Response) (*GetListingFileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetListingFileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ShopListingFile
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetListingImagesDeprecatedResponse parses an HTTP response from a GetListingImagesDeprecatedWithResponse call
func ParseGetListingImagesDeprecatedResponse(rsp *http.Response) (*GetListingImagesDeprecatedResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetListingImagesDeprecatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListingImages
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUploadListingImageResponse parses an HTTP response from a UploadListingImageWithResponse call
func ParseUploadListingImageResponse(rsp *http.Response) (*UploadListingImageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UploadListingImageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ListingImage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteListingImageResponse parses an HTTP response from a DeleteListingImageWithResponse call
func ParseDeleteListingImageResponse(rsp *http.Response) (*DeleteListingImageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteListingImageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetListingImageDeprecatedResponse parses an HTTP response from a GetListingImageDeprecatedWithResponse call
func ParseGetListingImageDeprecatedResponse(rsp *http.Response) (*GetListingImageDeprecatedResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetListingImageDeprecatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListingImage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetListingPropertiesResponse parses an HTTP response from a GetListingPropertiesWithResponse call
func ParseGetListingPropertiesResponse(rsp *http.Response) (*GetListingPropertiesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetListingPropertiesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListingPropertyValues
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteListingPropertyResponse parses an HTTP response from a DeleteListingPropertyWithResponse call
func ParseDeleteListingPropertyResponse(rsp *http.Response) (*DeleteListingPropertyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteListingPropertyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateListingPropertyResponse parses an HTTP response from a UpdateListingPropertyWithResponse call
func ParseUpdateListingPropertyResponse(rsp *http.Response) (*UpdateListingPropertyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateListingPropertyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListingPropertyValue
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetShopReceiptTransactionsByListingResponse parses an HTTP response from a GetShopReceiptTransactionsByListingWithResponse call
func ParseGetShopReceiptTransactionsByListingResponse(rsp *http.Response) (*GetShopReceiptTransactionsByListingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetShopReceiptTransactionsByListingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ShopReceiptTransactions
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetListingTranslationResponse parses an HTTP response from a GetListingTranslationWithResponse call
func ParseGetListingTranslationResponse(rsp *http.Response) (*GetListingTranslationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetListingTranslationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListingTranslation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateListingTranslationResponse parses an HTTP response from a CreateListingTranslationWithResponse call
func ParseCreateListingTranslationResponse(rsp *http.Response) (*CreateListingTranslationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateListingTranslationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListingTranslation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateListingTranslationResponse parses an HTTP response from a UpdateListingTranslationWithResponse call
func ParseUpdateListingTranslationResponse(rsp *http.Response) (*UpdateListingTranslationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateListingTranslationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListingTranslation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetListingVariationImagesResponse parses an HTTP response from a GetListingVariationImagesWithResponse call
func ParseGetListingVariationImagesResponse(rsp *http.Response) (*GetListingVariationImagesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetListingVariationImagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListingVariationImages
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateVariationImagesResponse parses an HTTP response from a UpdateVariationImagesWithResponse call
func ParseUpdateVariationImagesResponse(rsp *http.Response) (*UpdateVariationImagesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateVariationImagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListingVariationImages
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUploadListingVideoResponse parses an HTTP response from a UploadListingVideoWithResponse call
func ParseUploadListingVideoResponse(rsp *http.Response) (*UploadListingVideoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UploadListingVideoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ListingVideo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteListingVideoResponse parses an HTTP response from a DeleteListingVideoWithResponse call
func ParseDeleteListingVideoResponse(rsp *http.Response) (*DeleteListingVideoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteListingVideoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetShopPaymentAccountLedgerEntriesResponse parses an HTTP response from a GetShopPaymentAccountLedgerEntriesWithResponse call
func ParseGetShopPaymentAccountLedgerEntriesResponse(rsp *http.Response) (*GetShopPaymentAccountLedgerEntriesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetShopPaymentAccountLedgerEntriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaymentAccountLedgerEntries
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetPaymentAccountLedgerEntryPaymentsResponse parses an HTTP response from a GetPaymentAccountLedgerEntryPaymentsWithResponse call
func ParseGetPaymentAccountLedgerEntryPaymentsResponse(rsp *http.Response) (*GetPaymentAccountLedgerEntryPaymentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPaymentAccountLedgerEntryPaymentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Payments
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetShopPaymentAccountLedgerEntryResponse parses an HTTP response from a GetShopPaymentAccountLedgerEntryWithResponse call
func ParseGetShopPaymentAccountLedgerEntryResponse(rsp *http.Response) (*GetShopPaymentAccountLedgerEntryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetShopPaymentAccountLedgerEntryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaymentAccountLedgerEntry
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetPaymentsResponse parses an HTTP response from a GetPaymentsWithResponse call
func ParseGetPaymentsResponse(rsp *http.Response) (*GetPaymentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPaymentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Payments
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetShopReturnPoliciesResponse parses an HTTP response from a GetShopReturnPoliciesWithResponse call
func ParseGetShopReturnPoliciesResponse(rsp *http.Response) (*GetShopReturnPoliciesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetShopReturnPoliciesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ShopReturnPolicies
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateShopReturnPolicyResponse parses an HTTP response from a CreateShopReturnPolicyWithResponse call
func ParseCreateShopReturnPolicyResponse(rsp *http.Response) (*CreateShopReturnPolicyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateShopReturnPolicyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ShopReturnPolicy
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseConsolidateShopReturnPoliciesResponse parses an HTTP response from a ConsolidateShopReturnPoliciesWithResponse call
func ParseConsolidateShopReturnPoliciesResponse(rsp *http.Response) (*ConsolidateShopReturnPoliciesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ConsolidateShopReturnPoliciesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ShopReturnPolicy
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteShopReturnPolicyResponse parses an HTTP response from a DeleteShopReturnPolicyWithResponse call
func ParseDeleteShopReturnPolicyResponse(rsp *http.Response) (*DeleteShopReturnPolicyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteShopReturnPolicyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetShopReturnPolicyResponse parses an HTTP response from a GetShopReturnPolicyWithResponse call
func ParseGetShopReturnPolicyResponse(rsp *http.Response) (*GetShopReturnPolicyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetShopReturnPolicyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ShopReturnPolicy
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateShopReturnPolicyResponse parses an HTTP response from a UpdateShopReturnPolicyWithResponse call
func ParseUpdateShopReturnPolicyResponse(rsp *http.Response) (*UpdateShopReturnPolicyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateShopReturnPolicyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ShopReturnPolicy
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetListingsByShopReturnPolicyResponse parses an HTTP response from a GetListingsByShopReturnPolicyWithResponse call
func ParseGetListingsByShopReturnPolicyResponse(rsp *http.Response) (*GetListingsByShopReturnPolicyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetListingsByShopReturnPolicyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ShopListings
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetShopProductionPartnersResponse parses an HTTP response from a GetShopProductionPartnersWithResponse call
func ParseGetShopProductionPartnersResponse(rsp *http.Response) (*GetShopProductionPartnersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetShopProductionPartnersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ShopProductionPartners
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetShopReceiptsResponse parses an HTTP response from a GetShopReceiptsWithResponse call
func ParseGetShopReceiptsResponse(rsp *http.Response) (*GetShopReceiptsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetShopReceiptsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ShopReceipts
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetShopReceiptResponse parses an HTTP response from a GetShopReceiptWithResponse call
func ParseGetShopReceiptResponse(rsp *http.Response) (*GetShopReceiptResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetShopReceiptResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ShopReceipt
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateShopReceiptResponse parses an HTTP response from a UpdateShopReceiptWithResponse call
func ParseUpdateShopReceiptResponse(rsp *http.Response) (*UpdateShopReceiptResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateShopReceiptResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ShopReceipt
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetListingsByShopReceiptResponse parses an HTTP response from a GetListingsByShopReceiptWithResponse call
func ParseGetListingsByShopReceiptResponse(rsp *http.Response) (*GetListingsByShopReceiptResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetListingsByShopReceiptResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ShopListings
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetShopPaymentByReceiptIdResponse parses an HTTP response from a GetShopPaymentByReceiptIdWithResponse call
func ParseGetShopPaymentByReceiptIdResponse(rsp *http.Response) (*GetShopPaymentByReceiptIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetShopPaymentByReceiptIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Payments
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateReceiptShipmentResponse parses an HTTP response from a CreateReceiptShipmentWithResponse call
func ParseCreateReceiptShipmentResponse(rsp *http.Response) (*CreateReceiptShipmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateReceiptShipmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ShopReceipt
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetShopReceiptTransactionsByReceiptResponse parses an HTTP response from a GetShopReceiptTransactionsByReceiptWithResponse call
func ParseGetShopReceiptTransactionsByReceiptResponse(rsp *http.Response) (*GetShopReceiptTransactionsByReceiptResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetShopReceiptTransactionsByReceiptResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ShopReceiptTransactions
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetReviewsByShopResponse parses an HTTP response from a GetReviewsByShopWithResponse call
func ParseGetReviewsByShopResponse(rsp *http.Response) (*GetReviewsByShopResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetReviewsByShopResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TransactionReviews
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetShopSectionsResponse parses an HTTP response from a GetShopSectionsWithResponse call
func ParseGetShopSectionsResponse(rsp *http.Response) (*GetShopSectionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetShopSectionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ShopSections
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateShopSectionResponse parses an HTTP response from a CreateShopSectionWithResponse call
func ParseCreateShopSectionResponse(rsp *http.Response) (*CreateShopSectionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateShopSectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ShopSection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseDeleteShopSectionResponse parses an HTTP response from a DeleteShopSectionWithResponse call
func ParseDeleteShopSectionResponse(rsp *http.Response) (*DeleteShopSectionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteShopSectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetShopSectionResponse parses an HTTP response from a GetShopSectionWithResponse call
func ParseGetShopSectionResponse(rsp *http.Response) (*GetShopSectionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetShopSectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ShopSection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateShopSectionResponse parses an HTTP response from a UpdateShopSectionWithResponse call
func ParseUpdateShopSectionResponse(rsp *http.Response) (*UpdateShopSectionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateShopSectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ShopSection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetShopShippingProfilesResponse parses an HTTP response from a GetShopShippingProfilesWithResponse call
func ParseGetShopShippingProfilesResponse(rsp *http.Response) (*GetShopShippingProfilesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetShopShippingProfilesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ShopShippingProfiles
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateShopShippingProfileResponse parses an HTTP response from a CreateShopShippingProfileWithResponse call
func ParseCreateShopShippingProfileResponse(rsp *http.Response) (*CreateShopShippingProfileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateShopShippingProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ShopShippingProfile
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteShopShippingProfileResponse parses an HTTP response from a DeleteShopShippingProfileWithResponse call
func ParseDeleteShopShippingProfileResponse(rsp *http.Response) (*DeleteShopShippingProfileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteShopShippingProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetShopShippingProfileResponse parses an HTTP response from a GetShopShippingProfileWithResponse call
func ParseGetShopShippingProfileResponse(rsp *http.Response) (*GetShopShippingProfileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetShopShippingProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ShopShippingProfile
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateShopShippingProfileResponse parses an HTTP response from a UpdateShopShippingProfileWithResponse call
func ParseUpdateShopShippingProfileResponse(rsp *http.Response) (*UpdateShopShippingProfileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateShopShippingProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ShopShippingProfile
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetShopShippingProfileDestinationsByShippingProfileResponse parses an HTTP response from a GetShopShippingProfileDestinationsByShippingProfileWithResponse call
func ParseGetShopShippingProfileDestinationsByShippingProfileResponse(rsp *http.Response) (*GetShopShippingProfileDestinationsByShippingProfileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetShopShippingProfileDestinationsByShippingProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ShopShippingProfileDestinations
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateShopShippingProfileDestinationResponse parses an HTTP response from a CreateShopShippingProfileDestinationWithResponse call
func ParseCreateShopShippingProfileDestinationResponse(rsp *http.Response) (*CreateShopShippingProfileDestinationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateShopShippingProfileDestinationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ShopShippingProfileDestination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteShopShippingProfileDestinationResponse parses an HTTP response from a DeleteShopShippingProfileDestinationWithResponse call
func ParseDeleteShopShippingProfileDestinationResponse(rsp *http.Response) (*DeleteShopShippingProfileDestinationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteShopShippingProfileDestinationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateShopShippingProfileDestinationResponse parses an HTTP response from a UpdateShopShippingProfileDestinationWithResponse call
func ParseUpdateShopShippingProfileDestinationResponse(rsp *http.Response) (*UpdateShopShippingProfileDestinationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateShopShippingProfileDestinationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ShopShippingProfileDestination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetShopShippingProfileUpgradesResponse parses an HTTP response from a GetShopShippingProfileUpgradesWithResponse call
func ParseGetShopShippingProfileUpgradesResponse(rsp *http.Response) (*GetShopShippingProfileUpgradesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetShopShippingProfileUpgradesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ShopShippingProfileUpgrades
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateShopShippingProfileUpgradeResponse parses an HTTP response from a CreateShopShippingProfileUpgradeWithResponse call
func ParseCreateShopShippingProfileUpgradeResponse(rsp *http.Response) (*CreateShopShippingProfileUpgradeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateShopShippingProfileUpgradeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ShopShippingProfileUpgrade
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteShopShippingProfileUpgradeResponse parses an HTTP response from a DeleteShopShippingProfileUpgradeWithResponse call
func ParseDeleteShopShippingProfileUpgradeResponse(rsp *http.Response) (*DeleteShopShippingProfileUpgradeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteShopShippingProfileUpgradeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateShopShippingProfileUpgradeResponse parses an HTTP response from a UpdateShopShippingProfileUpgradeWithResponse call
func ParseUpdateShopShippingProfileUpgradeResponse(rsp *http.Response) (*UpdateShopShippingProfileUpgradeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateShopShippingProfileUpgradeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ShopShippingProfileUpgrade
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetListingsByShopSectionIdResponse parses an HTTP response from a GetListingsByShopSectionIdWithResponse call
func ParseGetListingsByShopSectionIdResponse(rsp *http.Response) (*GetListingsByShopSectionIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetListingsByShopSectionIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ShopListings
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetShopReceiptTransactionsByShopResponse parses an HTTP response from a GetShopReceiptTransactionsByShopWithResponse call
func ParseGetShopReceiptTransactionsByShopResponse(rsp *http.Response) (*GetShopReceiptTransactionsByShopResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetShopReceiptTransactionsByShopResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ShopReceiptTransactions
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetShopReceiptTransactionResponse parses an HTTP response from a GetShopReceiptTransactionWithResponse call
func ParseGetShopReceiptTransactionResponse(rsp *http.Response) (*GetShopReceiptTransactionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetShopReceiptTransactionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ShopReceiptTransaction
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetUserAddressesResponse parses an HTTP response from a GetUserAddressesWithResponse call
func ParseGetUserAddressesResponse(rsp *http.Response) (*GetUserAddressesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserAddressesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserAddresses
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteUserAddressResponse parses an HTTP response from a DeleteUserAddressWithResponse call
func ParseDeleteUserAddressResponse(rsp *http.Response) (*DeleteUserAddressResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteUserAddressResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetUserAddressResponse parses an HTTP response from a GetUserAddressWithResponse call
func ParseGetUserAddressResponse(rsp *http.Response) (*GetUserAddressResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserAddressResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserAddress
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	}

	return response, nil
}

// ParseGetMeResponse parses an HTTP response from a GetMeWithResponse call
func ParseGetMeResponse(rsp *http.Response) (*GetMeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Self
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetUserResponse parses an HTTP response from a GetUserWithResponse call
func ParseGetUserResponse(rsp *http.Response) (*GetUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetShopByOwnerUserIdResponse parses an HTTP response from a GetShopByOwnerUserIdWithResponse call
func ParseGetShopByOwnerUserIdResponse(rsp *http.Response) (*GetShopByOwnerUserIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetShopByOwnerUserIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Shop
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}
